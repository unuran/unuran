# $Id: t_cext.conf 3267 2006-11-17 20:18:28Z leydold $
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: CEXT

[main - header:]

\#include "devel/src/cext.h"

/* prototypes */

int check_init(UNUR_GEN *gen);
double check_sample(UNUR_GEN *gen);

double exp1_sample(UNUR_GEN *gen);

\#define COMPARE_SAMPLE_SIZE  (500)
\#define VIOLATE_SAMPLE_SIZE  (20)

/* \#define SEED   (298346) */


#############################################################################

[new]

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID


#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_init(par,NULL);
	--> expected_setfailed --> UNUR_ERR_NULL

~_sample(par,NULL);
	--> expected_setfailed --> UNUR_ERR_NULL

~_params(NULL,NULL,0);
	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid parameter object:
   distr = unur_distr_normal(NULL,0);
   par = unur_arou_new(distr); ]

~_init(par,NULL);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_sample(par,NULL);
	--> expected_setfailed --> UNUR_ERR_NULL

~_sample(par,check_sample);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

unur_par_free(par);


[set - invalid generator object:
   double p[] = { 1., 2., 3. };
   size_t sp = sizeof(p);
   distr = unur_distr_normal(NULL,0);
   par = unur_srou_new(distr); 
   gen = unur_init(par);  <-- ! NULL ]
 
~_params(gen,p,sp);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID


[set - invalid NULL ptr:
   double p[] = { 1., 2., 3. };
   size_t sp = sizeof(p);
   distr = unur_distr_normal(NULL,0);
   par = unur_cext_new(distr);
   unur_cext_set_sample(par,check_sample);
   gen = unur_init(par);  <-- ! NULL ]
 
~_params(gen,NULL,sp);
	--> expected_setfailed --> UNUR_ERR_NULL

~_params(gen,p,0);
	--> expected_setfailed --> UNUR_ERR_PAR_SET


#############################################################################

[get]

[get - invalid NULL ptr: 
   gen = NULL; ]

~_params(gen);
	--> expected_NULL --> UNUR_ERR_NULL

[get - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_srou_new(distr); 
   gen = unur_init(par);  <-- ! NULL ]
 
~_params(gen);
	--> expected_NULL --> UNUR_ERR_GEN_INVALID


#############################################################################

[chg]

#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL


#############################################################################

[reinit]

#[reinit - does not exist:
#   distr = unur_distr_normal(NULL,0);
#   par = unur_cstd_new(distr);
#   gen = unur_init( par ); <-- ! NULL ]
#
#unur_reinit( gen );
#	--> expected_reinit

#############################################################################

[sample]

[sample - compare clone:
   UNUR_GEN *clone;
   distr = unur_distr_exponential(NULL,0);
   par = NULL;
   gen = NULL; ]

/* external generator */
par = unur_cext_new(distr);
unur_cext_set_sample(par,exp1_sample);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_double_sequence_gen

/* cstd */
unur_free(gen);
par = unur_cstd_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen

#.....................................................................

#############################################################################

[validate]

[validate - generators:]

# exponential(1) 
par[0] = unur_cext_new(@distr@);
unur_cext_set_sample(par,exp1_sample);


### change parameters (use default variant)
#{ UNUR_DISTR *dg =NULL;
#par[11] = unur_cstd_new(@distr@);
#fpm[0] = 2.;
#fpm[1] = 5.;
#dg = unur_get_distr(gen);
#unur_distr_cont_set_pdfparams(dg,fpm,2);
#unur_reinit(gen); }
#

[validate - distributions:]

# Exponential distribution
distr[0] = unur_distr_exponential(NULL,0);

#fpm[0] = 1.;
#fpm[1] = 2.;
#distr[0] = unur_distr_beta(fpm,2);
#

## number of distributions: 66

[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator (given variant does not exist)
#  - ... fail test
#  / ... either init fails or test passes
#  . ... do not run test
#  # ... comment
#
# generators:
#   [1] ... Exponential(0)
#
#gen	0  1  2  3  4  5  6  7  8  9  0  1	# distribution
#-------------------------------------------------------------
<0>	+	# exponential (1)
#<1>	.  +  .  .  .  .  .  .  .  .  .  .	# beta (1, 5)
#<2>	.  +  .  .  .  .  .  .  .  .  .  .	# beta (1, 100)
#<3>	.  +  .  .  .  .  .  .  .  .  .  .	# beta (3, 4)


#############################################################################
#############################################################################

[verbatim]

int check_init(UNUR_GEN *gen) { return UNUR_SUCCESS; }
double check_sample(UNUR_GEN *gen) { return 0.; }

double exp1_sample(UNUR_GEN *gen) { 
	double U = unur_sample_urng(gen);
	return (-log(1. - U));
}


#############################################################################
