# $Id: t_stringparser.conf 3448 2007-02-15 21:15:05Z leydold $
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: INFO

[main - header:]

/* prototypes */
int unur_ssr_set_pedantic( struct unur_par *par, int pedantic );

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)

/* macros for running info test */

\#define INFO_TEST(genstr) \
   gen = unur_str2gen((genstr)); \
   fprintf(TESTLOG,"GEN  = \"%s\"\n",(genstr)); \
   fprintf(TESTLOG,"INFO = \n%s\n",unur_gen_info(gen,FALSE)); \
   fprintf(TESTLOG,"HELP = \n%s\n",unur_gen_info(gen,TRUE)); \
   fprintf(TESTLOG,"---------------------\n"); \
   unur_free(gen); gen = NULL;

\#define INFO_TEST_chg(genstr,run_chg) \
   gen = unur_str2gen((genstr)); \
   run_chg; \
   fprintf(TESTLOG,"GEN  = \"%s\"\n",(genstr)); \
   fprintf(TESTLOG,"INFO = \n%s\n",unur_gen_info(gen,FALSE)); \
   fprintf(TESTLOG,"HELP = \n%s\n",unur_gen_info(gen,TRUE)); \
   fprintf(TESTLOG,"---------------------\n"); \
   unur_free(gen); gen = NULL;

\#define METHOD(m) \
   printf("%s ",(m)); \
   fprintf(TESTLOG,"*********************\n"); \
   fprintf(TESTLOG,"* %s\n",(m)); \
   fprintf(TESTLOG,"*********************\n\n");


#############################################################################

[new]

#############################################################################

[set]

#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]


#############################################################################

[reinit]

#############################################################################

[sample]

[sample - set debugging flags:
   gen = NULL; ]

unur_set_default_debug(UNUR_DEBUG_INIT);

#---------------------------------------------------------------------

[sample - AROU:
   gen = NULL; ]

\#ifdef UNUR_ENABLE_INFO

METHOD("AROU");

INFO_TEST("normal & method=arou");
INFO_TEST("normal & method=arou; max_segments=10; cpoints=3");
INFO_TEST("cont; pdf='exp(-x^2)' & method=arou; max_segments=1000");
INFO_TEST("cont; pdf='exp(-x^2)' & method=arou; max_segments=1000; max_sqhratio=0.90");

\#endif

#---------------------------------------------------------------------

[sample - HINV:
   gen = NULL; ]

\#ifdef UNUR_ENABLE_INFO

METHOD("HINV");

INFO_TEST("normal & method=hinv");
INFO_TEST("cont; cdf='1-exp(-x)'; domain=(0,inf) & method=hinv");
INFO_TEST("cont; cdf='1-exp(-x)'; domain=(0,inf) & method=hinv; order=5");
INFO_TEST("cont; cdf='1-exp(-x)'; domain=(0,inf); mode=0 & method=hinv");
INFO_TEST("cont; cdf='1-exp(-x)'; domain=(0,inf) & method=hinv; u_resolution=1e-16");
INFO_TEST_chg("normal & method=hinv", unur_hinv_chg_truncated(gen,0.,1));

\#endif

#---------------------------------------------------------------------

[sample - NINV:
   gen = NULL; ]

\#ifdef UNUR_ENABLE_INFO

METHOD("NINV");

INFO_TEST("normal & method=ninv");
INFO_TEST("normal & method=ninv; usenewton");
INFO_TEST("cont; cdf='1-exp(-x)'; domain=(0,inf) & method=ninv");
INFO_TEST_chg("normal & method=ninv", unur_ninv_chg_truncated(gen,0.,1));
INFO_TEST("normal & method=ninv; x_resolution=1e-10");
INFO_TEST("normal & method=ninv; max_iter=100");
INFO_TEST("normal & method=ninv; start=(-1,1)");
INFO_TEST("normal & method=ninv; table=123");

\#endif

#---------------------------------------------------------------------

[sample - NROU:
   gen = NULL; ]

METHOD("NROU");

INFO_TEST("normal & method=nrou");
INFO_TEST("cont; pdf='exp(-x^2)' & method=nrou");
INFO_TEST("cont; pdf='exp(-x^2)' & method=nrou; r=2");
INFO_TEST("cont; pdf='exp(-x^2)' & method=nrou; v=1");
INFO_TEST("cont; pdf='exp(-x^2)' & method=nrou; u=(-0.61, 0.61)");
INFO_TEST("cont; pdf='exp(-x^2)' & method=nrou; v=1; u=(-0.61, 0.61)");

#---------------------------------------------------------------------

[sample - SROU:
   gen = NULL; ]

METHOD("SROU");

INFO_TEST("normal & method=srou");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=srou");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=srou; usemirror");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=srou; cdfatmode=0.5; usesqueeze");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=srou; r=2");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=srou; r=2; cdfatmode=0.5");

#---------------------------------------------------------------------

[sample - SSR:
   gen = NULL; ]

METHOD("SSR");

INFO_TEST("normal & method=ssr");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=ssr");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=ssr; cdfatmode=0.5; usesqueeze");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=ssr; r=2");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=ssr; r=2; cdfatmode=0.5");
INFO_TEST("cont; pdf='exp(-x^2)';pdfarea=1.773 & method=ssr");
INFO_TEST("cont; pdf='exp(-x^2)';domain=(0,inf);pdfarea=0.887 & method=ssr");

#---------------------------------------------------------------------

[sample - TDR:
   gen = NULL; ]

\#ifdef UNUR_ENABLE_INFO

METHOD("TDR");

INFO_TEST("normal & method=tdr");
INFO_TEST("normal & method=tdr; max_intervals=10; cpoints=3");
INFO_TEST("cont; pdf='exp(-x^2)' & method=tdr");
INFO_TEST("cont; pdf='exp(-x^2)' & method=tdr; c=0");
INFO_TEST("cont; pdf='exp(-x^2)' & method=tdr; c=0; variant_ia");
INFO_TEST("cont; pdf='exp(-x^2)' & method=tdr; c=0; variant_ia; max_intervals=1000");
INFO_TEST("cont; pdf='exp(-x^2)' & method=tdr; c=0; variant_ia; max_intervals=1000; max_sqhratio=0.90");
INFO_TEST_chg("normal & method=tdr", unur_tdr_chg_truncated(gen,0.,1));

\#endif

#---------------------------------------------------------------------

[sample - TDRGW:
   gen = NULL; ]

\#ifdef UNUR_ENABLE_INFO

METHOD("TDRGW");

INFO_TEST("normal & method=tdrgw");
INFO_TEST("normal & method=tdrgw; cpoints=100");
INFO_TEST("cont; logpdf='exp(-x^2)' & method=tdrgw");

\#endif

#---------------------------------------------------------------------

[sample - UNIF:
   gen = NULL; ]

\#ifdef UNUR_ENABLE_INFO

METHOD("UNIF");

INFO_TEST("uniform(0,1) & method=unif");

\#endif

#---------------------------------------------------------------------


#############################################################################

[validate]

#############################################################################
#############################################################################

[verbatim]

#############################################################################

