# $Id: t_itdr.conf 2211 2005-02-12 11:38:00Z leydold $
#############################################################################

[main]

[main - data:]

# method
method: ITDR

[main - header:]

\#include "experimental/itdr.h"

/* prototypes */
/* pdf of gamma density (a=1/2) */
double pdf_gamma12( double x, const UNUR_DISTR *distr );
double dpdf_gamma12( double x, const UNUR_DISTR *distr );

int unur_itdr_set_pedantic( struct unur_par *par, int pedantic );

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_cont_new(); ]

/* pdf, mode (pole) */
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

[new - data missing in distribution object:
   distr = unur_distr_cont_new(); 
   unur_distr_cont_set_pdf(distr, pdf_gamma12); ]

/* mode (pole) */
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_xi(par,1.);
	--> expected_setfailed --> UNUR_ERR_NULL

~_cp(par, -0.5);
	--> expected_setfailed --> UNUR_ERR_NULL

~_ct(par, -0.5);
	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_xi(par,1.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_cp(par, -0.5);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_ct(par, -0.5);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

unur_par_free(par);


[set - invalid parameters:
   double fpar[1] = {0.5};
   distr = unur_distr_gamma(fpar,1);
   par = unur_itdr_new(distr); ]

~_xi(par,-1.);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_cp(par, 0.5);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_cp(par, -1.0);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_ct(par, 0.5);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_ct(par, -1.0);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

unur_par_free(par);


#############################################################################

[get]

[get - invalid NULL ptr: 
   gen = NULL; ]

~_xi(gen)
	--> expected_INFINITY --> UNUR_ERR_NULL

~_cp(gen)
	--> expected_INFINITY --> UNUR_ERR_NULL

~_ct(gen)
	--> expected_INFINITY --> UNUR_ERR_NULL

~_area(gen)
	--> expected_INFINITY --> UNUR_ERR_NULL


[get - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_arou_new(distr);
   gen = unur_init(par); <-- ! NULL ]

~_xi(gen)
	--> expected_INFINITY --> UNUR_ERR_GEN_INVALID

~_cp(gen)
	--> expected_INFINITY --> UNUR_ERR_GEN_INVALID

~_ct(gen)
	--> expected_INFINITY --> UNUR_ERR_GEN_INVALID

~_area(gen)
	--> expected_INFINITY --> UNUR_ERR_GEN_INVALID

#############################################################################

[chg]

[chg - invalid NULL ptr: 
   gen = NULL; ]

~_verify( gen, 1 );
	--> expected_setfailed --> UNUR_ERR_NULL

[chg - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_arou_new(distr);
   gen = unur_init(par); <-- ! NULL ]

~_verify( gen, 1 );
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID



#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL

[init - data missing in distribution object:
   distr = unur_distr_cont_new();
   par = NULL; ]

/* dpdf, mode */
unur_distr_cont_set_pdf(distr,pdf_gamma12);
par = unur_itdr_new( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

/* mode */
unur_distr_cont_set_dpdf(distr,dpdf_gamma12);
par = unur_itdr_new( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

unur_distr_cont_set_mode(distr,0.);
par = unur_itdr_new( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_PROP


#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare:
   double fpm[] = { 0.8, 1., 1. };
   distr = unur_distr_gamma(fpm,3); 
   par = NULL; ]

/* default algorithm */
par = unur_itdr_new(distr);
	-->compare_double_sequence_par_start

/* default algorithm - verifying mode */
par = unur_itdr_new(distr);
unur_itdr_set_verify(par,1);
	-->compare_double_sequence_par

#.....................................................................

[sample - compare:
   double xi, cp, ct;
   double fpm[] = { 0.8, 1., 1. };
   distr = unur_distr_gamma(fpm,3); 
   par = NULL; 
   gen = NULL; ]

/* default algorithm */
par = unur_itdr_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

/* set bx, ct and cp */
xi = unur_itdr_get_xi(gen);
ct = unur_itdr_get_ct(gen);
cp = unur_itdr_get_cp(gen);
unur_free(gen);
par = unur_itdr_new(distr);
unur_itdr_set_xi(par,xi);
unur_itdr_set_cp(par,cp);
unur_itdr_set_ct(par,ct);
gen = unur_init(par);
	-->compare_double_sequence_gen

#.....................................................................

[sample - compare:
   double xi, cp, ct;
   double fpm[] = { 0.3, 1., 1. };
   distr = unur_distr_gamma(fpm,3); 
   par = NULL; 
   gen = NULL; ]

/* default algorithm */
par = unur_itdr_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

/* set bx, ct and cp */
xi = unur_itdr_get_xi(gen);
ct = unur_itdr_get_ct(gen);
cp = unur_itdr_get_cp(gen);
unur_free(gen);
par = unur_itdr_new(distr);
unur_itdr_set_xi(par,xi);
unur_itdr_set_cp(par,cp);
unur_itdr_set_ct(par,ct);
gen = unur_init(par);
	-->compare_double_sequence_gen

#.....................................................................

[sample - compare:
   double xi, cp, ct;
   double fpm[] = { 3., 0.3, 1., 2. };
   distr = unur_distr_beta(fpm,4); 
   par = NULL; 
   gen = NULL; ]

/* default algorithm */
par = unur_itdr_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

/* set bx, ct and cp */
xi = unur_itdr_get_xi(gen);
ct = unur_itdr_get_ct(gen);
cp = unur_itdr_get_cp(gen);
unur_free(gen);
par = unur_itdr_new(distr);
unur_itdr_set_xi(par,xi);
unur_itdr_set_cp(par,cp);
unur_itdr_set_ct(par,ct);
gen = unur_init(par);
	-->compare_double_sequence_gen

#.....................................................................

[sample - compare clone:
   UNUR_GEN *clone;
   double fpm[] = { 0.3, 1., 1. };
   distr = unur_distr_gamma(fpm,3); 
   par = NULL; 
   gen = NULL; ]

/* original generator object */
par = unur_itdr_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
	-->compare_double_sequence_gen

#.....................................................................

#[sample - compare stringparser:
#   double fpar[] = { 0.3, 1., 1. };
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]

#distr = unur_distr_gamma(fpar,3);
#par = unur_itdr_new(distr);
#unur_itdr_set_xi(par,1.3);
#unur_itdr_set_cp(par,-0.7);
#unur_itdr_set_ct(par,-0.3);
#unur_itdr_set_verify(par,TRUE);
#gen = unur_init(par);
#	-->compare_double_sequence_gen_start

#unur_free(gen); gen = NULL;
#unur_distr_free(distr); distr = NULL;
#gen = unur_str2gen( "gamma(0.3,1.,1.) & \
#          method = itdr; xi = 1.3; cp = -0.7; ct = -0.3; verify" );
#	-->compare_double_sequence_gen

#############################################################################

[validate]

[validate - generators:]

# default program
par[0] = unur_itdr_new(@distr@);

# set xi, cp, and ct  for gamm(0.1)
par[1] = unur_itdr_new(@distr@);
unur_itdr_set_xi(par,0.1);
unur_itdr_set_cp(par,-0.9);
unur_itdr_set_ct(par,-0.54);

# set xi, cp, and ct  for gamm(0.5)
par[2] = unur_itdr_new(@distr@);
unur_itdr_set_xi(par,0.5);
unur_itdr_set_cp(par,-0.5);
unur_itdr_set_ct(par,-0.5);


[validate - distributions:]

# Gamma distributions
fpm[0] = 0.1;
distr[0] = unur_distr_gamma(fpm,1);

fpm[0] = 0.5;
distr[1] = unur_distr_gamma(fpm,1);

fpm[0] = 0.9;
distr[2] = unur_distr_gamma(fpm,1);

fpm[0] = 1.;
distr[3] = unur_distr_gamma(fpm,1);

fpm[0] = 2.;
distr[4] = unur_distr_gamma(fpm,1);

fpm[0] = 0.5;
fpm[1] = 2.;
fpm[2] = 1.;
distr[5] = unur_distr_gamma(fpm,3);

fpm[0] = 0.5;
fpm[1] = 2.;
fpm[2] = -1.;
distr[19] = unur_distr_gamma(fpm,3);

fpm[0] = 0.5;
fpm[1] = 1.;
fpm[2] = 1.;
distr[6] = unur_distr_gamma(fpm,3);
unur_distr_cont_set_domain(distr[6],1.,1.1);

fpm[0] = 0.5;
fpm[1] = 1.;
fpm[2] = 1.;
distr[7] = unur_distr_gamma(fpm,3);
unur_distr_cont_set_domain(distr[7],1.,2.);

fpm[0] = 0.5;
fpm[1] = 1.;
fpm[2] = 1.;
distr[8] = unur_distr_gamma(fpm,3);
unur_distr_cont_set_domain(distr[8],1.,4.);

# Normal distributions
distr[9] = unur_distr_normal(NULL,0);

distr[23] = unur_distr_normal(NULL,0);
unur_distr_cont_set_domain(distr[23],0.,UNUR_INFINITY);

distr[10] = unur_distr_normal(NULL,0);
unur_distr_cont_set_domain(distr[10],0.,4.);

distr[11] = unur_distr_normal(NULL,0);
unur_distr_cont_set_domain(distr[11],1.,4.);

distr[12] = unur_distr_normal(NULL,0);
unur_distr_cont_set_domain(distr[12],-0.5,4.);
unur_distr_cont_set_mode(distr[12],-0.5);

# Cauchy distributions
distr[13] = unur_distr_cauchy(NULL,0);

distr[22] = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(distr[22],0.,UNUR_INFINITY);

distr[14] = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(distr[14],0.,4.);

distr[15] = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(distr[15],1.,4.);

distr[16] = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(distr[16],-0.5,4.);
unur_distr_cont_set_mode(distr[16],-0.5);

# Beta distributions
fpm[0] = 0.5;
fpm[1] = 3.;
distr[17] = unur_distr_beta(fpm,2);

fpm[0] = 0.5;
fpm[1] = 3.;
fpm[2] = 1.;
fpm[3] = 2.;
distr[18] = unur_distr_beta(fpm,4);

fpm[0] = 3.;
fpm[1] = 0.5;
fpm[2] = -1.;
fpm[3] = 0.;
distr[20] = unur_distr_beta(fpm,4);

fpm[0] = 3.;
fpm[1] = 0.5;
distr[21] = unur_distr_beta(fpm,2);


# number of distributions: 24


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0] default
#   [1] set xi, cp, and ct for gamm(0.1)
#   [2] set xi, cp, and ct for gamm(0.5)
# 
#gen	0  1  2	# distribution
#---------------------------------------------
<0>	+  +  .	# gamma(0.1)
<1>	+  .  +	# gamma(0.5)
<2>	+  .  .	# gamma(0.9)
<3>	+  .  .	# gamma(1.)
<4>	0  .  .	# gamma(2.)
<5>	+  .  .	# gamma(0.5,2.,1.)
<19>	+  .  .	# gamma(0.5,2.,-1.)
<6>	+  .  .	# gamma(0.5,1.,1.), domain=(1.,1.1)
<7>	+  .  .	# gamma(0.5,1.,1.), domain=(1.,2.)
<8>	+  .  .	# gamma(0.5,1.,1.), domain=(1.,4.)
<9>	0  .  .	# normal()
<23>	+  .  .	# normal(), domain=(0.,inf)
<10>	+  .  .	# normal(), domain=(0.,4.)
<11>	+  .  .	# normal(), domain=(1.,4.)
<12>	0  .  .	# normal(), domain=(-0.5,4.)
<13>	0  .  .	# cauchy()
<22>	+  .  .	# cauchy(), domain=(0.,inf)
<14>	+  .  .	# cauchy(), domain=(0.,4.)
<15>	+  .  .	# cauchy(), domain=(1.,4.)
<16>	0  .  .	# cauchy(), domain=(-0.5,4.)
<17>	+  .  .	# beta(0.5,3.)
<18>	+  .  .	# beta(0.5,3.; 1.,2.)
<20>	+  .  .	# beta(3.,0.5; -1.,0.)
<21>	+  .  .	# beta(3.,0.5)

[validate - verify hat:]

#  + ... pass test
#  ~ ... fail in at most 1% of samples
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0] default
#   [1] set xi, cp, and ct for gamm(0.1)
#   [2] set xi, cp, and ct for gamm(0.5)
# 
#gen	0  1  2	# distribution
#---------------------------------------------
<0>	+  +  .	# gamma(0.1)
<1>	+  .  +	# gamma(0.5)
<2>	+  .  .	# gamma(0.9)
<3>	+  .  .	# gamma(1.)
<4>	0  .  .	# gamma(2.)
<5>	+  .  .	# gamma(0.5,2.,1.)
<19>	+  .  .	# gamma(0.5,2.,-1.)
<6>	+  .  .	# gamma(0.5,1.,1.), domain=(1.,1.1)
<7>	+  .  .	# gamma(0.5,1.,1.), domain=(1.,2.)
<8>	+  .  .	# gamma(0.5,1.,1.), domain=(1.,4.)
<9>	0  .  .	# normal()
<23>	+  .  .	# normal(), domain=(0.,inf)
<10>	+  .  .	# normal(), domain=(0.,4.)
<11>	+  .  .	# normal(), domain=(1.,4.)
<12>	0  .  .	# normal(), domain=(-0.5,4.)
<13>	0  .  .	# cauchy()
<22>	+  .  .	# cauchy(), domain=(0.,inf)
<14>	+  .  .	# cauchy(), domain=(0.,4.)
<15>	+  .  .	# cauchy(), domain=(1.,4.)
<16>	0  .  .	# cauchy(), domain=(-0.5,4.)
<17>	+  .  .	# beta(0.5,3.)
<18>	+  .  .	# beta(0.5,3.; 1.,2.)
<20>	+  .  .	# beta(3.,0.5; -1.,0.)
<21>	+  .  .	# beta(3.,0.5)


#############################################################################
#############################################################################

[verbatim]

/* pdf of gamma density (a=1/2) */
double pdf_gamma12( double x, const UNUR_DISTR *distr )
{ 
	return exp(-x)/sqrt(x);
}

double dpdf_gamma12( double x, const UNUR_DISTR *distr )
{ 
	return -exp(-x)/sqrt(x) * (1.+1./(2.*x));
}


/* dummy function */
int unur_itdr_set_pedantic( struct unur_par *par, int pedantic )
{ return 1; }


#############################################################################
