#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: MIXT

[main - header:]

/* prototypes */

double cdf_cont_1 ( double x, const UNUR_DISTR *distr );
double cdf_cont_inv ( double x, const UNUR_DISTR *distr );

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)

/* \#define SEED (1656256) */

#############################################################################

[new]

[new - invalid NULL ptr: 
   double prob[2] = {1,2}; ]

~( 0, NULL, NULL );
      --> expected_NULL --> UNUR_ERR_NULL

~( 2, prob, NULL );
      --> expected_NULL --> UNUR_ERR_NULL


[new - invalid arguments:
   double prob[2] = {1,2};
   UNUR_GEN *comp[2]; ]

comp[0] = unur_str2gen("normal");
comp[1] = unur_str2gen("normal");

~( -1, prob, comp );
      --> expected_NULL --> UNUR_ERR_DISTR_DOMAIN

unur_free(comp[0]);
unur_free(comp[1]);


#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_useinversion(par,0.);
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   distr = unur_distr_normal(NULL,0);
   par = unur_arou_new(distr); ]

~_useinversion(par,0.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

unur_par_free(par);

#############################################################################

# [get]

#############################################################################

# [chg]

#############################################################################

[init]

[init - invalid NULL in list of components:
   double prob[2] = {1,2};
   UNUR_GEN *comp[2] = {NULL, NULL}; 
   par = unur_mixt_new(2,prob,comp); ]

unur_init( par );
	   --> expected_NULL --> UNUR_ERR_NULL

[init - invalid distribution type:
   double prob[2] = {1,2};
   UNUR_DISTR *distr;
   UNUR_PAR *par;
   UNUR_GEN *comp[2]; ]

distr = unur_distr_multinormal(2,NULL,NULL);
comp[0] = unur_init(unur_hitro_new(distr));
comp[1] = unur_str2gen("normal");

par = unur_mixt_new( 2, prob, comp );
unur_init( par );
      --> expected_NULL --> UNUR_ERR_GEN_INVALID

unur_distr_free(distr);
unur_free(comp[0]);
unur_free(comp[1]);


[init - invalid probabilities:
   double prob[2] = {1,-2};
   UNUR_PAR *par;
   UNUR_GEN *comp[2]; ]

comp[0] = unur_str2gen("normal");
comp[1] = unur_str2gen("normal");

par = unur_mixt_new( 2, prob, comp );
unur_init( par );
      --> expected_NULL --> UNUR_ERR_GEN_DATA

unur_free(comp[0]);
unur_free(comp[1]);


[init - no inversion method:
   double prob[2] = {1,2};
   UNUR_PAR *par;
   UNUR_GEN *comp[2]; ]

comp[0] = unur_str2gen("normal&method=ssr");
comp[1] = unur_str2gen("normal&method=ssr");

par = unur_mixt_new( 2, prob, comp );
unur_mixt_set_useinversion(par,TRUE);
unur_init( par );
      --> expected_NULL --> UNUR_ERR_GEN_INVALID

unur_free(comp[0]);
unur_free(comp[1]);


[init - overlapping domains cont+cont:
   double prob[2] = {1,2};
   UNUR_PAR *par;
   UNUR_GEN *comp[2]; ]

comp[0] = unur_str2gen("normal;domain=(-2,1)&method=pinv");
comp[1] = unur_str2gen("normal;domain=(-1,2)&method=pinv");

par = unur_mixt_new( 2, prob, comp );
unur_mixt_set_useinversion(par,TRUE);
unur_init( par );
      --> expected_NULL --> UNUR_ERR_GEN_INVALID

unur_free(comp[0]);
unur_free(comp[1]);


[init - overlapping domains cont+discr:
   double prob[2] = {1,2};
   UNUR_PAR *par;
   UNUR_GEN *comp[2]; ]

comp[0] = unur_str2gen("normal;domain=(-2,3)&method=pinv");
comp[1] = unur_str2gen("binomial(100,0.2)&method=dgt");

par = unur_mixt_new( 2, prob, comp );
unur_mixt_set_useinversion(par,TRUE);
unur_init( par );
      --> expected_NULL --> UNUR_ERR_GEN_INVALID

unur_free(comp[0]);
unur_free(comp[1]);


[init - overlapping domains discr+discr:
   double prob[2] = {1,2};
   UNUR_PAR *par;
   UNUR_GEN *comp[2]; ]

comp[0] = unur_str2gen("geometric(0.1)&method=dgt");
comp[1] = unur_str2gen("binomial(100,0.2)&method=dgt");

par = unur_mixt_new( 2, prob, comp );
unur_mixt_set_useinversion(par,TRUE);
unur_init( par );
      --> expected_NULL --> UNUR_ERR_GEN_INVALID

unur_free(comp[0]);
unur_free(comp[1]);


[init - unsorted domains:
   double prob[2] = {1,2};
   UNUR_PAR *par;
   UNUR_GEN *comp[2]; ]

comp[0] = unur_str2gen("normal;domain=(1,2)&method=pinv");
comp[1] = unur_str2gen("normal;domain=(-2,-1)&method=pinv");

par = unur_mixt_new( 2, prob, comp );
unur_mixt_set_useinversion(par,TRUE);
unur_init( par );
      --> expected_NULL --> UNUR_ERR_GEN_INVALID

unur_free(comp[0]);
unur_free(comp[1]);


#############################################################################

# [reinit]

#############################################################################

[sample]

[sample - compare clone cont+cont:
   UNUR_GEN *clone;
   double prob[2] = {1,2};
   UNUR_GEN *comp[2];
   par = NULL;
   gen = NULL; ]

comp[0] = unur_str2gen("normal");
comp[1] = unur_str2gen("exponential");

/* original generator object */
par = unur_mixt_new( 2, prob, comp );
gen = unur_init( par );
        -->compare_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_sequence_gen

unur_free(comp[0]);
unur_free(comp[1]);

#............................................................................

[sample - compare clone cont+discr:
   UNUR_GEN *clone;
   double prob[2] = {1,2};
   UNUR_GEN *comp[2];
   par = NULL;
   gen = NULL; ]

comp[0] = unur_str2gen("normal&method=tdr");
comp[1] = unur_str2gen("binomial(100,0.2)&method=dgt");

/* original generator object */
par = unur_mixt_new( 2, prob, comp );
gen = unur_init( par );
        -->compare_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_sequence_gen

unur_free(comp[0]);
unur_free(comp[1]);

#............................................................................

[sample - compare clone discr+discr:
   UNUR_GEN *clone;
   double prob[2] = {1,2};
   UNUR_GEN *comp[2];
   par = NULL;
   gen = NULL; ]

comp[0] = unur_str2gen("geometric(0.1)&method=dgt");
comp[1] = unur_str2gen("binomial(100,0.2)&method=dgt");

/* original generator object */
par = unur_mixt_new( 2, prob, comp );
gen = unur_init( par );
        -->compare_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_sequence_gen

unur_free(comp[0]);
unur_free(comp[1]);

#............................................................................

[sample - compare clone cont+discr:
   UNUR_GEN *clone;
   double prob[2] = {1,2};
   UNUR_GEN *comp[2];
   par = NULL;
   gen = NULL; ]

comp[0] = unur_str2gen("normal");
comp[1] = unur_str2gen("binomial(100,0.2)&method=dgt");

/* original generator object */
par = unur_mixt_new( 2, prob, comp );
gen = unur_init( par );
        -->compare_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_sequence_gen

unur_free(comp[0]);
unur_free(comp[1]);

#............................................................................

[sample - compare clone empirical+discr:
   UNUR_GEN *clone;
   double prob[2] = {1,2};
   UNUR_GEN *comp[2];
   par = NULL;
   gen = NULL; ]

comp[0] = unur_str2gen("distr = cemp; \
                        data=(-0.10, 0.05,-0.50, 0.08, 0.13,  \
                               -0.21,-0.44,-0.43,-0.33,-0.30, \
                                0.18, 0.20,-0.37,-0.29,-0.90) \
                        & method=empk; smoothing=0.8");
comp[1] = unur_str2gen("binomial(100,0.2)&method=dgt");

/* original generator object */
par = unur_mixt_new( 2, prob, comp );
gen = unur_init( par );
        -->compare_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_sequence_gen

unur_free(comp[0]);
unur_free(comp[1]);

#............................................................................

[sample - compare clone mixt+cont:
   UNUR_GEN *clone;
   double prob[2] = {1,2};
   UNUR_GEN *comp[2];
   par = NULL;
   gen = NULL; ]

comp[0] = unur_str2gen("normal&method=tdr");
comp[1] = unur_str2gen("exponential&method=arou");
par = unur_mixt_new( 2, prob, comp );
gen = unur_init( par );
unur_free(comp[0]);
unur_free(comp[1]);

comp[0] = gen;
comp[1] = unur_str2gen("cauchy&method=srou");

/* original generator object */
par = unur_mixt_new( 2, prob, comp );
gen = unur_init( par );
        -->compare_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_sequence_gen

unur_free(comp[0]);
unur_free(comp[1]);

#............................................................................

[sample - compare clone mixt+cont+inversion:
   UNUR_GEN *clone;
   double prob[2] = {1,2};
   UNUR_GEN *comp[2];
   par = NULL;
   gen = NULL; ]

comp[0] = unur_str2gen("normal;domain=(-inf,-1)&method=pinv");
comp[1] = unur_str2gen("normal;domain=(-1,1)&method=pinv");
par = unur_mixt_new( 2, prob, comp );
unur_mixt_set_useinversion(par,TRUE);
gen = unur_init( par );
unur_free(comp[0]);
unur_free(comp[1]);

comp[0] = gen;
comp[1] = unur_str2gen("normal;domain=(1,inf)&method=pinv");

/* original generator object */
par = unur_mixt_new( 2, prob, comp );
unur_mixt_set_useinversion(par,TRUE);
gen = unur_init( par );
        -->compare_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_sequence_gen

unur_free(comp[0]);
unur_free(comp[1]);


#############################################################################

# [validate]

#############################################################################

[special]

[special - decl:]

int rcode = 0;
int errorsum = 0;

UNUR_DISTR *dtmp;
UNUR_PAR *par;
UNUR_GEN *gen;
UNUR_GEN *comp[3];
double prob[3] = {1.,2.,3.};

[special - start:]

/* very ugly hack */

comp[0] = unur_str2gen("exponential&method=pinv");
comp[1] = unur_str2gen("normal&method=pinv");
comp[2] = unur_str2gen("uniform(-2,-1)&method=pinv");

unur_reset_errno();
par = unur_mixt_new( 3, prob, comp );
gen = unur_init(par);
dtmp = unur_get_distr(gen);
unur_distr_set_name(dtmp,"cont");
unur_distr_cont_set_cdf(dtmp,cdf_cont_1);
rcode = run_validate_chi2(TESTLOG,0,gen,dtmp,'+');
errorsum += (rcode==UNUR_SUCCESS)?0:1;
unur_free(gen);

unur_free(comp[0]);
unur_free(comp[1]);
unur_free(comp[2]);

/* ---------------------------------- */

comp[0] = unur_str2gen("normal;domain=(-inf,-1)&method=pinv");
comp[1] = unur_str2gen("normal;domain=(-1,1)&method=pinv");
comp[2] = unur_str2gen("normal;domain=(1,inf)&method=pinv");

unur_reset_errno();
par = unur_mixt_new( 3, prob, comp );
gen = unur_init(par);
dtmp = unur_get_distr(gen);
unur_distr_set_name(dtmp,"cont");
unur_distr_cont_set_cdf(dtmp,cdf_cont_inv);
rcode = run_validate_chi2(TESTLOG,0,gen,dtmp,'+');
errorsum += (rcode==UNUR_SUCCESS)?0:1;
unur_free(gen);

unur_free(comp[0]);
unur_free(comp[1]);
unur_free(comp[2]);

comp[0] = unur_str2gen("normal;domain=(-inf,-1)&method=pinv");
comp[1] = unur_str2gen("normal;domain=(-1,1)&method=pinv");
comp[2] = unur_str2gen("normal;domain=(1,inf)&method=pinv");

unur_reset_errno();
par = unur_mixt_new( 3, prob, comp );
unur_mixt_set_useinversion(par,TRUE);
gen = unur_init(par);
dtmp = unur_get_distr(gen);
unur_distr_set_name(dtmp,"cont_inv");
unur_distr_cont_set_cdf(dtmp,cdf_cont_inv);
rcode = run_validate_chi2(TESTLOG,0,gen,dtmp,'+');
errorsum += (rcode==UNUR_SUCCESS)?0:1;
unur_free(gen);

unur_free(comp[0]);
unur_free(comp[1]);
unur_free(comp[2]);

/* ---------------------------------- */

/* test finished */
FAILED = (errorsum < 1) ? 0 : 1;


#############################################################################

[verbatim]

static UNUR_DISTR *d0 = NULL;
static UNUR_DISTR *d1 = NULL;
static UNUR_DISTR *d2 = NULL;
void remove_cont_1(void) { 
  unur_distr_free(d0); 
  unur_distr_free(d1); 
  unur_distr_free(d2); 
}

double cdf_cont_1 ( double x, const UNUR_DISTR *distr ATTRIBUTE__UNUSED )
{
   double p[3] = {1./6., 2./6., 3./6.};
   double y;

   if (d0 == NULL) {
      double fpar[2] = {-2,-1};
      d0 = unur_distr_exponential(NULL,0);
      d1 = unur_distr_normal(NULL,0);
      d2 = unur_distr_uniform(fpar,2);
      atexit(remove_cont_1);
   }

   y = ( p[0] * unur_distr_cont_eval_cdf(x,d0) + 
         p[1] * unur_distr_cont_eval_cdf(x,d1) + 
	 p[2] * unur_distr_cont_eval_cdf(x,d2) ); 
   
   return y;
}

static UNUR_DISTR *di = NULL;
void remove_cont_inv(void) { unur_distr_free(di); }

double cdf_cont_inv ( double x, const UNUR_DISTR *distr ATTRIBUTE__UNUSED )
{
   double p[3] = {1./6., 2./6., 3./6.};
   double y;

   if (di == NULL) {
      di = unur_distr_normal(NULL,0);
      atexit(remove_cont_inv);
   }

   if (x < -1.) {
      y = p[0] * unur_distr_cont_eval_cdf(x,di) / 0.1586553;
   }
   else if (x < 1.) {
      y = p[0] + p[1] * (unur_distr_cont_eval_cdf(x,di) - 0.1586553) / (0.8413447 - 0.1586553);
   }
   else {
      y = p[0] + p[1] + p[2] * (unur_distr_cont_eval_cdf(x,di) - 0.8413447) / (1 - 0.8413447);
   }

   return y;
}

#############################################################################
