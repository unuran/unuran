# 
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: MVTDR

[main - header:]

\#include "experimental/mvtdr.h"

/* prototypes */

int unur_mvtdr_set_pedantic( UNUR_PAR *par, int pedantic );

\#define COMPARE_SAMPLE_SIZE   (9999)
\#define VIOLATE_SAMPLE_SIZE   (20)

/* HITRO is a Markov Chain Monte Carlo method and thus it is likely to   */
/* fail the chi-square goodness-of-fit test with the used sample size.   */
/* Thus we accept one "hard" failer and more "soft" failures then usual. */
/* \#define CHI2_FAILURES_TOLERATED (1010)  */

double pdf_normal(const double *coord, UNUR_DISTR *distr);
int dpdf_normal(double *grad, const double *coord, UNUR_DISTR *distr);

double logpdf_normal(const double *coord, UNUR_DISTR *distr);
int dlogpdf_normal(double *grad, const double *coord, UNUR_DISTR *distr);

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL


[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - invalid number of dimensions:
   distr = unur_distr_cvec_new(1); ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_PROP


[new - missing data:
    distr = unur_distr_cvec_new(3); ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED


[new - missing data:
    distr = unur_distr_cvec_new(3); 
    unur_distr_cvec_set_pdf(distr,pdf_normal); ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED


[new - missing data:
    distr = unur_distr_cvec_new(3); 
    unur_distr_cvec_set_logpdf(distr,logpdf_normal); ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED



#############################################################################

[set]

[set - invalid NULL ptr: 
    par = NULL; ]

~_stepsmin( par, 5 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_maxcones( par, 5000 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid parameter object:
   distr = unur_distr_normal(NULL,0);
   par = unur_arou_new(distr); ]

~_stepsmin( par, 5 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_maxcones( par, 5000 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

unur_par_free(par);


[set - invalid parameters:
   distr = unur_distr_multinormal( 3, NULL, NULL );
   par = unur_mvtdr_new(distr); ]

~_stepsmin( par, -1 );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

unur_par_free(par);


#############################################################################

[get]

#############################################################################

[chg]

[chg - invalid generator object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_srou_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_verify(gen,1);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID


#############################################################################

[init]

#############################################################################

[reinit]

[reinit - does not exist:
   double x[3];
   distr = unur_distr_multinormal(3,NULL,NULL);
   par = unur_mvtdr_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

unur_reinit( gen );
	--> expected_setfailed --> UNUR_ERR_NO_REINIT

unur_sample_vec( gen, x );
x[0];
	--> expected_INFINITY --> 0x0u


#############################################################################

[sample]

[sample - test clone:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   UNUR_GEN *clone;
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_mvtdr_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
	-->compare_cvec_sequence_gen


#############################################################################

[validate]

[validate - generators:]

# default
par[0] = unur_mvtdr_new(@distr@);

[validate - distributions:]

# standard multinormal distribution
distr[0] = unur_distr_multinormal(2,NULL,NULL);

distr[1] = unur_distr_multinormal(3,NULL,NULL);

distr[2] = unur_distr_multinormal(4,NULL,NULL);

distr[3] = unur_distr_multinormal(5,NULL,NULL);

distr[4] = unur_distr_multinormal(6,NULL,NULL);

distr[5] = unur_distr_multinormal(7,NULL,NULL);


# multinormal distribution, dim = 3 
double mean[]  = { 10., 20., 30. };
double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
distr[6] = unur_distr_multinormal(3,mean,covar);


# multinormal with AR(1) 
distr[7] = unur_distr_multinormal_ar1(3,NULL,0.9);

distr[8] = unur_distr_multinormal_ar1(4,NULL,0.9);

distr[9] = unur_distr_multinormal_ar1(5,NULL,0.9);

## distr[10] = unur_distr_multinormal_ar1(6,NULL,0.8);
distr[10] = unur_distr_multinormal_ar1(6,NULL,0.5);

distr[11] = unur_distr_multinormal_ar1(7,NULL,0.3);


# multinormal with AR(1) (rho=0.9, dim=3), shifted center
double mean[]  = { -1., -2., -3., 4., 5., 6., 7., 8., 9., 10. };
distr[12] = unur_distr_multinormal_ar1(3,mean,0.9);

double mean[]  = { -1., -2., -3., 4., 5., 6., 7., 8., 9., 10. };
distr[13] = unur_distr_multinormal_ar1(4,mean,0.9);

double mean[]  = { -1., -2., -3., 4., 5., 6., 7., 8., 9., 10. };
distr[14] = unur_distr_multinormal_ar1(5,mean,0.9);


# multinormal with constant rho
distr[15] = unur_distr_multinormal_constantrho(3,NULL,0.99);

distr[16] = unur_distr_multinormal_constantrho(4,NULL,0.9);

distr[17] = unur_distr_multinormal_constantrho(5,NULL,0.5);


# number of distributions: 30


[validate - test chi2:]
 
#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:   
#   [0] ... default
#
#gen	0	# distribution
#---------------------------------------------
<0>	+	# standard multinormal (dim=2)
#<1>	+	# standard multinormal (dim=3)
#<2>	+	# standard multinormal (dim=4)
#<3>	+	# standard multinormal (dim=5)
#<4>	+	# standard multinormal (dim=6)
#<5>	+	# standard multinormal (dim=7)
#<6>	+	# multinormal (dim=3), shifted center
#<7>	+	# multinormal with AR1 rho (rho=0.9, dim=3)
#<8>	+	# multinormal with AR1 rho (rho=0.9, dim=4)
#<9>	+	# multinormal with AR1 rho (rho=0.9, dim=5)
#<10>	+	# multinormal with AR1 rho (rho=0.5, dim=6)
#<11>	+	# multinormal with AR1 rho (rho=0.3, dim=7)
#<12>	+	# multinormal with AR1 rho, shifted center (rho=0.9, dim=3)
#<13>	+	# multinormal with AR1 rho, shifted center (rho=0.9, dim=4)
#<14>	+	# multinormal with AR1 rho, shifted center (rho=0.9, dim=5)
#<15>	+	# multinormal with AR1 rho (rho=0.99, dim=3)
#<16>	+	# multinormal with AR1 rho (rho=0.9, dim=4)
#<17>	+	# multinormal with AR1 rho (rho=0.5, dim=5)


[validate - verify hat:]

#  + ... pass test
#  ~ ... fail in at most 1% of samples
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0] ... default
#
#gen    0	# distribution
#---------------------------------------------
<0>	+	# standard multinormal (dim=2)
#<1>	+	# standard multinormal (dim=3)
#<2>	+	# standard multinormal (dim=4)
#<3>	+	# standard multinormal (dim=5)
#<4>	+	# standard multinormal (dim=6)
#<5>	+	# standard multinormal (dim=7)
#<6>	+	# multinormal (dim=3), shifted center
#<7>	+	# multinormal with AR1 rho (rho=0.9, dim=3)
#<8>	+	# multinormal with AR1 rho (rho=0.9, dim=4)
#<9>	+	# multinormal with AR1 rho (rho=0.9, dim=5)
#<10>	+	# multinormal with AR1 rho (rho=0.5, dim=6)
#<11>	+	# multinormal with AR1 rho (rho=0.3, dim=7)
#<12>	+	# multinormal with AR1 rho, shifted center (rho=0.9, dim=3)
#<13>	+	# multinormal with AR1 rho, shifted center (rho=0.9, dim=4)
#<14>	+	# multinormal with AR1 rho, shifted center (rho=0.9, dim=5)
#<15>	+	# multinormal with AR1 rho (rho=0.99, dim=3)
#<16>	+	# multinormal with AR1 rho (rho=0.9, dim=4)
#<17>	+	# multinormal with AR1 rho (rho=0.5, dim=5)


#############################################################################
#############################################################################

[verbatim]

/* dummy function */
int unur_mvtdr_set_pedantic( UNUR_PAR *par, int pedantic )
{ return 1; }

/*-----------------------------------------------------------------*/

double pdf_normal(const double *coord, UNUR_DISTR *distr)
/* multinormal density function */
{	
  int i;
  double f = 0.;

  for( i=0; i<3; i++ )
    f += coord[i] * coord[i];

  return( exp(-f) );
} /* end of pdf_normal() */


int dpdf_normal(double *grad, const double *coord, UNUR_DISTR *distr)
/* gradient of multinormal density function */
{
  int i;
  double f = 0.;

  /* d(e^{-\sum j*x_j^2})/d x_i = -2*x_i*e^{-\sum j*x_j^2} */

  for( i=0; i<3; i++ )
    f += coord[i] * coord[i];
  f = exp( -f );

  for( i=0; i<3; i++ )
    grad[i] = (-2) * coord[i] * f;

  return 0;

} /* end of dpdf_normal() */


/*-----------------------------------------------------------------*/

double logpdf_normal(const double *coord, UNUR_DISTR *distr)
/* multinormal density function */
{	
  int i;
  double f = 0.;

  for( i=0; i<3; i++ )
    f += coord[i] * coord[i];

  return (-f);
} /* end of logpdf_normal() */


int dlogpdf_normal(double *grad, const double *coord, UNUR_DISTR *distr)
/* gradient of multinormal density function */
{
  int i;

  /* d(e^{-\sum j*x_j^2})/d x_i = -2*i*x_i*e^{-\sum j*x_j^2} */

  for( i=0; i<3; i++ )
    grad[i] = -2 * coord[i];

  return 0;

} /* end of dlogpdf_normal() */

#############################################################################
