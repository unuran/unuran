############################################################################

[main]

[main - data:]

# method
method: PINV

[main - header:]

\#include "src/methods/x_gen_source.h"

/* constants */

\#define COMPARE_SAMPLE_SIZE   (500)
\#define VIOLATE_SAMPLE_SIZE   (20)

/* \#define SEED   (298346) */

\#ifndef M_PI
\#define M_PI       3.14159265358979323846264338328      /* pi */
\#endif

/* macros */

\#define set_debug_flag(par) \
   do { \
      if (fullcheck) unur_set_debug((par),~0u); \
      else           unur_set_debug((par),1u); \
   } while (0);

/* prototypes */

#double sin_cdf( double x, const UNUR_DISTR *distr );
#double sin_pdf( double x, const UNUR_DISTR *distr );
#double sin_dpdf( double x, const UNUR_DISTR *distr );

#double sin0_cdf( double x, const UNUR_DISTR *distr );
#double sin0_pdf( double x, const UNUR_DISTR *distr );
#double sin0_dpdf( double x, const UNUR_DISTR *distr );


int pinv_error_experiment( UNUR_PAR *par, int samplesize );

int pinv_error_gen_experiment( UNUR_GEN *gen, 
    			       double uerror, int order, int samplesize ); 


#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_cont_new(); ]

/* pdf */
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   /* double stp[] = {1.,2.,3.}; */
   par = NULL; ]

~_order( par, 3 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_u_resolution( par, 1.e-8 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_boundary(par,1.,3.);
	--> expected_setfailed --> UNUR_ERR_NULL

~_searchboundary(par, TRUE, TRUE )
	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid parameter object:
   /* double stp[] = {1.,2.,3.}; */
   distr = unur_distr_normal(NULL,0);
   par = unur_arou_new(distr); ]

~_order( par, 3 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_u_resolution( par, 1.e-8 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_boundary(par,1.,3.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_searchboundary(par, TRUE, TRUE )
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

unur_par_free(par);


[set - invalid parameters:
   /* double stp[] = {1.,2.,-3.}; */
   distr = unur_distr_normal(NULL,0);
   par = unur_pinv_new(distr); ]

~_order( par, 30 );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_order( par, 1 );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_u_resolution( par, 1. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_boundary(par,1.,-3.);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_boundary(par,1.,UNUR_INFINITY);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

unur_par_free(par);


#############################################################################

[get]

[get - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_srou_new(distr);
   gen = unur_init(par); <-- ! NULL ]

~_n_intervals(gen);
        --> expected_zero --> UNUR_ERR_GEN_INVALID


#############################################################################

#[chg]

#############################################################################

# [init]

#############################################################################

#[reinit]

#[reinit - exists:
#   distr = unur_distr_normal(NULL,0);
#   par = unur_pinv_new(distr);
#   gen = unur_init( par ); <-- ! NULL ]
#
#unur_reinit( gen );
#	--> expected_reinit

#############################################################################

[sample]

[sample - invalid NULL ptr: 
   gen = NULL; ]

unur_pinv_eval_approxinvcdf(gen,0.5);
	--> expected_INFINITY --> UNUR_ERR_NULL

#.....................................................................

[sample - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_srou_new(distr);
   gen = unur_init(par); <-- ! NULL ]

unur_pinv_eval_approxinvcdf(gen,0.5);
	--> expected_INFINITY --> UNUR_ERR_GEN_INVALID


[sample - invalid domain:
   distr = unur_distr_normal(NULL,0);
   par = unur_pinv_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

unur_pinv_eval_approxinvcdf(gen,1.5);
	--> expected_INFINITY --> UNUR_ERR_DOMAIN

unur_pinv_eval_approxinvcdf(gen,-0.5);
	--> expected_negINFINITY --> UNUR_ERR_DOMAIN

#.....................................................................

[sample - compare clone:
   UNUR_GEN *clone;
   distr = unur_distr_normal(NULL,0); 
   par = NULL;
   gen = NULL; ]

/* original generator object */
par = unur_pinv_new(distr);
gen = unur_init(par);
        -->compare_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_sequence_gen

#.....................................................................
#
#[sample - compare reinit:
#   distr = unur_distr_normal(NULL,0); 
#   par = NULL;
#   gen = NULL; ]
#
#/* original generator object */
#par = unur_pinv_new(distr);
#gen = unur_init(par);
#        -->compare_sequence_gen_start
#
#/* reinit */
#unur_reinit(gen);
#        -->compare_sequence_gen

#.....................................................................

#[sample - compare stringparser:
#   double fpar[] = {3.,4.};
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
#
#distr = unur_distr_gamma(fpar,2);
#unur_distr_cont_set_domain(distr,2.,UNUR_INFINITY);
#par = unur_pinv_new(distr);
#set_debug_flag(par);
#gen = unur_init(par);
#	-->compare_sequence_gen_start
#	
#unur_free(gen); gen = NULL;
#unur_distr_free(distr); distr = NULL;
#gen = unur_str2gen( "gamma(3.,4.); domain = 2,infinity & \
#  method = pinv; debug = 0x1" );
#	-->compare_sequence_gen


#unur_free(gen); gen = NULL;
#distr = unur_distr_normal(NULL,0);
#unur_distr_cont_set_domain(distr,2.,UNUR_INFINITY);
#par = unur_pinv_new(distr);
#unur_pinv_set_order(par,1);
#unur_pinv_set_max_intervals(par,1000);
#unur_pinv_set_u_resolution(par,0.001);
#unur_pinv_set_boundary(par,2.,5.);
#set_debug_flag(par);
#gen = unur_init(par);
#	-->compare_sequence_gen_start
#	
#unur_free(gen); gen = NULL;
#unur_distr_free(distr); distr = NULL;
#gen = unur_str2gen( "normal; domain = (2,inf) & \
#         method = pinv; order = 1; max_intervals = 1000; u_resolution = 0.001; \
#         boundary = (2,5); debug = 0x1" );
#	-->compare_sequence_gen
#

## not tested:
## int unur_pinv_set_cpoints( UNUR_PAR *parameters, const double *stp, int n_stp );
## int unur_pinv_set_guidefactor( UNUR_PAR *parameters, double factor );


#############################################################################

[validate]

[validate - generators:]

# default
par[0] = unur_pinv_new(@distr@);

# highest order with default precision
par[1] = unur_pinv_new(@distr@);
unur_pinv_set_order(par,19);


[validate - distributions:]

# Normal distributions
distr[0] = unur_distr_normal(NULL,0);


# number of distributions: 1


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0]  ... default 
#  [1]  ... highest order with default precision
#
#	0  1	# distribution
#-----------------------------
<0>	+  +	# normal ()


#############################################################################

[special]

[special - decl:]

  int samplesize = 100000;
  int errorsum = 0;
  double fpar[4];

  UNUR_DISTR *distr;
  UNUR_PAR   *par;

[special - start:]

  /* test for maximal u-error */
  printf("\ntest maximal u-error: "); 
  fprintf(TESTLOG,"\nTest maximal u-error:\n"); 

\#if 1

  ## --- Normal ---
\#if 1
  printf(" normal");
  distr = unur_distr_normal(NULL,0);
  par = unur_pinv_new(distr);
  errorsum += pinv_error_experiment(par,samplesize);
  unur_distr_free(distr);
  fprintf(TESTLOG,"\n");
\#endif
	
  ## --- Cauchy ---
\#if 1
  printf(" cauchy");
  distr = unur_distr_cauchy(NULL,0);
  par = unur_pinv_new(distr);
  errorsum += pinv_error_experiment(par,samplesize);
  unur_distr_free(distr);
  fprintf(TESTLOG,"\n");
\#endif

  ## --- Gamma(2) ---
\#if 1
  printf(" gamma(2)");
  fpar[0] = 2.;
  distr = unur_distr_gamma(fpar,1);
  unur_distr_cont_set_center(distr,1.);
  par = unur_pinv_new(distr);
  unur_pinv_set_boundary(par,0, 1.e100);
  errorsum += pinv_error_experiment(par,samplesize);
  unur_distr_free(distr);
  fprintf(TESTLOG,"\n");
\#endif

  ## --- Gamma(5) ---
\#if 1
  printf(" gamma(5)");
  fpar[0] = 5.;
  distr = unur_distr_gamma(fpar,1);
  unur_distr_cont_set_center(distr,1.);
  par = unur_pinv_new(distr);
  unur_pinv_set_boundary(par,0, 1.e100);
##  unur_pinv_set_searchboundary(par,FALSE,TRUE);
  errorsum += pinv_error_experiment(par,samplesize);
  unur_distr_free(distr);
  fprintf(TESTLOG,"\n");
\#endif

  ## --- Exponential - Gamma(1) ---
\#if 1
  printf(" exponential");
  distr = unur_distr_exponential(NULL,0);
##  unur_distr_cont_set_domain(distr,-UNUR_INFINITY,UNUR_INFINITY);
  par = unur_pinv_new(distr);
  errorsum += pinv_error_experiment(par,samplesize);
  unur_distr_free(distr);
  fprintf(TESTLOG,"\n");
\#endif

  ## --- Gamma(1.02) ---
\#if 1
  printf(" gamma(1.02)");
  fpar[0] = 1.02;
  distr = unur_distr_gamma(fpar,1);
  unur_distr_cont_set_center(distr,1.);
  par = unur_pinv_new(distr);
  errorsum += pinv_error_experiment(par,samplesize);
  unur_distr_free(distr);
  fprintf(TESTLOG,"\n");
\#endif

  ## --- Gamma(0.5) ---
\#if 0
  printf(" gamma(0.5)");
  fpar[0] = 0.5;
  distr = unur_distr_gamma(fpar,1);
  unur_distr_cont_set_center(distr,1.);
  par = unur_pinv_new(distr);
  errorsum += pinv_error_experiment(par,samplesize);
  unur_distr_free(distr);
  fprintf(TESTLOG,"\n");
\#endif

  ## --- beta(2,3) ---
\#if 1
  printf(" beta(2,3)");
  fpar[0] = 2;
  fpar[1] = 3;
  distr = unur_distr_beta(fpar,2);
  par = unur_pinv_new(distr);
  errorsum += pinv_error_experiment(par,samplesize);
  unur_distr_free(distr);
  fprintf(TESTLOG,"\n");
\#endif

\#endif

#	fpar[0]= 5.; 
#	distr = unur_distr_gamma(fpar,1);
#	errorsum += pinv_error_experiment(distr,eu,order,samplesize,NULL,0);
#	unur_distr_free(distr);
#	fprintf(TESTLOG,"\n");
#	
#	fpar[0]=2.; fpar[1]=2.;fpar[2]= 0.; fpar[3]=1.;
#	distr = unur_distr_beta(fpar,4);
#	errorsum += pinv_error_experiment(distr,eu,order,samplesize,NULL,0);
#	unur_distr_free(distr);
#	fprintf(TESTLOG,"\n");
#	
#	fpar[0]=0.3; fpar[1]=3.;fpar[2]= 0.; fpar[3]=1.;
#	distr = unur_distr_beta(fpar,4);
#	errorsum += pinv_error_experiment(distr,eu,order,samplesize,NULL,0);
#	unur_distr_free(distr);
#	fprintf(TESTLOG,"\n");

#	distr = unur_distr_cont_new();
#	unur_distr_set_name(distr,"sin-example");
#	unur_distr_cont_set_cdf( distr, sin_cdf );
#	unur_distr_cont_set_pdf( distr, sin_pdf );
#	unur_distr_cont_set_dpdf( distr, sin_dpdf );
#	unur_distr_cont_set_domain( distr, -1., 1. );
#	cpoints[0]= -0.75;
#	cpoints[1]= -0.25;
#	cpoints[2]=  0.25;
#	cpoints[3]=  0.75;
#	errorsum += pinv_error_experiment(distr,eu,order,samplesize,cpoints,4);
#	unur_distr_free(distr);
#	fprintf(TESTLOG,"\n");
	
#	distr = unur_distr_cont_new();
#	unur_distr_set_name(distr,"sin-0-example");
#	unur_distr_cont_set_cdf( distr, sin0_cdf );
#	unur_distr_cont_set_pdf( distr, sin0_pdf );
#	unur_distr_cont_set_dpdf( distr, sin0_dpdf );
#	unur_distr_cont_set_domain( distr, -1., 0.5 );
#	cpoints[0]= -0.75;
#	cpoints[1]= -0.5;
#	cpoints[2]=  0.;
#	cpoints[3]=  0.25;
#	errorsum += pinv_error_experiment(distr,eu,order,samplesize,cpoints,4);
#	unur_distr_free(distr);
#	fprintf(TESTLOG,"\n");
 
  /* test finished */
  FAILED = (errorsum < 2) ? 0 : 1;


#############################################################################

[verbatim]

/*---------------------------------------------------------------------------*/
/* Example of  a distribution with f(x)=0 at x=-0.25 and x=0.75              */
/*                                                                           */
/*          /  (1 +sin(2 Pi x))/2  if |x| <= 1                               */
/*  f(x) = <                                                                 */
/*          \  0        otherwise                                            */
/*                                                                           */
double sin_pdf( double x, const UNUR_DISTR *distr ATTRIBUTE__UNUSED)
{
  if (fabs(x) > 1.)
    return 0.;
  else
    return (0.5*(1.+sin((2.*M_PI)*x)));
} /* end of sin_pdf() */

/* The derivative of the PDF of our distribution:                */
double sin_dpdf( double x, const UNUR_DISTR *distr ATTRIBUTE__UNUSED)
{
  if (fabs(x) > 1.)
    return 0.;
  else
    return (M_PI*cos((2.*M_PI)*x));
} /* end of sin_dpdf() */

/* The CDF of our distribution:                                  */
double sin_cdf( double x, const UNUR_DISTR *distr ATTRIBUTE__UNUSED)
{
  if (x < -1.)
    return 0.;
  else if(x<=1.)
    return (1.+2.*M_PI*(1+x)-cos((2.*M_PI)*x))/(4.*M_PI);
  else return 1.;
} /* end of sin_cdf() */

/*---------------------------------------------------------------------------*/

/* Example of  a distribution with f(x)=0 in (-0.5,0)                        */
/*                                                                           */
/*          /  Max(sin(2 Pi x)),0)Pi/2  if -1 < x <0.5                       */
/*  f(x) = <                                                                 */
/*          \  0        otherwise                                            */
/*                                                                           */
double sin0_pdf( double x, const UNUR_DISTR *distr ATTRIBUTE__UNUSED)
{
  if (x < -1.) return 0.;
  if (x <= -0.5) return sin((2.*M_PI)*x)*0.5*M_PI;
  if (x < 0.) return 0.;
  if (x <= 0.5) return sin((2.*M_PI)*x)*0.5*M_PI;
  return 0.;
} /* end of sin0_pdf() */

/* The derivative of the PDF of our distribution:                */
double sin0_dpdf( double x, const UNUR_DISTR *distr ATTRIBUTE__UNUSED)
{
  if (x < -1.) return 0.;
  if (x <= -0.5) return cos((2.*M_PI)*x)*M_PI*M_PI;
  if (x < 0.) return 0.;
  if (x <= 0.5) return cos((2.*M_PI)*x)*M_PI*M_PI;
  return 0.;
} /* end of sin0_dpdf() */

/* The CDF of our distribution:                                  */
double sin0_cdf( double x, const UNUR_DISTR *distr ATTRIBUTE__UNUSED)
{
  if (x < -1.) return 0.;
  if(x<= -0.5) return 0.25*(1-cos((2.*M_PI)*x));
  if (x < 0.) return 0.5;
  if (x <= 0.5) return 0.75-0.25*cos((2.*M_PI)*x);
  return 1.;
} /* end of sin0_cdf() */


#############################################################################
#
# routines for special tests
#
#############################################################################

/*****************************************************************************/
/* run unur_test_inverror for a particular generator object and print result */

int
pinv_error_gen_experiment( UNUR_GEN *gen,     /* generator object */
			   double uerror,     /* maximum u-error */
			   int order,         /* order of polynomial */
			   int samplesize )   /* sample size for error experiment */
     /* returns 0 if maxerror < uerror, errorcode otherwise */
{   
  int i, nfpar;
  const double *fpar;     
  const UNUR_DISTR *distr = unur_get_distr(gen);
  const char *genid = unur_get_genid(gen);
  int score;

  /* print data about distribution */
  fprintf(TESTLOG,"%s: %s distribution",genid,unur_distr_get_name(distr));
  nfpar = unur_distr_cont_get_pdfparams(distr,&fpar);
  if (nfpar) { 
     fprintf(TESTLOG," with parameters ");
     for(i=0;i<nfpar;i++) fprintf(TESTLOG," | %g",fpar[i]);
     fprintf(TESTLOG," |");
  }
  fprintf(TESTLOG,":\n");

  /* print chosen parameter for method PINV and for experiment */
  fprintf(TESTLOG,"%s:   setting: order = %d, u-error <= %g, samplesize = %d\n",
                  genid,order,uerror,samplesize);
  fprintf(TESTLOG,"%s:   \#intervals = %d\t\#PDF calls = %d\t(per interval = %d)\n", genid,
	unur_pinv_get_n_intervals(gen), get_counter_pdf(),
	(unur_pinv_get_n_intervals(gen)!=0) ?
	get_counter_pdf() / unur_pinv_get_n_intervals(gen) : -1 );

  /* run test */
  score = run_validate_inverror( TESTLOG, gen, distr, uerror, samplesize );

  /* return score */
  fprintf(TESTLOG,"\n");
  return score;

} /* end of pinv_error_gen_experiment() */

/*****************************************************************************/
/* run experiment for a particular distribution object                       */

int
pinv_error_experiment( UNUR_PAR *par,     /* parameter object */
		       int samplesize )   /* samplesize for error experiment */
     /* returns 0 if maxerror < uerror, errorcode otherwise */
{ 
  UNUR_PAR *par_clone;  /* working copy of parameter object */
  UNUR_GEN *gen;        /* generator object */

  int order = 3;
  double uerror = 1.e-8;  /* (maximal) u-error */
  int errorsum = 0;

  for ( uerror = 1.e-8; uerror > 2.e-13; uerror *= 0.1 ) {
     for ( order=3; order<12; order++) {   

       /* make a working copy */
       par_clone = _unur_par_clone(par);

       /* start counter for PDF calls */
       start_counter_pdf(par_clone);

       /* create generator object */
       unur_pinv_set_order(par_clone,order);
       unur_pinv_set_u_resolution(par_clone,uerror);
       set_debug_flag(par_clone);
       gen = unur_init(par_clone);

       /* run test */
       errorsum += pinv_error_gen_experiment(gen, uerror, order, samplesize);

       /* clear memory */
       unur_distr_free(unur_get_distr(gen));
       unur_free(gen);
     }
  }

  unur_par_free(par);

  return errorsum;
} /* end of pinv_error_experiment() */

/*****************************************************************************/
