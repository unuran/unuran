# $Id: t_mcorr.conf 3448 2007-02-15 21:15:05Z leydold $
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: MATRIX

[main - header:]

/* header files */
\#include<utils/matrix_source.h>
\#include<utils/vector_source.h>

/* function prototypes */
void _unur_test_set_matrix_1(int dim, double *M);
void _unur_test_set_matrix_2(int dim, double *M);
int _unur_test_matrix(int dim);

/* dimension of test matrix */
static const int dim_testmatrix = 50;

/* max tolerable absolute error */
static const double error_absolute_max = 1.e-12;

\#ifndef M_PI
\#define M_PI       3.14159265358979323846264338328      /* pi */
\#endif

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)


#############################################################################

[new]

#############################################################################

# [set]

#############################################################################

# [get]

#############################################################################

# [chg]

#############################################################################

# [init]

#############################################################################

# [reinit]

#############################################################################

# [sample]

#############################################################################

# [validate]

#############################################################################

[special]

[special - decl:]

[special - start:]

  printf("\nEigensystem");

  /* run tests */
  FAILED = _unur_test_matrix(dim_testmatrix);

#############################################################################

[verbatim]

void _unur_test_set_matrix_1(int dim, double *M) {
\#define idx1(a,b) ((a-1)*dim+(b-1))
  int i,j,k;
  double p;
  
  /* original derflinger test-matrix */
  p = M_PI/(dim+1);
  for (i=1; i<=dim; i++) {
  for (k=1; k<=i; k++) {
    M[idx1(i,k)]=0.;
    for (j=1; j<=dim; j++) {
      M[idx1(i,k)] += sin(p*i*j)*j*sin(p*j*k);
    }
    M[idx1(k,i)] = M[idx1(i,k)]; 
  }}

\#undef idx1
} /* end of _unur_test_set_matrix_1() */

/*-------------------------------------------------------------------------*/

void _unur_test_set_matrix_2(int dim, double *M) {
\#define idx1(a,b) ((a-1)*dim+(b-1))
  int i,j,k;

  /* another test-matrix */
  for (i=1; i<=dim; i++) {
  for (k=1; k<=i; k++) {
    M[idx1(i,k)]=0.;
    for (j=1; j<=dim; j++) {
      M[idx1(i,k)] = 1./(i+k);
    }
    M[idx1(k,i)] = M[idx1(i,k)]; 
  }}

\#undef idx1
} /* end of _unur_test_set_matrix_2() */

/*-------------------------------------------------------------------------*/

int _unur_test_matrix(int dim) {
\#define idx1(a,b) ((a-1)*dim+(b-1))

  int i, ret;

  double *M;
  double *values;
  double *vectors;

  double error_absolute; 
  double error_relative; 
 
  int error_counter = 0;
  char error_char;

  /* allocate memory */
  M = malloc(dim*dim*sizeof(double));
  values = malloc(dim*sizeof(double));
  vectors = malloc(dim*dim*sizeof(double));

  _unur_test_set_matrix_1(dim, M);
  
  error_counter = 0;
  ret = _unur_matrix_eigensystem(dim, M, values, vectors);
  if (ret == UNUR_SUCCESS) {
    fprintf(TESTLOG, " \#   \t   Eigenvalue \t\t   Expected \t\t Abs. Error \t Rel. Error\n"); 
    for (i=0; i<dim; i++) {
      error_absolute = 2.*values[i]/(dim+1) - (i+1) ;  
      error_relative = error_absolute / (i+1.);

      if (error_absolute > error_absolute_max) { 
        /* eigenvalue is not ok */
        error_char = '*';
        error_counter++;
      }
      else
      {
        /* eigenvalue is ok */
        error_char = ' ';
      }

      fprintf(TESTLOG, "%02d : \t%18.15f   \t%18.15f  \t% 8.4e \t% 8.4e  %c\n", 
              i+1,  
              2.*values[i]/(dim+1),  
              (double) (i+1) , 
              error_absolute,
	      error_relative,
	      error_char);
    }
    if (error_counter!=0)
       printf(" failed at %d eigenvalues", error_counter);
  }
  else {
    ++error_counter;
    printf(": init");
  }

  /* free memory */
  free(M); 
  free(values);
  free(vectors);

  /* return number of errors */
  return error_counter;

\#undef idx1
} /* end of _unur_test_matrix() */

#############################################################################
