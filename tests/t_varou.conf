# 
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: VAROU

[main - header:]

\#include <experimental/varou.h>

/* prototypes */

int unur_varou_set_pedantic( UNUR_PAR *par, int pedantic );

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)
\#define CORR (0.1)

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
        --> expected_NULL --> UNUR_ERR_NULL


[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
         --> expected_NULL --> UNUR_ERR_DISTR_INVALID


#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_verify( par, 1);
	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_verify( par, 1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

unur_par_free(par);

[set - invalid parameters:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_varou_new(distr); ]

#~_cones( par, -1. );
#	--> expected_setfailed --> UNUR_ERR_PAR_SET

#~_cones( par, 0. );
#	--> expected_setfailed --> UNUR_ERR_PAR_SET

unur_par_free(par);


#############################################################################

[get]

#############################################################################

[chg]

[chg - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_arou_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_verify(gen,1);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID


#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare clone:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   UNUR_GEN *clone;
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_varou_new(distr);
   unur_varou_set_cones(par,200);
   gen = unur_init( par ); <-- ! NULL ]

/* normal distribution */
	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
	-->compare_cvec_sequence_gen


#############################################################################

[validate]

[validate - generators:]

# default program
par[0] = unur_varou_new(@distr@);

# cones = 200
par[1] = unur_varou_new(@distr@);
unur_varou_set_cones(par,200);

# cones = 2000
par[2] = unur_varou_new(@distr@);
unur_varou_set_cones(par,2000);


[validate - distributions:]

# standard multinormal distribution
distr[0] = unur_distr_multinormal(3,NULL,NULL);


# multinormal distribution, dim = 3 
double mean[]  = { 1., 2., 3. };
double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
distr[1] = unur_distr_multinormal(3,mean,covar);


# random multinormal distribution
\#define dim (2)
int i;
int j;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   for (i=0; i<dim; i++)
   for (j=i; j<dim; j++){
     covar[i+j*dim] = (i==j) ? 1: CORR;
     covar[j+i*dim] = covar[i+j*dim];}
   distr[2] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[2]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# random multinormal distribution
\#define dim (3)
int i;
int j;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   for (i=0; i<dim; i++)
   for (j=i; j<dim; j++){
     covar[i+j*dim] = (i==j) ? 1: CORR;
     covar[j+i*dim] = covar[i+j*dim];}
   distr[3] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[3]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# random multinormal distribution
\#define dim (4)
int i;
int j;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   for (i=0; i<dim; i++)
   for (j=i; j<dim; j++){
     covar[i+j*dim] = (i==j) ? 1: CORR;
     covar[j+i*dim] = covar[i+j*dim];}
   distr[4] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[4]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# random multinormal distribution
\#define dim (5)
int i;
int j;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   for (i=0; i<dim; i++)
   for (j=i; j<dim; j++){
     covar[i+j*dim] = (i==j) ? 1: CORR;
     covar[j+i*dim] = covar[i+j*dim];}
   distr[5] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[5]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# random multinormal distribution
\#define dim (6)
int i;
int j;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   for (i=0; i<dim; i++)
   for (j=i; j<dim; j++){
     covar[i+j*dim] = (i==j) ? 1: CORR;
     covar[j+i*dim] = covar[i+j*dim];}
   distr[6] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[6]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# number of distributions: 7

[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0] ... default variant
#  [1] ... 
#  [2] ... 
#
#gen    0  1  2  	# distribution
#---------------------------------------------
<0>	.  .  .	 	# standard multinormal (dim=3)
<1>	.  .  .	 	# multinormal (dim=3)
<2>	.  +  .	 	# random multinormal (dim=2)
<3>	.  +  .	 	# random multinormal (dim=3)
<4>	.  +  .	 	# random multinormal (dim=4)
<5>     .  .  .	 	# random multinormal (dim=5)
<6>     .  .  .	 	# random multinormal (dim=6)

[validate - verify hat:]

#  + ... pass test
#  ~ ... fail in at most 1% of samples
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0] ... default variant
#  [1] ... 
#  [2] ... 
#
#gen    0  1  2	 	# distribution
#---------------------------------------------
<0>     .  .  . 	# standard multinormal (dim=3)
<1>	.  .  .	 	# multinormal (dim=3)
<2>	.  .  .	 	# random multinormal (dim=2)
<3>	.  .  .	 	# random multinormal (dim=3)
<4>	.  .  .	 	# random multinormal (dim=4)
<5>	.  .  .	 	# random multinormal (dim=5)
<6>     .  .  .	 	# random multinormal (dim=6)


#############################################################################
#############################################################################

[verbatim]

/* dummy function */
int unur_varou_set_pedantic( UNUR_PAR *par, int pedantic )
{ return 1; }

#############################################################################
