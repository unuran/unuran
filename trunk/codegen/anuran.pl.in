#!/usr/bin/perl
# ----------------------------------------------------------------
# CGI script for code generator
# ----------------------------------------------------------------
# $Id$
# ----------------------------------------------------------------

use strict;

# ################################################################
#
# Configuration
#

# ----------------------------------------------------------------
# location of log file

my $ANURAN_log = "/home/staff/leydold/public_html/anuran.log";

# ----------------------------------------------------------------
# number of frogs

my $n_frogs = 12;

# ----------------------------------------------------------------
# URLs ...

# my $URL_root   = "http://statistik.wu-wien.ac.at";
my $URL_root   = "";

my $URL_arvag  = "$URL_root/arvag";
my $URL_anuran = "$URL_root/anuran";

# ----------------------------------------------------------------
# ACG Command

my $ACG = "./acg";

# ----------------------------------------------------------------
# Gray Color for disabled text

my $Gray = "#C0C0C0";

# ################################################################

# ----------------------------------------------------------------
# Load packages

use CGI qw/:standard -nosticky *blockquote *font/;
use CGI::Pretty;

# ----------------------------------------------------------------
# Data

my %labels_menue_distrtypes = 
    ( "cstd" => "Continuous standard distribution",
      "cpdf" => "Continuous distribution with given PDF",
      );

my @menue_distrtypes = sort keys %labels_menue_distrtypes;

# ----------------------------------------------------------------
# Data for distributions

my %labels_menue_cstd_distributions = (

=INPUT labels_menue_cstd_distributions

);

my @menue_cstd_distributions = sort keys %labels_menue_cstd_distributions;

my %data_distr = (

=INPUT data_distributions

);

# ----------------------------------------------------------------
# abbreviations

my $sp = '&nbsp;&nbsp;&nbsp;';

# ----------------------------------------------------------------
# Create CGI object

my $q = new CGI;

# ----------------------------------------------------------------
# Step number

my $step = $q->param('Step');
$q->delete('Step');

# ----------------------------------------------------------------
# Need of help
my $help = $q->param('Help');
$q->delete('Help');

# ----------------------------------------------------------------
# Reset interface if requested

if ($q->param('Restart')) {
    # clear all data
    $step = 1;
    $q->delete_all();
}

# ----------------------------------------------------------------
# Get some data from query

# selected distribution
my $distrtype = $q->param('DistrType');
my $distr     = $q->param('Distribution');
my $distrname = $q->param('Name');
my $Stdform   = $q->param('Stdform');
my $Truncated = $q->param('Truncated');
my $PDF       = $q->param('PDF');

# we have to take care that no dangerous characters are used
$PDF =~ s/[^\w\d\.\(\)\,\-\+\*\/\^\<\>\=\!]//g;

# set some defaults
unless ($distrname) {
    $distrname = $data_distr{$distr}{'=NAME'};
    $q->param('Name',$distrname);
}

# read some data for selected distribution
my $n_req     = $data_distr{$distr}{'=N_REQ'};
my $n_tot     = $data_distr{$distr}{'=N_TOT'};
my $n_params  = ($Stdform eq 'yes') ? $n_req : $n_tot;

# ----------------------------------------------------------------
# We need a frog

my $frog = ($q->param('Frog') && $step > 1) ? $q->param('Frog') : sprintf("%02d",int(rand $n_frogs) + 1);

my $img_frog = 
    "$sp <img SRC='$URL_anuran/frogs/frog$frog.jpg' ALIGN = top> $sp";

# ----------------------------------------------------------------

anuran_start();
if ($help) {
    anuran_help();
}
else {
    anuran_type_distribution();
    anuran_select_distribution();
    anuran_params_distribution();
    anuran_properties_generator();
    anuran_code();
}
anuran_end();

# ----------------------------------------------------------------
exit 0;
# ----------------------------------------------------------------

##################################################################
#                                                                #
# Subroutines                                                    #
#                                                                #
##################################################################

# ----------------------------------------------------------------
# Start of HTML page
# ----------------------------------------------------------------

sub anuran_start
{
    my $title;
	
    # HTTP header
    if ($help) {
	$title  = '/ Help';
##	print $q->header(-target=>'Help');
    }
##    else {
##    print $q->header(-target=>'Code');
##    }
    print $q->header();

    # HTML header and title
    print
	$q->start_html(-title  =>"ANURAN Automatic Code Generator $title",
		       -author =>'anuran@statistik.wu-wien.ac.at',
		       -meta   =>{'keywords'=>'nonuniform random number generator,
                                               automatic code generator',
				  'copyright'=>'copyright (C) 2001 Josef.Leydold@statistik.wu-wien.ac.at'},
		       -BGCOLOR=>'#FFFFF5',
		       -TEXT   =>'#000000',
		       -LINK   =>'#000000',
		       -VLINK  =>'#000000',
		       -ALINK  =>'#000000',
		       -MARGINWIDTH =>'5',
		       -MARGINHEIGHT=>'5',
		       -LEFTMARGIN  =>'5',
		       -TOPMARGIN   =>'5');
    
    # Make anuran heading and bar with links
    print anuran_heading();
    
    # Heading
    if ($help) {
	print
	    h1('Automatic Code Generator / Help');
    }
    else {
	print
	    h1('Automatic Code Generator'),
	    h2('Experimental version'),
	    b('Resulting code is reliable but should used with care!<BR>
	   This code generator cannot produce generators for all distributions / parameters.');
    }

    # ruler
    print p().hr().p(),"\n";

} # end of anuran_start()


# ----------------------------------------------------------------
# Anuran heading and bar with links
# ----------------------------------------------------------------

sub anuran_heading {

    my $heading =
	"<TABLE BORDER='0' CELLSPACING='1'>
           <TR>
	   <TD ALIGN=LEFT><IMG SRC='$URL_arvag/images/logo_arvag_40.png' ALT='' ALIGN=LEFT>
	     <TD ALIGN=LEFT> $sp
             <FONT FACE='Arial, Helvetica, sans-serif' SIZE='4' COLOR='#1E426E'>
	     ANURAN - Automatic Non-Uniform RANdom number generators
	     </FONT></TD></TR></TABLE>\n";

    my $link_list =
	"<TABLE WIDTH='100%' BORDER='0' CELLSPACING='2'>
	   <TR> 
           <TD WIDTH='17%' BGCOLOR='#1E426E'> 
             <A HREF='$URL_anuran/index.html'>
             <DIV ALIGN='CENTER'>
             <FONT FACE='Arial, Helvetica, sans-serif' SIZE='2' COLOR='#FFFFFF'>
             <B>ANURAN</B></FONT></A></DIV></TD>
           <TD WIDTH='17%' BGCOLOR='#BCD2EE'> 
             <DIV ALIGN='CENTER'>
             <FONT FACE='Arial, Helvetica, sans-serif' SIZE='2' COLOR='#1E426E'>
             <B>Code Generator</B></FONT></DIV></TD>
           <TD WIDTH='17%' BGCOLOR='#1E426E'> 
             <DIV ALIGN='CENTER'>
             <A HREF='$URL_anuran/project.html'>
             <FONT FACE='Arial, Helvetica, sans-serif' SIZE='2' COLOR='#FFFFFF'>
             <B>Project</B></FONT></A></DIV></TD>
           <TD WIDTH='17%' BGCOLOR='#1E426E'> 
             <DIV ALIGN='CENTER'>
             <A HREF='$URL_arvag/software.html'>
             <FONT FACE='Arial, Helvetica, sans-serif' SIZE='2' COLOR='#FFFFFF'>
             <B>Other Software</B></FONT></A></DIV></TD>
           <TD WIDTH='17%' BGCOLOR='#1E426E'> 
             <DIV ALIGN='CENTER'>
             <A HREF='$URL_arvag/index.html'>
             <FONT FACE='Arial, Helvetica, sans-serif' SIZE='2' COLOR='#FFFFFF'>
             <B>ARVAG</B></FONT></A></DIV></TD>
           <TD WIDTH='17%' BGCOLOR='#1E426E'> 
             <DIV ALIGN='CENTER'>
             <A HREF='mailto:anuran\@statistik.wu-wien.ac.at'>
             <FONT FACE='Arial, Helvetica, sans-serif' SIZE='2' COLOR='#FFFFFF'>
             <B>Feedback</B></FONT></A></DIV></TD>
           <TD WIDTH='1%'>&nbsp;</TD></TR></TABLE>\n";

    # return HTML code
    return $heading.$link_list;

} # end of anuran_heading()


# ----------------------------------------------------------------
# End of HTML page
# ----------------------------------------------------------------

sub anuran_end
{
    print 
	
	# HTML page closing
	end_html();

} # end of anuran_end()


# ----------------------------------------------------------------
# Submit and Reset Button
# ----------------------------------------------------------------

sub anuran_submit
{
    my $next_step = $_[0];
    my $hidden_param;

    if ($step > 1) {
	$hidden_param .= $q->hidden('DistrType');
    }
    if ($step > 2) {
	$hidden_param .= $q->hidden('Distribution');
	$hidden_param .= $q->hidden('Name');
	$hidden_param .= $q->hidden('Stdform');
	$hidden_param .= $q->hidden('Truncated');
	$hidden_param .= $q->hidden('PDF');
    }
    if ($step > 3) {
	for (my $i=0; $i < $n_tot; $i++) {
	    $hidden_param .= $q->hidden("Param_$i");
	}
	$hidden_param .= $q->hidden('Left');
	$hidden_param .= $q->hidden('Right');
    }
    if ($step > 4) {
	$hidden_param .= $q->hidden('Language');
	$hidden_param .= $q->hidden('Speed');
	$hidden_param .= $q->hidden('Codelength');
	$hidden_param .= $q->hidden('Codetype');
    }
    
    return 
	$hidden_param,

	$q->hidden('Frog',$frog),
	$q->hidden('Step',$next_step),

	$q->submit('Continue'),
	$img_frog,
	$q->submit('Restart'),
	$q->submit('Help');
	
} # end of anuran_submit()


# ----------------------------------------------------------------
# Step 1: Type of distribution
# ----------------------------------------------------------------

sub anuran_type_distribution
{

# ................................................................
# CASE: select a distribution type
# ................................................................
    if ($step <=1) { 
	print
	    '<a name="step1">Step 1:</a> ',
	    b('Type of Distribution'),
	    blockquote( $q->startform (-method => 'GET',
				       -action => $q->url()),
			$q->popup_menu(-name   => 'DistrType',
				       -values => \@menue_distrtypes,
				       -default=> 'cstd',
				       -labels => \%labels_menue_distrtypes),
			$sp,
			anuran_submit('2'),
			$q->endform() ),
	    p().hr().p();
	return;
    }

# ................................................................
# CASE: distribution type selected
# ................................................................
    if ($step > 1) {
	print
	    '<a name="step1">Step 1:</a> ',
	    b('Type of Distribution'),
	    blockquote($labels_menue_distrtypes{$distrtype}),
	    p().hr().p();
	return;
    }

} # end of anuran_type_distribution()


# ----------------------------------------------------------------
# Step 2: Select a distribution
# ----------------------------------------------------------------

sub anuran_select_distribution
{

# ................................................................
# CASE: wait till distribution can be selected
# ................................................................
    if ($step < 2) {
	print
	    font({-color=>$Gray},'<a name="step2">Step 2:</a> '.b('Distribution')),
	    p().hr().p();
	return;
    }

# ................................................................
# CASE: select a distribution
# ................................................................
    if ($distrtype eq 'cstd') { anuran_select_cstd(); return; } 
    if ($distrtype eq 'cpdf') { anuran_select_cpdf(); return; } 

    # error use default
    anuran_select_cstd(); return;

} # end of anuran_select_distribution()


# ----------------------------------------------------------------
# Step 2a: Select a continuous standard distribution
# ----------------------------------------------------------------

sub anuran_select_cstd
{
# ................................................................
# CASE: select a distribution
# ................................................................
    if ($step <= 2) {
	print
	    '<a name="step2">Step 2:</a> ',
	    b('Distribution'),
	    blockquote(	$q->startform (-method => 'GET',
				       -action => $q->url()),
			$q->popup_menu(-name   => 'Distribution',
				       -values => \@menue_cstd_distributions,
				       -default=> 'normal',
				       -labels => \%labels_menue_cstd_distributions),
			p(),
			$q->checkbox  (-name   => 'Stdform',
				       -checked=> 'true',
				       -value  => 'yes',
				       -label  => ' Use standard form'),
			p(),
			$q->checkbox  (-name   => 'Truncated',
				       -value  => 'yes',
				       -label  => ' Truncated domain'),
			p(),
			anuran_submit('3'),
			$q->endform() ),
	    p().hr().p();
	return;
    }
 
# ................................................................
# CASE: distribution selected
# ................................................................
    if ($step > 2) {
	print
	    '<a name="step2">Step 2:</a/> ',
	    b($distrname),
	    blockquote( 'PDF(x) = [const] * ',
			$data_distr{$distr}{'=PDF'} ),
	    p().hr().p();
	return;
    }

} # end of anuran_select_cstd()


# ----------------------------------------------------------------
# Step 2b: Select a continuous distribution with given PDF
# ----------------------------------------------------------------

sub anuran_select_cpdf
{
    # check input
    my $error_PDF;
    unless ($step <= 2 or $PDF) {
	$step = 2;
	$error_PDF = $sp.anuran_error('missing');
    }

# ................................................................
# CASE: select a distribution
# ................................................................
    if ($step <= 2) {
	$q->param('Name',$data_distr{'cont'}{'=NAME'}) unless $distrname;

	print
	    '<a name="step2">Step 2:</a> ',
	    b('Distribution with given Density'),
	    blockquote(	$q->startform (-method => 'GET',
				       -action => $q->url()),
			"Name = $sp",
			$q->textfield(-name     => 'Name',
				      -size     => 50,
				      -maxlength=> 100),
			p(),
			"Density = $sp",
			$q->textfield(-name     => 'PDF',
				      -size     => 50,
				      -maxlength=> 200),
			$error_PDF,
			p(),
			$q->hidden('Distribution','cont'),
			$q->hidden('Truncated','yes'),
			anuran_submit('3'),
			$q->endform() ),
	    p().hr().p();
	return;
    }

# ................................................................
# CASE: distribution selected
# ................................................................
    if ($step > 2) {
	print
	    '<a name="step2">Step 2:</a> ',
	    b($distrname),
	    blockquote( "PDF = $PDF" ),
	    p().hr().p();
	return;
    }
 
 
} # end of anuran_select_cpdf()


# ----------------------------------------------------------------
# Step 3: Parameters of distribution
# ----------------------------------------------------------------

sub anuran_params_distribution
{

# ................................................................
# CASE: wait till parameters of the distribution can be entered
# ................................................................
    if ($step < 3) {
	print
	    font({-color=>$Gray},'<a name="step3">Step 3:</a> '.b('Parameters for distribution')),
	    p().hr().p();
	return;
    }

# ................................................................

    # Store ids of parameters
    my %param_by_name;
    for (my $i=0; $i < $n_tot; $i++) {
	$param_by_name{$data_distr{$distr}{'=FPARAMS'}[$i]{'=NAME'}} = $i;
    }

    # mark errors
    my $invalid_params = 0;
    my @error_param;

# ................................................................
# Compute domain
# ................................................................

    # Compute standard domain
    my $std_left = $data_distr{$distr}{'=LEFT'};
    if ( $std_left !~ /\d+/ and $std_left ne '-infinity') {
	$std_left = $q->param('Param_'.$param_by_name{$data_distr{$distr}{'=LEFT'}});
    }
    my $std_right = $data_distr{$distr}{'=RIGHT'};
    if ( $std_right !~ /\d+/ and $std_right ne 'infinity') {
	my $i = $param_by_name{$data_distr{$distr}{'=RIGHT'}};
	$std_right = $q->param("Param_$i");
	unless (defined $std_right) {
	    $std_right = $data_distr{$distr}{'=FPARAMS'}[$i]{'=DEF'};
	}
    }

    # Read domain
    if (!defined($q->param('Left')) or $q->param('Left') < $std_left) {
	$q->param('Left',$std_left);
    }
    if (!defined($q->param('Right')) or $q->param('Right') > $std_right) {
	$q->param('Right',$std_right);
    }
    # Transform string into number
    $q->param('Left', $q->param('Left')+0);
    $q->param('Right',$q->param('Right')+0);

# ................................................................
# CASE: distribution selected and Parameters given
# ................................................................
    if ($step > 3) {
	# ........................................................
	# Parameters

	my $params_show;

	# Read parameters for distribution
	for (my $i=0; $i < $n_tot; $i++) {

	    my $param = $q->param("Param_$i");

	    # check input for empty entries
	    unless ($param =~ /\d+/) {
		$invalid_params = 1;
		$error_param[$i] = $sp.anuran_error('missing');
		next;
	    }

	    # check validity of parameters
	    my $lower = $data_distr{$distr}{'=FPARAMS'}[$i]{'=LOWER'};
	    if ( defined $lower and 
		 ( ($lower =~ /\d+/ and $lower > $param) or 
		   ($lower !~ /\d+/ and $q->param("Param_".$param_by_name{$lower}) > $param) ) ) {
		$invalid_params = 1;
		$error_param[$i] = $sp.anuran_error('invalid');
	    }
	    my $upper = $data_distr{$distr}{'=FPARAMS'}[$i]{'=UPPER'};
	    if ( defined $upper and 
		 ( ($upper =~ /\d+/ and $upper < $param) or 
		   ($upper !~ /\d+/ and $q->param("Param_".$param_by_name{$upper}) < $param) ) ) {
		$invalid_params = 1;
		$error_param[$i] = $sp.anuran_error('invalid');
	    }

	    # transform string to number
	    $q->param("Param_$i",$param+0);
	}

	# print parameters into web page
	for (my $i=0; $i < $n_params; $i++) {
	    $params_show .=
		( $data_distr{$distr}{'=FPARAMS'}[$i]{'=NAME'}.
		  ' = '.
		  $q->param("Param_$i").$sp );
	}
	if ($n_tot > $n_params) {
	    $params_show .=
		    start_font({-color=>$Gray}).'('.$sp;
	    for (my $i=$n_params; $i < $n_tot; $i++) {
		$params_show .=
		    ( $data_distr{$distr}{'=FPARAMS'}[$i]{'=NAME'}.
		      ' = '.
		      $q->param("Param_$i").$sp );
	    }
	    $params_show .= ')'.end_font();
	}

	# ........................................................
	# Domain

	# show domain
	my $domain_show = 'Domain = [ '.$q->param('Left').', '.$q->param('Right').' ]';
	if ($Truncated and $distrtype ne 'cpdf') {
	    $domain_show .= $sp.'(truncated)';
	}

	# check domain
	if ($q->param('Left') > $q->param('Right')) {
	    $invalid_params = 1;
	}

	# ........................................................
	# Print data
	unless ($invalid_params) {
	    print 
		'<a name="step3">Step 3:</a> ',
		b("Parameters for $distrname"),
		blockquote( $params_show,p(),
			    $domain_show,p() ),
		p().hr().p();
	    return;
	}
	else {
	    # there has been an error --> do step 3 again
	    $step = 3;
	}
    }

# ................................................................
# CASE: enter parameters for selected distribution
# ................................................................

    if ($step == 3) {
	# ........................................................
	# Parameters

	# List of required parameters
	my $params_req;
	for (my $i = 0; $i < $n_req; $i++) {
	    $params_req .=
		( $data_distr{$distr}{'=FPARAMS'}[$i]{'=NAME'}.
		  ' = '.
		  $q->textfield(-name     => "Param_$i",
				-size     => 10,
				-maxlength=> 10) );
	    if ($data_distr{$distr}{'=FPARAMS'}[$i]{'=COND'}) {
		$params_req .= "$sp ($data_distr{$distr}{'=FPARAMS'}[$i]{'=COND'})";
	    }
	    $params_req .= $error_param[$i].br();
	}
	
	# List of optional parameters (for non-standard form)
	my $params_opt;
	for (my $i = $n_req; $i < $n_tot; $i++) {
	    $params_opt .=
		( $data_distr{$distr}{'=FPARAMS'}[$i]{'=NAME'}.
		  ' = '.
		  $q->textfield(-name     => "Param_$i",
				-value    => $data_distr{$distr}{'=FPARAMS'}[$i]{'=DEF'},
				-size     => 10,
				-maxlength=> 10) );
	    if ($data_distr{$distr}{'=FPARAMS'}[$i]{'=COND'}) {
		$params_opt .= "$sp ($data_distr{$distr}{'=FPARAMS'}[$i]{'=COND'})";
	    }
	    $params_opt .= $error_param[$i].br();
	}
	
	# List of defaults for optional parameters (for standard form)
	my $params_def;
	if ($n_tot > $n_req) {
	    $params_def .= start_font({-color=>$Gray}).'('.$sp;
	    for (my $i = $n_req; $i < $n_tot; $i++) {
		$params_def .=
		    ( $q->hidden(-name  => "Param_$i",
				 -value => $data_distr{$distr}{'=FPARAMS'}[$i]{'=DEF'}).
		      $data_distr{$distr}{'=FPARAMS'}[$i]{'=NAME'}.
		      ' = '.
		      $data_distr{$distr}{'=FPARAMS'}[$i]{'=DEF'}.$sp );
	    }
	    $params_def .= ')'.end_font();
	}

	# show list of parameters
	my $params_show = $params_req . (($Stdform eq 'yes') ? p().$params_def : $params_opt);

	# ........................................................
	# Domain

	my $domain_show;
	if ($Truncated eq 'yes') {
	    # enter domain
	    $domain_show = 
		b( 'Domain = ['.$sp.
		   $q->textfield(-name     => 'Left',
				 -size     => 10,
				 -maxlength=> 10).
		   $sp.','.$sp.
		   $q->textfield(-name     => 'Right',
				 -size     => 10,
				 -maxlength=> 10).
		   $sp.']');

	    # check domain
	    if ($q->param('Left') > $q->param('Right')) {
		$domain_show .= 
		    $sp.anuran_error('domain invalid (left > right)');
	    }
	}
	else {
	    # show domain
	    $domain_show = 
		( 'Domain = [ '.$q->param('Left').', '.$q->param('Right').' ]'.
		  $q->hidden('Left').
		  $q->hidden('Right') );
	}

	# Make form
	print 
	    '<a name="step3">Step 3:</a> ',
	    b("Parameters for $distrname"),
	    blockquote( startform (-method => 'GET',
				   -action => $q->url()),
			$params_show,p(),
			$domain_show,p(),
			anuran_submit('4'),
			$q->endform(), ),
	    p().hr().p();
	return;
    }

} # end of anuran_select_distribution()


# ----------------------------------------------------------------
# Step 4: Properties of generator
# ----------------------------------------------------------------

sub anuran_properties_generator
{
# ................................................................
# CASE: wait till you are asked
# ................................................................
    if ($step < 4) {
	print
	    font({-color=>$Gray},'<a name="step4">Step 4:</a> '.b('Properties of generator')),
	    p().hr().p();
	return;
    }

# ................................................................
# CASE: enter properties
# ................................................................
    if ($step == 4) {
	print 
	    '<a name="step4">Step 4:</a> ',
	    b("Properties of generator for $distrname"),
	    blockquote( startform(-method => 'GET',
				  -action => $q->url()."#step3" ),
			b('Programming language: '),
			$q->popup_menu(-name  => 'Language',
				       -values=> ['C','FORTRAN','JAVA']),
			p(),
			b('Speed: '),
			$q->radio_group(-name   => 'Speed',
					-values => ['fast','moderate','slow','don\'t care'],
					-default=> 'moderate',
					-rows   => 1,
					-columns=> 4,
					-labels => {'fast'      => ' fast ',
						    'moderate'  => ' moderate ',
						    'slow'      => ' slow ',
						    'don\'t care' => ' don\'t care '}),
			p(),
			b('Code length: '),
			$q->radio_group(-name   => 'Codelength',
					-values => ['short','moderate','long','don\'t care'],
					-default=> 'moderate',
					-rows   => 1,
					-columns=> 4,
					-labels => {'short' => ' short ',
						    'moderate' => ' moderate ',
						    'long' => ' long ',
						    'don\'t care' => ' don\'t care '}),
			p(),
			$q->radio_group(-name   => 'Codetype',
					-values => ['generator','demo'],
					-default=> 'generator',
					-rows   => 2,
					-columns=> 1,
					-labels => {'generator'=>' Generator only',
						    'demo'=>' Make complete demo version'}),
			p(),
			anuran_submit('5'),
			$q->endform(), ),
	    p().hr().p();
	return;
    }

# ................................................................
# CASE: properties set
# ................................................................
    if ($step > 4) {
	print
	    '<a name="step4">Step 4:</a> ',
	    b("Properties of generator for $distrname"),
	    blockquote( 'Programming language: '.$q->param('Language').
			p().
			'Speed: '.$q->param('Speed').
			p().
			'Code length: '.$q->param('Codelength').
			p().
			( ($q->param('Codetype') eq 'demo')
			  ? 'Make demo version'
			  : 'Make generator only' ) ),
	    p().hr().p();
	return;
    }

} # end of anuran_properties_generator()


# ----------------------------------------------------------------
# Step 5: Finally the code
# ----------------------------------------------------------------

sub anuran_code
{
# ................................................................
# CASE: wait till code can be printed
# ................................................................
    if ($step < 5) {
	print
	    font({-color=>$Gray},'<a name="step5">Step 5:</a> '.b('Generator code for distribution')),
	    p().hr().p();
	return;
    }

# ................................................................
# CASE: print generator code
# ................................................................
    if ($step == 5) {

# ................................................................
# Make ACG command
# ................................................................

	# check also for valid entries before executing shell
	my $command_ok = 1;

	# distribution string
	my $distr_str;
	
	# Distribution
	$command_ok = 0 if $distr =~ /[^a-zA-Z]/;
	$distr_str .= $distr;

	# List of parameters
	if ($n_params) {
	    $distr_str .= '(';
	    for (my $i=0; $i < $n_params; $i++) {
		my $param = $q->param("Param_$i");
		$command_ok = 0 if $param =~ /[^\d\.\-\+eE]/;
		$distr_str .= (($i)?', ':'').$param;
	    }
	    $distr_str .= ')';
	}

	# Domain
	if ($Truncated) {
	    $command_ok = 0 if $q->param('Left')  =~ /[^\d\.\-\+eEiInNfF]/;
	    $command_ok = 0 if $q->param('Right') =~ /[^\d\.\-\+eEiInNfF]/;
	    $distr_str .= '; domain=('.$q->param('Left').','.$q->param('Right').')';
	}

	# User defined distribution
	if ($PDF) {
	    $command_ok = 0 if $PDF =~ /[^a-zA-Z\d\.\(\)\*\/\+\-\=\!<>\^]/;
	    $distr_str .= "; pdf=\\\"$PDF\\\"";
	}

	# Programming language
	$command_ok = 0 if $q->param('Language') =~ /[^a-zA-Z]/;
	my $gen_opts = ' -l '.$q->param('Language');

	# Make complete demo version ?
	$gen_opts .= ' -M' if $q->param('Codetype') eq 'demo';

	# insert name
	if ($q->param('Name')) {
	    my $name = $q->param('Name');
	    $name =~ s/distribution//i;     # remove string "distribution"
	    $name =~ s/\s//g;               # remove white space
	    $name =~ s/\(.*$//;             # cut after first parenthesis
	    $name =~ s/[^\w\d]/_/g;         # remove all non alphanumeric characters
	    $gen_opts .= " -N $name";
	}

	# Method
	my $method = anuran_get_method();

	# generator string
	my $gen = "\"$distr_str & $method\"";

# ................................................................
# Execute ACG command and print result
# ................................................................

	print 
	    '<a name="step5">Step 5</a> ',
	    b("Generator for $distrname"),
	    ($q->param('Codetype') eq 'demo') ? ' (Complete demo version)' : '' ,
	    blockquote( $q->startform (-method => 'GET',
				       -action => $q->url()),
			$img_frog,
			$q->submit('Restart'),
			$q->endform() ),
	    p();

	# first check command line
	my $status;

	unless ($command_ok) {
	    # the composed command line might execute unsecure code
	    $status = "dangerous command, not executed";
	    print
		font({-color=>'red'},
		     b("Sorry. Cannot make generator. Internal error.")),
	    p().hr().p();
	    return;
	}

	# print result
	my $ACG_query = "$ACG $gen_opts $gen";
	my $ACG_result = `$ACG_query`;
	$ACG_result =~ s/\</\&lt;/g;
	$ACG_result =~ s/\</\&lt;/g;
	print "<PRE>\n".$ACG_result."\n</PRE>\n";

	# get exit code of ACG call 
	if ($?) {
	    # error
	    $status = "failed"; 
	    print 
		font({-color=>'red'},
		     b("Sorry. Cannot make generator for given distribution / parameters.")),
		p();
	}
	else {
	    # successfull
	    $status = "ok"; 
	}

# ................................................................
# Make Entry into log file
# ................................................................

	my $log;

	# date
	$log .= "date = ".(scalar localtime)."\n";

	# client
        $log .= "client = ".remote_host()."  (".remote_addr().")\n";

	# name of distribution
	$log .= "distribution = $distr";

	if ($PDF) {
	    $log .= ": pdf = \"$PDF\"";
	}
	$log .= "\n";

	# list of parameters (defaults settings start with '[ '
	for (my $i=0; $i < $n_tot; $i++) {
	    $log .= 
		( (($i >= $n_params) ? ' [ ' : '').
		  "param[$i] = ".
		  $data_distr{$distr}{'=FPARAMS'}[$i]{'=NAME'}.
		  " = " .
		  $q->param("Param_$i").
		  "\n" );
	}
	# Domain
	$log .= 'domain = [ '.$q->param('Left').', '.$q->param('Right')." ]\n";
	# Programming language
	$log .= 'language = '.$q->param('Language')."\n";
	# Code Properties
	$log .= 'speed = '.$q->param('Speed')."\n";
	$log .= 'code length = '.$q->param('Codelength')."\n";
	# ACG code
	$log .= "command = $ACG_query\n";
	# Exit code
	$log .= "status = $status\n";
	# Use blank line as separator
	$log .= "\n";

	# Write into log file
	# (This is not save !!)
	open LOG, ">>$ANURAN_log";
	print LOG $log;
	close LOG;

	return;
    }

} # end of anuran_code()


# ----------------------------------------------------------------
# Get method for generator
# ----------------------------------------------------------------

sub anuran_get_method
{
    # desired properties of generator
    my $speed = $q->param('Speed');
    my $length = $q->param('Codelength');

    # methods
    my %method;

    $method{'fast'}       {'short'}      = 'tdr; cpoints=10; max_sqhratio=0.90; usedars=on';
    $method{'fast'}       {'moderate'}   = 'tdr; cpoints=10; max_sqhratio=0.95; usedars=on';
    $method{'fast'}       {'long'}       = 'tdr; cpoints=10; max_sqhratio=0.99; usedars=on';
    $method{'fast'}       {'don\'t care'}= 'tdr; cpoints=10; max_sqhratio=0.99; usedars=on';

    $method{'moderate'}   {'short'}      = 'tdr; cpoints=10; max_sqhratio=0.80; usedars=on';
    $method{'moderate'}   {'moderate'}   = 'tdr; cpoints=10; max_sqhratio=0.90; usedars=on';
    $method{'moderate'}   {'long'}       = 'tdr; cpoints=10; max_sqhratio=0.95; usedars=on';
    $method{'moderate'}   {'don\'t care'}= 'tdr; cpoints=10; max_sqhratio=0.99; usedars=on';

    $method{'slow'}       {'short'}      = 'tdr; cpoints=10; max_sqhratio=0.10; usedars=on';
    $method{'slow'}       {'moderate'}   = 'tdr; cpoints=10; max_sqhratio=0.80; usedars=on';
    $method{'slow'}       {'long'}       = 'tdr; cpoints=10; max_sqhratio=0.90; usedars=on';
    $method{'slow'}       {'don\'t care'}= 'tdr; cpoints=10; max_sqhratio=0.90; usedars=on';

    $method{'don\'t care'}{'short'}      = 'tdr; cpoints=10; max_sqhratio=0.10; usedars=on';
    $method{'don\'t care'}{'moderate'}   = 'tdr; cpoints=10; max_sqhratio=0.50; usedars=on';
    $method{'don\'t care'}{'long'}       = 'tdr; cpoints=10; max_sqhratio=0.90; usedars=on';
    $method{'don\'t care'}{'don\'t care'}= 'tdr; cpoints=10; max_sqhratio=0.99; usedars=on';

    # select generator
    if ($method{$speed}{$length}) {
	return 'method='.$method{$speed}{$length};
    }
    else {
	# there is an error with the web interface
	return '';
    }

} # end of anuran_get_method()


# ----------------------------------------------------------------
# Make an error message in form
# ----------------------------------------------------------------

sub anuran_error
{
    my $msg = $_[0];
    
    return font({-color=>'red'},"<BLINK>$msg</BLINK>");
} # end of anuran_error() 

##################################################################
#                                                                #
# Help                                                           #
#                                                                #
##################################################################

sub anuran_help
{
    # we have decrement the step counter
    --$step;

    if ($step == 1 or not defined $step) {
	anuran_help_1();
    }
    
    elsif ($step == 2) {
	anuran_help_2();
    }

    elsif ($step == 3) {
	anuran_help_3();
    }

    elsif ($step == 4) {
	anuran_help_4();
    }

    else {
	print
	    'Oops ... There is something wrong!';
    }

    # end
    print p().hr().p();

} # end of anuran_help()


# ----------------------------------------------------------------
# Help (Step 1)
# ----------------------------------------------------------------

sub anuran_help_1
{
    print
	'Step 1: ',
	b('Type of Distribution'),
	blockquote('We provide the following input formats for distributions:'.
		   '<ul>'.
                   '<li><code>Continuous standard distribution</code>'.
		   blockquote('Select one of the standard distributions from a menue in Step 2
                               and insert the necessary parameters in Step 3.
                               It is also possible to truncate the domain in Step 3.').
		   '<li><code>Continuous distribution with given PDF</code>'.
		   blockquote('Insert the probability density function (PDF) for the desired
                               distribution (Step 2). In Step 3 the domain can be given.').
		   '</ul>' );
    
} # end of anuran_help_1() 


# ----------------------------------------------------------------
# Help (Step 2)
# ----------------------------------------------------------------

sub anuran_help_2
{
# ................................................................
# CASE: select a distribution
# ................................................................
    if ($distrtype eq 'cstd') { anuran_help_2_cstd(); return; } 
    if ($distrtype eq 'cpdf') { anuran_help_2_cpdf(); return; } 

    # error use default
    anuran_help_2_cstd(); return;

} # end of anuran_help_2() 

sub anuran_help_2_cstd
{
    print
	'Step 2: ',
	b('Continuous Standard Distribution'),
	blockquote('Select a standard distribution from the menue.
                    Two flags can be set:'.
                   '<ul>'.
                   '<li><code>Use standard form</code>'.
		   blockquote('Some distributions have a standard form.
                               E.g., the normal distribution has mean <i>mu</i> and 
                               standard deviation <i>sigma</i> as its parameters. 
                               The standard form always has parameters <i>mu=0</i>
                               and <i>sigma=1</i>.  
                               It is always possible to transform a random variable that
                               follows a distribution with the standard form to a random variable
                               that follows any non-standard form. E.g., if a standard normal
                               distributed random variable <i>Z</i> is given, then
                               <i>X=mu+sigma*Z</i> follows a normal law with parameters 
                               <i>mu</i> and <i>sigma</i>. <p>
                               Using the standard form is numerically always the most
                               stable method and thus is the recommended method although
                               it might be necessary to transform the output of the generator
                               into the required non-standard form. <p>
                               If this flag is not set then this transformation is not necessary.
                               However this option only works well if the given parameters are 
                               not too extreme.'). 
		   '<li><code>Truncated domain</code>'.
		   blockquote('If this flag is set, then it is possible to trucate the domain
                               of the distribution in Step 3.').
		   '</ul>' );

} # end of anuran_help_2_cstd() 

sub anuran_help_2_cpdf
{
    print
	'Step 2: ',
	b('Continuous Distribution with given PDF').
	blockquote('Insert the name and PDF for the distribution:'.
                   '<ul>'.
                   '<li><code>Name</code>'.
		   blockquote('Insert a string. '.
			      'This string is used for the name of the generator and '.
			      'for making subroutine names. '.
			      'For the latter non-alphanumeric characters are mapped '.
			      'to underscore \'<code>_</code>\', and '.
			      'the word \'<code>distribution</code>\' will be discarded. <p>'.
			      'It is used literally is not interpreted as the name of some standard distribution.').
		   '<li><code>Density</code>'.
		   blockquote('Insert the density for the desired distribution. ' .
			      'It is not necessary that the given function integrates to one, ' .
			      'e.g., you can insert <code>"exp(-(x^2)/2)"</code> for your ' .
			      'distribution instead of the real density ' .
			      '<code>"1/sqrt(2*pi)*exp(-(x^2)/2)"</code>. <p>' .
			      anuran_help_functparser().
			      'No parameters.').
		   '</ul>' );

} # end of anuran_help_2_cpdf() 

sub anuran_help_functparser
{
    return
'The string for the function should be composed similar to functions in
 programming languages. The following symbols are available
 (for conviency for some operators there exists more than one symbol): <p>

 <table border=0>
 <tr><td colspan=2><i>numbers</i>
 <tr><td colspan=2><i>symbolic constants</i>
 <tr><td colspan=2><i>binary operators</i>
 <tr><td colspan=2><i>functions</i>
 <tr><td colspan=2><i>relational operators</i>
 </table>

 <p>';

} # end of anuran_help_functparser()

# ----------------------------------------------------------------
# Help (Step 3)
# ----------------------------------------------------------------

sub anuran_help_3
{
    print 
	'Step 3: ',
	b('Parameters for distribution'),
	blockquote('<ul>'.
		   '<li>Parameters for distributions from the menue.' .
		   blockquote('The meaning of these parameters can be seen from the density ' .
			      'printed as result of Step 2. <p>' .
			      'The restrictions for valid parameters are given ' .
			      '(if there are any) and the inserted values are verified. ' .
			      'However only basic conditions are checked. ' .
			      'Passing these tests does not necessarily mean that a ' .
			      'generator code can be produced for the given parameters. <p>' .
			      'Parameters that are fixed in the standard form of the ' .
			      'distribution are printed in '.font({-color=>$Gray},'gray').'. <p>' .
			      'The input fields for the parameters depend on the selected ' .
			      'distribution, of course.'),
		   '<li><code>Domain</code>',
		   blockquote('Enter the domain of the (truncated) distribution.<p>' .
			      'Notice that only numbers can be entered but not symbolic ' .
			      'constants like <code>pi</code>. <p>' .
			      'This field only appears if a PDF is given for a distribution, ' .
			      'or if the box <code>Truncated domain</code> has been checked ' .
			      'for distributions from the menue in Step 2.'),
		   '</ul>' );
    
} # end of anuran_help_3() 

# ----------------------------------------------------------------
# Help (Step 4)
# ----------------------------------------------------------------

sub anuran_help_4
{
    print 
	'Step 4: ',
	b('Properties of generator'),
	blockquote('It is possible to enter some properties for the desired generator code.' .
		   '<ul>' .
		   '<li><code>Programming language</code>',
		   blockquote('Enter the programming language for which the generator code '.
			      'should be produced.'),
		   '<li><code>Speed / Code length</code>',
		   blockquote('The produced programming code is depends on your requirements ' .
			      'on the random number generator. ' .
			      'Although this is an experimental version ANURAN tries to ' .
			      'make code that fits your given properties ' .
			      '(within its internal restrictions).'),
		   '<li><code>Generator only / Make complete demo version</code>',
		   blockquote('If <code>Make complete demo version</code> is checked, ' .
			      'the produced code is a program by its own that can be simply ' .
			      'compiled and executed. It then draws 10 random numbers from the ' .
			      'given distribution. It shows how the generator has to be used ' .
			      'in your application. The main routine can removed if you only '.
			      'want to use the random number generator. <p>' .
			      'If <code>Generator only</code> is checked, then only the code ' .
			      'for the generator is printed. It can be compiled and linked with ' .
			      'your program.'),
		   '</ul>');

} # end of anuran_help_4() 


###################################################################
