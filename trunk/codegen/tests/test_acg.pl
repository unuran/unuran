#!/usr/bin/perl
# ----------------------------------------------------------------
# Generates the code generators
# ----------------------------------------------------------------


# program lanugates to test
@LANGUAGES = ("C", "FORTRAN", "JAVA");

# Array of Hashes (Hash-entries: prog_language, distr, parameters)
@Test = (
   {
     name => "normal",  
     params => [0, 1]
   },
   {
     name => "beta",
     params => [3.14, 2.71]
   },
   {
     name => "normal",
     params => [10, 2]
   }
);



for ($i=0; $i<scalar(@Test); $i++){

    foreach $PROG_LANG (@LANGUAGES){
	$DISTR     = $Test[$i]{name};
	@PARAMS    = @{$Test[$i]{params}};
	$no_of_params = scalar(@PARAMS);

        # write acg generator
	open(OUT, ">./acg.c") or die "Can't open outfile: $!";
	write_acg();
	close(OUT);

        # generate acg
	system( "gcc -I. -I.. -I../.. -I../../src -I../../src/tests  -L../../src -Wall -g -O3 -o ./acg acg.c -lunuracg -lunuran -lm -lprng" );
        # remove acg.c
	system("rm ./acg.c");

        # create random number generator
	if ( $PROG_LANG eq "C" ){
	    $suffix = ".c";
	    write_c_main();

            # random number generator uses math.h 
            # o.k. maybe using Perl filehandles would be nicer
            system ("echo '#include <math.h>' > ./gen.c");
        }
        elsif ( $PROG_LANG eq "FORTRAN" ){
             $suffix = ".f";
        }
        elsif ( $PROG_LANG eq "JAVA" ){
 	   $suffix = ".java";
        }
        else{
	    die "Can't determine desired programming language!";
        }
       system( "./acg >> ./gen$suffix");
       # remove acg
       system ("rm ./acg");

       # compile and execute random number - test
       if ( $PROG_LANG eq "C" ){
	   system ("gcc -Wall -lm *.c");
	   system ("./a.out");

	   #clean up
	   #system ("rm *.c");

       }
       elsif ( $PROG_LANG eq "FORTRAN" ){

	   #clean up
	   #system ("rm *.f");
       }
       elsif ( $PROG_LANG eq "JAVA" ){

	   #clean up
	   system ("rm *.java");
       }
       else{
	   die "Can't determine desired programming language!";
       }

       print "Test $i: $DISTR with ", (join ", ", @PARAMS), " with $PROG_LANG done\n";
    }
}




# *****************************************************************
#
#   subroutine write_acg
#
#   writes the acg to a c-file
#   
# *****************************************************************
sub write_acg{


print OUT "/********************************************************/\n";
print OUT "/* automatically generated by test_acg.pl               */\n";
print OUT "/********************************************************/\n";

# includes
print OUT "\n#include <unuran.h>\n";
print OUT "#include <unuran_acg.h>\n";
print OUT "#include <unuran_tests.h>\n";

#defines
print OUT "\n#define RUN_TESTS (~0x0u & ~UNUR_TEST_SCATTER)\n";

# main
print OUT "\nint main()\n";
print OUT "{\n";

# definition of variables
print OUT "\tUNUR_DISTR *distr;\n";
print OUT "\tUNUR_PAR   *par;\n";
print OUT "\tUNUR_GEN   *gen;\n";
print OUT "\tdouble  fpar[", $no_of_params ,"] = ", 
          "{", (join ", ", @PARAMS), "};\n";

# debugging
print OUT "\n\tunur_set_default_debug(~0u);\n";

# initialize objects
print OUT "\n\tdistr = unur_distr_", $DISTR,"(fpar, ",$no_of_params,");\n";
print OUT "\tpar = unur_tdr_new( distr );\n";

print OUT "\tunur_tdr_set_cpoints( par, 4, NULL );\n";
print OUT "\tgen = unur_init( par );\n";
print OUT "\tunur_acg_", $PROG_LANG,"( gen, stdout, NULL );\n";
print OUT "\tunur_distr_free(distr);\n";
print OUT "\tunur_free(gen);\n";

print OUT "\n\texit (0);\n";
print OUT "}\n";

close(OUT);
}

# *****************************************************************
#
#   subroutine write_c_main
#
#   writes a routint to test the random number generator
#
# *****************************************************************
sub write_c_main{

    open ( MAIN_C_OUT, ">testc.c") or die "Can't open outfile $!";

    print MAIN_C_OUT "#include <stdio.h>\n";
    print MAIN_C_OUT "#include <math.h>\n";

    print MAIN_C_OUT "\nextern double rand_$DISTR();\n";

    print MAIN_C_OUT "\nint main()\n";
    print MAIN_C_OUT "{\n";
    print MAIN_C_OUT "\n\tint i;\n";
    print MAIN_C_OUT "\n\tfor (i=0; i<10; i++)\n";
    print MAIN_C_OUT "\t\tprintf(\"%1.10e\\n\", rand_$DISTR());\n";


    print MAIN_C_OUT "\n\treturn (0);\n";
    print MAIN_C_OUT "}\n";

close (MAINOUT);
}




