

In unuran it is also possible to define functions (e.g. cdf or pdf) as strings.
As you can see in @ref{Example_2_str} it is very easy to define a distribution object as a string.
But of course the possibilities are more restricted as a definition by C-Code (@ref{Example_2}) but there is nearly no difference in time to generate random number.

If you use a self defined function of course you have to proof if your definitions fulfill the qualifications.

The notation is very similar do the most programming language and mathamatical programs (see also the examples at the end of this capter).

Especially with relation operators it is very easy to define functions in pieces :
So you can define the piecewise linear function defined throug the points (-1,0),(0,1),(1,0) with 
@example
(x>-1)*(x<0)*(1+x) + (x>=0)*(x<1)*(1-x) .
@end example  

It is possible to use the string-defined function with the common interface as well as in the StringAPI.

@subheading common interface 

You can set continous distributions (for more detail information see  @ref{CONT})  and discrete distributions (for more detail information see  @ref{DISCR}) 
with a character string. For this you use the functions of the form  
@example 
unur_distr_<cont/discr>_set_<...>str.
@end example 
To get functions in form of an character string you can use function of the form 
@example 
unur_distr_<cont/discr>_get_<..>str.
@end example 

How it works you can see in the following example:
@example
@include ref_example_FuncStr.texi
@end example



@subheading String API 
 In @ref{StringDistr} you can find a description how to use an function string in the string interface. 
 How it works you can see in @ref{Example_2_str}. 

@subheading symbols and examples

The string isn't case-sensitive and use the usual priorities of operations (sorted from highest to lowest preceedance: bracket, system functions, relation operators, power, multiplication, addition)
You can use only on argument which must have the name 'x'. Parameters must written as real values.


In the following table you can see all symbols you can use sorted by symbol groups:


@sp 1
@cartouche
@noindent
@b{numbers}
@multitable   {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx} 
@item         symbols   @tab explanation @tab examples 
@item         @b{[numbers]} @tab numbers @tab 123   
@item         @b{.}     @tab comma       @tab 165.567  
@item         @b{e}     @tab exponet     @tab  123e-7
@end multitable
@end cartouche



@sp 1
@cartouche
@noindent
@b{relation operators}
@multitable {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx}
@item       symbols       @tab explanation      @tab examples 
@item       @b{<}         @tab less             @tab 3*(x<1) 
@item       @b{=}, @b{==} @tab equal            @tab 3*(2=x), 3*(2==x)
@item       @b{>}         @tab greater          @tab 3*(x>1)
@item       @b{<=}        @tab less or equal    @tab 3*(x<=1)      
@item       @b{<> , !=}   @tab not equal        @tab 3*(x<>1), (x!=1)
@item       @b{>=}        @tab greater or equal @tab 3*(x>=1)
@end multitable
@end cartouche



@sp 1
@cartouche
@noindent
@b{special symbols}
@multitable {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx}
@item symbols @tab explanation @tab examples 
@item        @b{(}   @tab open bracket @tab 2*(3+x)      
@item        @b{)}   @tab close bracket @tab 2*(3+x)
@item        @b{,}   @tab 
@end multitable
@end cartouche


@sp 1
@cartouche
@noindent
@b{arithmetic operators}
@multitable  {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx}
@item         symbols      @tab explanation      @tab examples 
@item         @b{+}        @tab  addition        @tab 2+x
@item         @b{-}        @tab  subtraction     @tab 2-x
@item         @b{*}        @tab  multiplication  @tab 2*x
@item         @b{/}        @tab  division        @tab x/2
@item         @b{^}        @tab  power           @tab x^2
@end multitable
@end cartouche


@sp 1
@cartouche
@noindent
@b{system constants}
@multitable  {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx}
@item         symbols      @tab explanation      @tab examples 
@item         @b{pi}       @tab  pi: 3,1415...   @tab 3*pi+2
@item         @b{e}        @tab  exponential constant: 2,7182... @tab 3*e+2       
@end multitable
@end cartouche


@sp 1
@cartouche
@noindent
@b{system functions}
@multitable  {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx}
@item         symbols      @tab explanation      @tab examples 
@item         @b{mod}      @tab mod(m,n) gives the remainder on devision m by n   @tab mod(x,2)   
@item         @b{exp}      @tab exponential function @tab exp(-x^2)
@item         @b{log}      @tab natural logarithm    @tab log(x)
@item         @b{sin}      @tab sine                 @tab sin(x)             
@item         @b{cos}      @tab cosine               @tab cos(x)
@item         @b{tan}      @tab tangent              @tab tan(x)
@item         @b{sec}      @tab secant               @tab sec(x*2)
@item         @b{sqrt}     @tab square root          @tab sqrt(2*x)
@item         @b{abs}      @tab absolute value       @tab abs(x)
@item         @b{sgn}      @tab sign function        @tab sign(x)*3 
@end multitable
@end cartouche


@sp 1
@cartouche
@noindent
@b{variable}
@multitable  {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx}
@item        symbols       @tab explanation      @tab examples 
@item        @b{x}         @tab variable         @tab 3*x^2
@end multitable
@end cartouche



@sp 2
Several complex examples for string-defined 'distributions':

@smallexample 
-4.7285e-7*x

2.894736*10^2

(sin( log(3*x*(cos( 3*x^3-4.6789/(x+4)]))))-1

exp(x^2)*(sin(x*cos(x^2-1))+1)*((x-3*pi*x)<1)

(3*(2<>x)and(x>2))+x

(x>-1)*(x<0)*(1+x) + (x>=0)*(x<1)*(1-x
@end smallexample


















