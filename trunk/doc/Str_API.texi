


@subheading symbols and examples

The string isn't case-sensitive and use the usual precendence (the operators in the table below are sorted from highest to lowest precedance).
The first unknown character string will be interpreted as the variable. Parameters must written as real values.

                    
In the following table you can see all symbols you can use sorted by symbol groups:

@sp 1
@multitable   {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx}
@item         symbols   @tab explanation @tab examples 
@end multitable


@sp 1
@noindent 
@multitable   {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx} 
@item         @b{[figures]} @tab numbers @tab 123   
@item         @b{. -}     @tab comma, negative numbers       @tab -165.567  
@item         @b{e}     @tab exponet     @tab  123e-7
@item         @b{pi}       @tab  pi: 3,1415...   @tab 3*pi+2
@item         @b{e}        @tab  exponential constant: 2,7182... @tab 3*e+2   
@end multitable

@sp 1
@noindent
@b{special functions}
@multitable  {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx}
@item         @b{exp}      @tab exponential function @tab exp(-x^2)
@item         @b{log}      @tab natural logarithm    @tab log(x)
@item         @b{sin}      @tab sine                 @tab sin(x)             
@item         @b{cos}      @tab cosine               @tab cos(x)
@item         @b{tan}      @tab tangent              @tab tan(x)
@item         @b{sec}      @tab secant               @tab sec(x*2)
@item         @b{sqrt}     @tab square root          @tab sqrt(2*x)
@item         @b{abs}      @tab absolute value       @tab abs(x)
@item         @b{sgn}      @tab sign function        @tab sign(x)*3 
@end multitable 

@sp 1
@noindent
@multitable {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx} 
@item        @b{(}   @tab left parenthesis @tab 2*(3+x)      
@item        @b{)}   @tab right parenthesis @tab 2*(3+x)
@end multitable

@sp 1
@noindent
@b{relation operators}
@multitable {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx} 
@item       @b{<}         @tab less             @tab 3*(x<1) 
@item       @b{=}, @b{==} @tab equal            @tab 3*(2=x), 3*(2==x)
@item       @b{>}         @tab greater          @tab 3*(x>1)
@item       @b{<=}        @tab less or equal    @tab 3*(x<=1)      
@item       @b{<> , !=}   @tab not equal        @tab 3*(x<>1), (x!=1)
@item       @b{>=}        @tab greater or equal @tab 3*(x>=1)
@end multitable


@sp 1
@noindent
@b{binary operators}
@multitable  {xxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxx}
@item         @b{^}        @tab  power           @tab x^2
@item         @b{*}        @tab  multiplication  @tab 2*x
@item         @b{/}        @tab  division        @tab x/2
@item         @b{+}        @tab  addition        @tab 2+x
@item         @b{-}        @tab  subtraction     @tab 2-x
@end multitable

@sp 2
Several examples for string-defined 'distributions':

@smallexample 

exp(-x^2/2)/(sqrt(2*pi))

exp(-sqrt(1+x^2)+x/2)

(x<1)*(x>0)*sin(x)
 

@end smallexample

@sp 2
@noindent
@b{Remarks:}
@itemize @bullet
@item
In case of doubt with the predendence please use parentheses.

@item
The figure 'e' is used both as a system constant written after an operator and as a seperator between mantisse and exponent for the basis 10. 

@item
Relation operators are very useful to define functions on a limited support and to define piecewise functions. 


@item
Of course it ist better to use for standard distributions build in functions.

@item
Especially with relation operators it is very easy to define functions in pieces :
So you can define the piecewise linear function defined throug the points (-1,0),(0,1),(1,0) with 
@example
(x>-1)*(x<0)*(1+x) + (x>=0)*(x<1)*(1-x) .
@end example 

@item 
It is better to truncate the support as to define a density function which is 0 outside of a special area.

@sp 2










