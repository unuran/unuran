 
\input texinfo   @c -*-texinfo-*-


@c %**start of header
@setfilename qstart.info
@settitle    UNURAN User Manual
@iftex
@afourpaper
@end iftex
@paragraphindent 0
@c %**end of header


@c Dies ist das neue UNURAN -Einfuehrung  
@c September 2000 Janka & Tirler                
@c $Id$

@set VERSION 0.01
@set DATE September 2000

@dircategory Scientific software
@direntry
* unuran-ref: (unuran-ref).  UNURAN -- Universal Non-Uniform Random
number generator
@end direntry

@ifinfo
This is version @value{VERSION} of the UNURAN-manual,@*
last updated @value{DATE}
@end ifinfo


@titlepage
@title UNURAN
@subtitle Generating random numbers
@subtitle Version: @value{VERSION}
@subtitle Date: @value{DATE}
@end titlepage


@c ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
@c
@c `Top' Node and Master Menu
@c


@ifnottex
@node Top,     Intro,  ,          (dir)     
@top
@c    node-name, next,          previous,  up
This is the online-documentation of UNURAN.@*
Version: @value{VERSION}@*
Date: @value{DATE}
@menu
* Intro::                  Introduction
* Examples::               Examples
* Distributions::          Distributions
* Methods::                How should the random numbers be created
* Function Reference::     Function Reference
* FAQ::                    Frequently asked questions
* Internal::               Internal remarks
@end menu
@end ifnottex     

@c --------------------------------------------------------------------

@ifhtml
Table of @ref{Contents}
@end ifhtml

@c --------------------------------------------------------------------

@node Intro
@chapter Introduction
@menu
* Overview::  Overview
* Install::   Installing the thing
* Remark::    Remark about this document
@end menu


@node Overview
@section Overview
@menu
* target:: Target group
@end menu

@node target
@subsection Target group

UNURAN is designed for applications using non-standard distributions
where no seperate generator is yet available.
UNURAN is also useful if the parameters of a standard distribution
should be changed frequently.
@*
For applications depending on a standard distribution
without changing the paramters a lot,
it will be better to look for a specific tool for that distribution. 


@node Install
@section Install
@menu
* Now::
@end menu

@node Now
@subsection Now
cvs update @*
@* Type @file{make} in UNURAN to compile UNURAN
@* @file{Makefile.am} in @file{/examples} modify in regard to testprogram 
@* make in @file{/examples}

@node Remark
@section Remark about this document

Great parts of this document are generated automatically from
the program code by perl scripts.
@*
If there are problems with this document because of missing
@file{.texi}-files, maybe UNURAN hasn't been installed properly.
In this case it might help reading the short description within
each script (@file{*.perl}) to learn how to use it.
@*
The idea behind this strategy is to hold this document
easier up-to-date because comments inside the code
are used and in the ideal case these are simutanuously
changed with the code itself.


@c --------------------------------------------------------------------


@node Examples
@chapter Examples
@menu
* Ex1:: As short as possible
* Ex2:: Use of arbitrary pdf
* Ex3:: Change function parameters
@end menu

@*Assuming UNURAN has been installed sucessfully,
here are some exmples to showing how to obtain random numbers.
Beginning with the basics of using unuran we evolve to examples
using  more advanced features of UNURAN.
After the example itself the relevant code will be explained.
@*call the compiler with:
@* @file{gcc -Wall  -L../src/methods  -L../src/distributions  -L../src/tests  -L../src/uniform -g -O2  -o test1  test1.o -lunuran_tests -lunuran_distributions -lunuran -luniform -lm -lprng}

@node Ex1
@section Ex1: As short as possible
Name: test1.c

@smallexample
/* my first UNURAN program: test1.c*/

#include <unuran.h>
#include <unuran_distributions.h>
#include <unuran_tests.h>

int main()
@{
  int    i;
  double x;

  UNUR_DISTR *distr;    /* distribution */
  UNUR_PAR   *par;      /* parameter */
  UNUR_GEN   *gen;      /* generator */

  /* choose a implemented distribution: Gaussian */
  distr = unur_distr_normal(NULL, 0);

  /* choose method */
  par = unur_arou_new(distr);

  /* make generator object */
  gen = unur_init(par);

  /* sample: print 100 random numbers */
  for (i=0; i<100; i++) @{
    x = unur_sample_cont(gen);
    printf("%f\n",x);
  @}

  return 0;
@}    
@end smallexample
@*
First you have to include the libraries @code{unuran.h} 
and @code{unuran_distributions.h} with the commands:
@smallexample
#include <unuran.h>
#include <unuran_distributions.h> 
@end smallexample
@* 
These headers provide all functions/features for generating random numbers.
@*
The following three structures: 
@smallexample
UNUR_DISTR *distr;  /* distribution */ 
UNUR_PAR   *par;    /* parameter */
UNUR_GEN   *gen;    /* generator */
@end smallexample
@*
are necesssary to store the used parameters. It is not necessary to
understand the structure in detail to get random numbers. 
@*
With
@smallexample
 distr = unur_distr_normal(NULL, 0);
@end smallexample
@*
the random numbers will be standard normal distributed.
The second argument is the number of parameters of the 
used distribution (see @ref{Preset}) and
the first argument is a pointer to an array holding
these parameters.
@*
With
@smallexample
 par = unur_arou_new(distr);
@end smallexample
@*
the method `AROU' is chosen for sampling.
@*
For actual sampling it's necessary to build a generator object:
@smallexample
gen = unur_init(par)
@end smallexample
@*
(Now the objects @code{distr} and @code{par} have no further use
and will be destroyed).@*
The following line shows how actual sampling works:
@smallexample
 x = unur_sample_cont(gen);
@end smallexample

@node Ex2
@section Ex2: Arbitrary distributions

If you want to sample from a not implementet distribution,
UNURAN is probably the method of choice.
You only have to provide a function calculating e.g. the cdf
(see @ref{Arbitrary} for everything the user can provide).
What you have to provide depends on the method used for sampling
(see @ref{Requirements}).

@page
@smallexample
/* my second UNURAN program test2.c */ 

#include <unuran.h>
#include <unuran_distributions.h>
#include <unuran_tests.h>

/* desired cdf  -- piecewise parabolic */
double mycdf (double x)
@{
   if (x <= 0.0)
     return ( 0.0 );
   else if (x <= 1.0)
     return ( x*x/3.0 );
   else if (x <= 3.0)
     return( ((-x+6.0)*x-3.0)/6.0 );
   else
     return ( 1.0 );
@}  

int main()
@{
  double x;
  int    i;

  UNUR_DISTR *distr;  /* distribution */ 
  UNUR_PAR   *par;    /* parameter    */
  UNUR_GEN   *gen;    /* generator    */
 
  /* make distribution object and assign desired cdf (trig defined above) */
  distr = unur_distr_cont_new();
  unur_distr_cont_set_cdf(distr, mycdf);

  /* choose method and set parameters (Numerical INVersion) */
  par = unur_ninv_new(distr);
 
  /* make generator object */
  gen = unur_init(par);

  /* print 100 random numbers */
  for (i=0;i<100;i++) @{
  x = unur_sample_cont(gen);
  printf("%f\n",x);
  @}

  /* destroy generator object */
  unur_free(gen);

  exit (0);
@}
@end smallexample
@*
The following lines represent a subroutine providing the
code for calculating the cdf of uniform distributed random
numbers. The cdf mycdf is piecewise parabolic (the pdf would
be a triangle over [0,3] with maximum at 1).
@smallexample
double mycdf (double x)
@{
   if (x <= 0.0)
     return ( 0.0 );
   else if (x <= 1.0)
     return ( x*x/3.0 );
   else if (x <= 3.0)
     return( ((-x+6.0)*x-3.0)/6.0 );
   else
     return ( 1.0 );
@}  
@end smallexample
@*
This two lines generate a distribution object and
set the cdf (which is needed by the choosen method
for generating random numbers (numerical inversion with
the regula falsi) to the disired function
(@code{mycdf()} defined above):
@smallexample
distr = unur_distr_cont_new();
unur_distr_cont_set_cdf(distr, mycdf);
@end smallexample
@*
As in the previous example the line 
@smallexample
par = unur_ninv_new(distr);
@end smallexample
@*
chooses the method for generating random numbers
(in this case numerical inversion).


@node Ex3
@section Ex3: Changing Parameters of the method

@* Each method for generating random numbers allows several
parameters to modify.
If you don't want UNURAN to choose default values,
it's possible to change a specific parameters (see @ref{Function Reference});
 the following example shows you how to do. 
The important lines are in bold face.

@smallexample
/* my third UNURAN program test3.c */ 

#include <unuran.h>
#include <unuran_distributions.h>
#include <unuran_tests.h>

int main()
@{
  int    i;
  double x;
  double params[2] = @{10.0, 0.5@};

  UNUR_DISTR *distr;    /* distribution */
  UNUR_PAR   *par;      /* parameter */
  UNUR_GEN   *gen;      /* generator */

  /* choose Gaussian distribution with parameters 10.0 and 0.5 */
  distr = unur_distr_normal(&params, 2);

  /* choose method */
  par = unur_ninv_new(distr);

  /* change a parameter of the used method */
  unur_ninv_use_newton(par);

  /* make generator object */
  gen = unur_init(par);

  /* sample: print 100 random numbers */
  for (i=0; i<100; i++) @{
    x = unur_sample_cont(gen);
    printf("%f\n",x);
  @}

  return 0;
@}

@end smallexample
@*
This example is similar to the first example.
The first modification is the distribution
(normal distribution with mean 10.0 and standard deviation 0.5).
The intention of this example was to demonstrate how to
change parameters of the choosen method with the following line:
@smallexample
unur_ninv_use_newton(par);
@end smallexample
@*
The available parameters are documented in @ref{MethodsRef}.


@c --------------------------------------------------------------------

@node Distributions
@chapter Distributions
@menu
* Arbitrary:: Arbitrary Distributions 
* Preset:: Preset Distributions
@end menu

@node Arbitrary
@section Arbitrary distributions

@node Preset
@section Preset distributions 
@include qstart_distributions.texi



@c --------------------------------------------------------------------


@node Methods
@chapter Methods
@menu
* Description:: Description of the methods
* Requirements:: The requirements of the methods
* Defaults:: The default settings of parameters
@end menu

@multitable @columnfractions .222 .222 .222 .334
@item name/references    @tab  parameter (default)   @tab required       @tab remarks
@item AROU               @tab                        @tab pdf, dpdf       @tab Adaptive Ratio-Of-Uniforms
@item CSTD               @tab                        @tab                @tab interface for extern generators
@item DAU                @tab                        @tab prob. vec.     @tab (Discrete) Alias-Urn
@item DIS                @tab                        @tab prob. vec.     @tab (Discrete) Alias-Urn
@item TDR [..]           @tab                        @tab                @tab 
@item NINV               @tab                        @tab                @tab numerical inversion
@item                    @tab  (regula falsi)        @tab cdf            @tab
@item                    @tab  newton                @tab cdf, pdf       @tab only for continous cdf
@item RECT               @tab                        @tab                @tab multi variate experimental
@item STDR               @tab                        @tab pdf, mode,area under pdf       @tab transformed density rejection with universal bounds

@item SROU               @tab                        @tab pdf, mode,area under pdf      @tab (Simple universal generator, ratio-of-uniforms method
@item TABL               @tab                        @tab pdf            @tab Ahren
@item TDR                @tab                        @tab pdf, dpdf      @tab Transformed density rejection
@item UTDR                @tab                        @tab pdf, mode      @tab Universal Transformed Density Rejection; 3-point method

@end multitable

@* choosing the method:
@*  @code{ struct unur_par par = unur_NAME_new(struct unur_distr )
}
@*
@* e.g.: 
@* @code{ par  = unur_ninv_new(distr );
}

@* choosing the parameters of a method. (This can be a change of a
numerical parameter (e.g: 2 ..) or decision of a special numerical
implementation (e.g: Neton- regula falsi)
To change any parameter you habe to use the according function call.
 All parameters have default settings:

@* e.g.:  
@* Numerical inversion with Netwon
@* @code{  unur_ninv_use_newton(par); );
}

@node Description
@section Description of the methods
@menu
@c * AROU:: Adaptive Ratio Of Uniforms
* CSTD:: Interface for extern generators
@c * DAU::  (Discrete) Alias-Urn
@c * DIS::  (Discrete) Alias-Urn
* DSTD:: ???
* NINV:: Numerical INVersion
@c * RECT:: experimental multivariate Method
* SROU:: Simple Ratio Of Uniforms
* STDR:: Transformed Density Rejection (with universal bounds)
@c * TABL:: Ahren
@c * TDR::  Trandformed Density Rejection
@c * UNIF:: ???
* UTDR:: Universal Transformed Density Rejection (3-point method)
@end menu

@include qstart_method_description.texi

@node Requirements
@section Requirements of the methods
@include qstart_required.texi

@node Defaults
@section Default settings of the parameters
@include qstart_paramdefaults.texi


@c --------------------------------------------------------------------


@node Function Reference
@chapter Function reference
@menu
* Readymade:: Ready-made distributions
* Selfmade::  Include your own distributions
* MethodsRef::  Functions for Methods
@end menu
Notation:


@node Readymade
@section Ready-made distributions
@include qstart_distr_ref.texi

@node Selfmade
@section Self-made distributions
@include qstart_change_distr.texi

@node MethodsRef
@section Methods
@menu
@c * AROUref:: Adaptive Ratio Of Uniforms
* CSTDref:: Interface for extern generators
@c * DAUref::  (Discrete) Alias-Urn
@c * DISref::  (Discrete) Alias-Urn
* DSTDref:: ???
* NINVref:: Numerical INVersion
@c * RECTref:: experimental multivariate Method
* SROUref:: Simple Ratio Of Uniforms
* STDRref:: Transformed Density Rejection (with universal bounds)
@c * TABLref:: Ahren
@c * TDRref::  Trandformed Density Rejection
@c * UNIFref:: ???
* UTDRref:: Universal Transformed Density Rejection (3-point method)
@end menu

@include qstart_function_reference.texi

@c --------------------------------------------------------------------


@node FAQ
@chapter FAQ
@menu
* Q1:: Other languages than @code{C}
* Q2:: Other operation systems then UNIX
@end menu

@node Q1
@section Q1: I have a simulation program in FORTRAN. How can I use your
library.

Use the following program xyz.c which produce a file with random numbers.
Read this random numbers ... 

@node Q2
@section Q2: I am not working under Windows, how can I install ...

@c --------------------------------------------------------------------

@node Internal
@chapter Internals
@menu
* Functions:: Functions for internal use
* Remarks:: Internal remarks
@end menu

@node Functions
@section Functions for internal use
 
@include qstart_internals.texi

@node Remarks
@section Internal remarks 
@enumerate
@item
remark at the very beginning:
names of the struct too long (unur_distr, unur_par, unur_gen);
better: one struct unur with unur.d, unur.p, unur.g 
@item
standard configuration: Log outout to file
@end enumerate

@ifhtml
@anchor{Contents}
@end ifhtml

@contents

@bye
















