#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <unuran.h>


/* Maximal length of provides string allowed */
#define MAX_STRLENGTH (1024)
/* Maximal entries of any list allowed */
#define MAX_ELEM (1024)

#define UNKNOWN (-2)
#define UNDEF (-1)


    /* ********************************************************** */ 
    /* ********************************************************** */ 
    /* the following code is automatic generated by a perl script */

=INPUT known_methods

    /* end of automatically generated code */
    /* ********************************************************** */ 
    /* ********************************************************** */ 

/* function prototypes */

void         subst_whitespace(char *, char);
char       * elim_whitespace(char *);
int          parselist(char *, double *);
UNUR_DISTR * make_distr_obj(char *);
UNUR_PAR   * make_par_obj(UNUR_DISTR *, char *);
UNUR_GEN   * make_gen_obj (char *);
int          make_urng_obj(UNUR_PAR *, char *);





/**********************************************************************/
/*                                                                    */
/* function: parselist()                                              */
/*                                                                    */
/* called by: make_distr_obj()                                        */
/*            make_par_obj()                                          */
/*                                                                    */
/* gets a string containing a list of comma separated doubles         */
/* which is terminited via a ')' and a pointer to a double array      */
/* and extracts the doubles from the list to the array                */
/*                                                                    */
/**********************************************************************/
int parselist( char *liststr, double *ptr_to_list ){

  int no_of_elem = 0; /* number of elements in list */

  /* extract doubles from string and write them to array of doubles */
  while ( *liststr != ')' ){   /* end of list is indicated by right bracket */
    /* there can only be ',' or '(' in front of the numbers */
    while ( *liststr == ',' || *liststr == '('){
      liststr++;               /* next char */
    }
    
    /* extract double and write to array */
    ptr_to_list[no_of_elem] = strtod(liststr, &liststr);
    no_of_elem++; /* goto next entry of array */

  } /* end while -- all elements of list read*/

  return (no_of_elem);

} /* end of parselist() */




/**********************************************************************/
/*                                                                    */
/* function: make_distr_obj()                                         */
/*                                                                    */
/* called by: make_gen_obj()                                          */
/*                                                                    */
/* gets a string with information about the distribution,             */
/* generates the corresponding distribution object and returns it     */
/*                                                                    */
/* The string consists of key=value entries separeted by ';'          */
/*                                                                    */
/* three possibilities:                                               */
/* key=value                                                          */
/* key=(komma separated list of numbers)                              */
/* key=value(komma separated list of numbers)                         */
/*                                                                    */
/**********************************************************************/
UNUR_DISTR *make_distr_obj(char *str){

  UNUR_DISTR *distr;

  double list[MAX_ELEM]; /* value contains a list of numbers */
  int no_of_elem;        /* size of that list */

  char * tmpstr;     /* temporary pointer to string */

  char * token;      /* char pointer to tokenize the string */
  char *key, *value; /* the key and its value */

  /* tokenize the string -- split at ';' */
  for ( token  = strtok(str, ";"); 
        token != NULL;     
        token  = strtok(NULL, ";") ){

    /* determine key and value */
    key = token;
    /* one ore more '=' seperates key from value */

    value = strchr(key, '=');
    for ( *value='\0',value++  ;  *value=='='  ;  value++ ); 

    /* split value into value and list (one of them must exist) */
    no_of_elem = 0;
    /* is a list beginning with '(' in the value included? */
    if (NULL != strchr(value, '(') ){

      tmpstr = strchr(value, '(');
      *tmpstr = '\0'; /* terminate value */
      tmpstr++;       /* points to begin of list (if available) */

      /* extract list of doubles from string  */
      no_of_elem = parselist(tmpstr ,list);

    }

    /* Now: key, value and list are determined               */


    /* ********************************************************** */ 
    /* ********************************************************** */ 
    /* the following code is automatic generated by a perl script */

=INPUT distrinfo

    /* end of automatically generated code */
    /* ********************************************************** */ 
    /* ********************************************************** */ 

  } /* end while -- all tokens handled */


  return ( distr );

}
/* end of make_distr_obj()                                            */



/**********************************************************************/
/*                                                                    */
/* function: make_par_obj()                                           */
/*                                                                    */
/* called by: make_gen_obj()                                          */
/*                                                                    */
/* gets a pointer to a distribution object and a string with          */
/* information about the distribution,                                */
/* generates the corresponding parameter object and returns it        */
/*                                                                    */
/* The string consists of key=value entries separeted by ';'          */
/*                                                                    */
/* three possibilities:                                               */
/* key=value                                                          */
/* key=(komma separated list of numbers)                              */
/* key=value(komma separated list of numbers)                         */
/*                                                                    */
/**********************************************************************/
UNUR_PAR *make_par_obj(UNUR_DISTR *distr, char *methstr){

  UNUR_PAR *par;


  int method = UNDEF; /* method to generate random numbers */

  int check;          /* variable used to check for errors */

  char * token;  /* char pointer to tokenize the string */
  char *key, *value; /* the key and its value */
  char *tmpstr;  /* temporary pointer to char */

  double dblvalue; /* double representation of value */

  double list[MAX_ELEM]; /* value contains a list of double numbers */
  int no_of_elem;        /* size of that list */


  /* tokenize the string */
  for ( token = strtok( methstr, ";");
       token != NULL;
       token = strtok(NULL, ";") ){


    /* determine key and value */
    key = token;
    /* none or several '=' seperates key from value */
    value = strchr(key, '=');
    if (value != NULL ){
       for ( *value='\0', value++; *value=='='; value++ );


       /* split value into leading value and list (if possible) */
       no_of_elem = 0;
       if (NULL != strchr(value, '(') ){

         tmpstr = strchr(value, '(');
         *tmpstr = '\0'; /* terminate value */
         tmpstr++;

         /* extract list of doubles from string  */
         no_of_elem = parselist(tmpstr ,list);

       }


       /* extract double value from string value */
       dblvalue = atof(value);
    }

    /* Now: key, value, dblvalue and list are set           */

    /* ********************************************************** */ 
    /* ********************************************************** */ 
    /* the following code is automatic generated by a perl script */

=INPUT methodinfo

    /* end of automatically generated code */
    /* ********************************************************** */ 
    /* ********************************************************** */ 

  } /* end for -- all tokens handled */


  /* return the parameter object */
  return ( par );

}
/* end of make_par_obj()                                              */


/**********************************************************************/
/*                                                                    */
/* function: make_urng_obj()                                          */
/*                                                                    */
/* called by: make_gen_obj()                                          */
/*                                                                    */
/* gets a pointer to a parameter object and a string with             */
/* information about the uniform random number generator (urng)       */
/* and sets the urng withing the parameter object.                    */
/*                                                                    */
/* The string must be as specified within the PRNG package            */
/*                                                                    */
/**********************************************************************/
int make_urng_obj(UNUR_PAR *par, char *urngstr){

   UNUR_URNG *urng;

   urng = prng_new(urngstr);
   unur_set_urng(par, urng); 

   if ( urng == NULL ){ /* failure */
      fprintf(stderr, "PRNG ERROR: Can't set uniform number generator.\n");
      return (1);
   }
   else{                /* success */
      return (0);
   }
} /* end fo make_urng_obj() */


/**********************************************************************/
/*                                                                    */
/* function: subst_whitespce()                                        */
/*                                                                    */
/* finds all occurences of sep_char in str and replaces the           */
/* surrounding whitespace with the separation character sep_char      */
/*                                                                    */
/**********************************************************************/
void subst_whitespace(char *str, char sep_char){

  char *tmpstr;

  for (tmpstr = str; tmpstr != NULL; tmpstr =strchr(tmpstr, sep_char) ){

    for ( tmpstr--; isspace(*tmpstr); tmpstr-- )
      *tmpstr = sep_char;

    for ( tmpstr++; isspace(*tmpstr) || (*tmpstr == sep_char); tmpstr++ )
      *tmpstr = sep_char;
  }

}
/* end of subst_whitespace()                                          */


/**********************************************************************/
/*                                                                    */
/* function: elim_whitespce()                                         */
/*                                                                    */
/* gets a string, cuts off leading and terminating white space and    */
/* replaces all other white space within the string with the nearby   */
/* separation charakter                                               */
/*                                                                    */
/* returns pointer to the string                                      */
/*                                                                    */
/**********************************************************************/
char *elim_whitespace(char *str){

  char * tmpstr;

  /* remove initial white space */
  while (*str == ' ') str++;

  /* remove terminating white space */
  tmpstr = strchr(str, '\0');
  tmpstr--;
  while ( isspace(*tmpstr) ){
    *tmpstr = '\0';
    tmpstr--;
  }


  /* substitute whitespace whith nearby characters*/
  subst_whitespace(str, ':');
  subst_whitespace(str, ';');
  subst_whitespace(str, ',');
  subst_whitespace(str, '=');
  subst_whitespace(str, ')');
  subst_whitespace(str, '(');

  return ( str );
}
/* end of elim_whitespace()                                           */





/**********************************************************************/
/*                                                                    */
/* function: make_gen_obj                                             */
/*                                                                    */
/* gets a string with information about the distribution and          */
/* the desired method and                                             */
/* generates the corresponding generator object invoking              */
/* the funktions                                                      */
/*   make_dist_obj() and                                              */
/*   make_par_obj()                                                   */
/*                                                                    */
/* The string consists of two substrings (separated by ':')           */
/* (distributio info, method info )                                   */
/* and each of this strings consists of key=value                     */
/*  entries separeted by ';'                                          */
/*                                                                    */
/* three possibilities:                                               */
/* key=value                                                          */
/* key=(komma separated list of numbers)                              */
/* key=value(komma separated list of numbers)                         */
/*                                                                    */
/**********************************************************************/
UNUR_GEN *make_gen_obj (char *str){

  UNUR_DISTR *distr;       /* distribution object */
  UNUR_PAR *par;           /* parameter object */
  UNUR_GEN *gen;           /* generator object    */

  char *diststr; /* string describing distribution */
  char *methstr; /* string describing method       */
  char *urngstr; /* string holding info for uniform generator */
  char *tmpchar; /* temporary pointer to char      */


  /* convert string to lowercase */
  tmpchar = str;
  while ( *tmpchar != '\0' ){
    *tmpchar = tolower(*tmpchar);
    tmpchar++;
  }

  /* remove initial and terminating white space and
     substitute other whitespace within string with nearby
     separation characters                                 */
  tmpchar = elim_whitespace( str );

  /* split info about distribution, method und uniform generator */
  diststr = strtok(tmpchar, ":");
  methstr = strtok(NULL, ":");
  urngstr = strtok(NULL, ":");


  /* generate distribution object */
  distr = make_distr_obj(diststr);

  /* generate parameter object */
  if ( methstr != NULL ){ /* method info is provided */
    par = make_par_obj(distr, methstr);
  }
  else{ /* no info about method provided -> standard method */
    par = unur_cstd_new(distr);
  }

  /* set uniform random number generator -- if provided */
  if ( urngstr != NULL ){
     make_urng_obj(par, urngstr);
  }

  /* generate generator object */
  gen = unur_init(par);
  if ( gen == NULL ){
     fprintf(stderr, "ERROR: Can't create generator object.\n");
  }

  /* return generator object to calling routine */
  return (gen);

} /* end of make_gen_obj() */
