# $Id$
#############################################################################
#
# Config file for test routines
#
# This file contains section with subsections.
# Sections are indicated by [<sect>], subsections by [<sect> - <subsect>:]
# (the colon is required).
#
# The first section _must_ be [main], the last section [verbatim].
# 
# [main] contains global data.
#
# Everything from the beginning of the [verbatim] section til the end of
# the file is copied as is into the generated C file.
#
# Each of the other sections decribe tests.
# For each subsection definitions can be but into the subsection label,
# eg.: [reinit - exist:
#        double fpar[2] = {0.,1.};
#        distr = unur_distr_normal(fpar,2);
#        par = unur_srou_new(distr);
#        gen = unur_init( par ); <-- ! NULL ]
# (the "<-- ! NULL" (in the same line) indicates, that the result should
# checked for invalid NULL pointer.)
# 
# The following names _must_ be used through out. 
#   distr ... for distribution objects.
#   par   ... for parameter objects.
#   gen   ... for generator objects.
# These there variables are declared automatically whenever they occur.
#
# Tests are separated by empty lines. Each test has the form
# [ <set of C calls> ] --> <name of test> [ --> <expected error code> ]
# (the first and the third part are optional).
#
# eg.:
#   unur_srou_new( distr ); 
#	--> expected_NULL --> UNUR_ERR_NULL
#
# Some tests have additional arguments which are put in curly brackets
# after the name of the test.
# e.g.:
#  --> run_validate_chi2 {
#	/* use mirror principle */
#	par = unur_srou_new(distr);
#	unur_srou_set_usemirror(par,1); }
# The closing } must not be on a line of its own.
# (of course { and } are not allowed as arguments.
#
# 
#
# Lines starting with # are ignored (comments).
# Insert `#' can be inserted by using `\#'.
# 
# A ~ (tilde) at the beginning of a line is expanded to
# unur_<method>_<sect>.
# eg. in file srou.c, section [set]
#   ~_cdfatmode(par,0.); is equivalent to unur_srou_set_cdfatmode(par,0.);
#
#############################################################################
# 
# In section [main] the following must be present:
#
# type: of generator (cont|discr)
# eg.
#   type: cont
#
# distributions: which distributions should be used for testing
# It is a comma separated list to be inserted in if condition.
# These conditions are combined by &&.
# eg.
#   distributions: type & T_Tconcave, c_max >= -0.5
#
# urng: which uniform random number generator should be used for testing
# eg.
#   urng: mt19937(5678)
#
# The everything in the subsection [main - header:] is copied verbatim
# into the C file header. 
# eg. for prototypes for functions defined in section [verbatim].
#
# Moreover this subsection must contain the following to definitions:
#    static int COMPARE_SAMPLE_SIZE = 500; 
#    static int VIOLATE_SAMPLE_SIZE = 20;   /* or any appropriate samples size */
#
#############################################################################
#
# List of tests:
#
# --> expected_NULL
#     check if the last C call returns a NULL pointer
#
# --> expected_setfailed
#     check if the last set of chg call has failed
#
# --> expected_reinit
#     check if unur_reinit works
#
# --> compare_double_sequence_par_start
# --> compare_double_sequence_par
#     compare the random string of doubles generated from the last parameter 
#     element (ie. par must we given in the command list before the --> separator)
#     with the random string generated from by the last 
#     compare_double_sequence_par_start test.
#
# --> run_verify_generator
#     run a generator in the verifying mode.
# 
# --> run_validate_chi2 { set parameter object }
#     run a chi^2 test on generator defined by the parameter object that is
#     build from the argument.
#
#############################################################################
