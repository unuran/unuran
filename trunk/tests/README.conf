# $Id$
#############################################################################
#
# Config file for test routines
#
# This file contains section with subsections.
# Sections are indicated by [<sect>], subsections by [<sect> - <subsect>:]
# (the colon is required).
#
# The first section _must_ be [main], the last two sections [validate]
# and [verbatim] (in this order).
# 
# [main] contains global data.
#
# Everything from the beginning of the [verbatim] section til the end of
# the file is copied as is into the generated C file.
#
# Each of the other sections decribe tests.
# For each subsection definitions can be but into the subsection label,
# eg.: [reinit - exist:
#        double fpar[2] = {0.,1.};
#        distr = unur_distr_normal(fpar,2);
#        par = unur_srou_new(distr);
#        gen = unur_init( par ); <-- ! NULL ]
# (the "<-- ! NULL" (in the same line) indicates, that the result should
# checked for invalid NULL pointer.)
# 
# The following names _must_ be used through out. 
#   distr ... for distribution objects.
#   par   ... for parameter objects.
#   gen   ... for generator objects.
# These there variables are declared automatically whenever they occur.
#
# Tests are separated by empty lines. Each test has the form
# [ <set of C calls> ] --> <name of test> [ --> <expected error code> ]
# (the first and the third part are optional).
#
# eg.:
#   unur_srou_new( distr ); 
#	--> expected_NULL --> UNUR_ERR_NULL
#
#
# Lines starting with # are ignored (comments).
# `#' can be inserted by using `\#'.
# 
# A ~ (tilde) at the beginning of a line is expanded to
# unur_<method>_<sect>.
# eg. in file srou.c, section [set]
#   ~_cdfatmode(par,0.); is equivalent to unur_srou_set_cdfatmode(par,0.);
#
#############################################################################
# 
# In section [main] the following must be present:
#
# type: of generator (cont|discr)
# eg.
#   type: cont
#
# distributions: which distributions should be used for testing
# It is a comma separated list to be inserted in if condition.
# These conditions are combined by &&.
# eg.
#   distributions: type & T_Tconcave, c_max >= -0.5
#
# urng: which uniform random number generator should be used for testing
# eg.
#   urng: mt19937(5678)
#
# The everything in the subsection [main - header:] is copied verbatim
# into the C file header. 
# eg. for prototypes for functions defined in section [verbatim].
#
# Moreover this subsection must contain the following to definitions:
#    static int COMPARE_SAMPLE_SIZE = 500; 
#    static int VIOLATE_SAMPLE_SIZE = 20;   /* or any appropriate samples size */
#
#############################################################################
#
# Section [validate] has a different structure. It describes tests for
# the implemented generators.
#
# The contain the following subsections:
#
# [validate - generators:]
#    List of generator types. Each type has to be declared by the 
#    corresponding UNURAN calls to build a parameter object.
#    Different types are separated by empty lines.
#    The parameter object must be called `par' or `par[x]', where `x'
#    is an integer. It can be used for numbering the objects. However
#    this is just for convinience since it is ignored when scanning
#    the file. internally the first parameter object that appear in
#    the file is labeled with `0' the second with `1', and so on.
#
#    IMPORTANT: the distribution object in the unur_..._new() call
#    has to be encoded by `@distr@'.
#    Example: to get a parameter object for method TDR and change
#    the parameter c you have to write:
#	par[0] = unur_tdr_new(@distr@);
#	unur_tdr_set_c(par[0],0.);
#
#
# [validate - distributions:]
#    List of distributions. Each distribution object has to be
#    declared by the corresponding UNURAN calls.
#    Different distibutions are separated by empty lines.
#    If a pointer to a double array is required use `darray'.
#    If an array for parameters of the PDF is required use `fpar'.
#    The distribution object must be called `distr[x]', where 
#    `x' is an integer. `x' is used to refer to this distribution
#    object. 
#
#    IMPORTANT: when there n distributions, all the `x' must be
#    different and run through 1,...,n. There is no checking! (However
#    the C compiler might complain.)
#
#
# [validate - test chi2:]
#    Contains a table which test has to be performed.
#    Each line starts with `<x>' where `x' indicates the number of the
#    distributions as declared in section [validate - distributions:].
#    One lines contains the tests that should be performed by with
#    a particular distribution.
#    Each line consists of the `<x>' marker followed by a list of
#    one character symbols. All entries are separated by white space
#    characters. There must be one symbol for each of the generator
#    types declared in subsection [validate - generators:] that
#    describes the expected result of the test when performed with the
#    choosen generator and the choosen distribution.
#    The following symbols can be used:
#	+    should pass test
#	0    should fail to initialize generator
#	-    should fail to iniialize or fail the test (not implemented yet)
#	.    do not run the test
#
#    Example:
#
#	#par	[0]	[1]	[2]
#	#---------------------------
#	<0>	 +	 +       .
#	<1>	 -	 +       0
#	<2>	 -	 +	 0
#	<3>	 +	 +	 -
#	<4>	 +	 -	 .
# 
#    That is: 
#	run test and expect that the test is passed for
#		distribution 0 with generator 0 and 1
#		distribution 1 with generator 1
#		distribution 2 with generator 1
#		distribution 3 with generator 0 and 1
#		distribution 4 with generator 0
#	expect that initialization of the generator fails
#		distribution 1 with generator 2
#		distribution 2 with generator 2
#	expect that initialization of the generator fails or
#	that the test is expected to fail for
#		distribution 1 with generator 0
#		distribution 2 with generator 0
#		distribution 3 with generator 2
#		distribution 4 with generator 1
#       do not run the test for
#		distribution 0 with generator 2
#		distribution 4 with generator 2
#		
#   Notice that the line		
#	#par	[0]	[1]	[2]
#   is just a comment line for convinience. Moreover the numbering
#   [0], [1], and [2] coincides with the order of definition in the
#   subsection [validate - generators:].
#
#############################################################################
#
# List of tests:
#
# --> expected_NULL
#     check if the last C call returns a NULL pointer
#
# --> expected_setfailed
#     check if the last set of chg call has failed
#
# --> expected_reinit
#     check if unur_reinit works
#
# --> compare_double_sequence_par_start
# --> compare_double_sequence_par
#     compare the random string of doubles generated from the last parameter 
#     element (ie. par must we given in the command list before the --> separator)
#     with the random string generated from by the last 
#     compare_double_sequence_par_start test.
#
# --> run_verify_generator
#     run a generator in the verifying mode.
# 
#############################################################################
