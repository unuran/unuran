# $Id$
#############################################################################

[main]

[main - data:]

# method
method: AROU

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(2098)

[main - header:]

/* prototypes */
double pdf( double x, UNUR_DISTR *distr );

double pdf_bimodal( double x, UNUR_DISTR *distr );
double dpdf_bimodal( double x, UNUR_DISTR *distr );

double pdf_negative( double x, UNUR_DISTR *distr );
double dpdf_negative( double x, UNUR_DISTR *distr );

double pdf_partnegative( double x, UNUR_DISTR *distr );
double dpdf_partnegative( double x, UNUR_DISTR *distr );

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_cont_new(); ]

/* pdf, dpdf */
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

/* dpdf */
unur_distr_cont_set_pdf(distr,pdf);
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_cpoints( par, 0, NULL );
	--> expected_setfailed --> UNUR_ERR_NULL

~_guidefactor( par, 1. );
	--> expected_setfailed --> UNUR_ERR_NULL

~_max_sqhratio( par, 0.95 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_max_segments( par, 100 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_center( par, 0. );
	--> expected_setfailed --> UNUR_ERR_NULL

~_usecenter( par, 1 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_pedantic( par, 1 );
	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_tdr_new(distr); ]

~_cpoints( par, 0, NULL );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_guidefactor( par, 1. );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_max_sqhratio( par, 0.95 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_max_segments( par, 100 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_center( par, 0. );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_usecenter( par, 1 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_pedantic( par, 1 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID


[set - invalid parameters:
   double stp[] = {1.,0.,1.};
   int n_stp = 3;
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_cpoints( par, -1, NULL );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_cpoints( par, n_stp, stp );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_guidefactor( par, -1. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_max_sqhratio( par, -1. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_max_sqhratio( par, 2. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_max_segments( par, 0 );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

#############################################################################

[get]

[get - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_tdr_new(distr);
   gen = unur_init(par); <-- ! NULL ]

~_sqhratio(gen);
        --> expected_setfailed --> UNUR_ERR_GEN_INVALID


#############################################################################

[chg]

#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL

[init - stp out of domain:
   double stp[] = {-2.5,-1.,0.,1.,2.5};
   int n_stp = 5;
   distr = unur_distr_normal(NULL,0);
   unur_distr_cont_set_domain(distr,-2.,2.);
   par = unur_arou_new(distr);
   unur_arou_set_cpoints( par, n_stp, stp ); ]

unur_init( par );
	--> none --> UNUR_ERR_GEN_DATA

[init - bimodal: 
   distr = unur_distr_cont_new();
   unur_distr_cont_set_pdf(distr,pdf_bimodal);
   unur_distr_cont_set_dpdf(distr,dpdf_bimodal);
   par = unur_arou_new(distr);
   unur_arou_set_cpoints( par, 30, NULL ); ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_CONDITION

[init - negative value of pdf:
   distr = unur_distr_cont_new();
   unur_distr_cont_set_pdf(distr,pdf_negative);
   unur_distr_cont_set_dpdf(distr,dpdf_negative);
   par = NULL; ]

par = unur_arou_new(distr);
unur_arou_set_cpoints( par, 30, NULL );
unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_DATA

unur_distr_cont_set_domain(distr,-2.,2.);
par = unur_arou_new(distr);
unur_arou_set_cpoints( par, 30, NULL );
unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_DATA

#############################################################################

[reinit]

#############################################################################

[sample]

[sample - partial negative value of pdf:
   int i;
   double x;
   double stp[] = {-0.9,0.9};
   int n_stp = 2;
   distr = unur_distr_cont_new();
   unur_distr_cont_set_pdf(distr,pdf_partnegative);
   unur_distr_cont_set_dpdf(distr,dpdf_partnegative);
   par = unur_arou_new(distr);
   unur_arou_set_cpoints( par, n_stp, stp );
   gen = unur_init( par ); <-- ! NULL ]

for (i=0; i<100; i++) { x = unur_sample_cont(gen); }
x;
	--> expected_INFINITY --> UNUR_ERR_GEN_CONDITION

[sample - compare:
   distr = unur_distr_normal(NULL,0); 
   par = NULL; ]

/* default algorithm */
par = unur_arou_new(distr);
        -->compare_double_sequence_par_start

/* verifying mode */
par = unur_arou_new(distr);
unur_arou_set_verify(par,1);
        -->compare_double_sequence_par


#############################################################################

[validate]

[validate - generators:]

# default program
par[0] = unur_arou_new(@distr@);

# small number squeeze hat ratio
par[1] = unur_arou_new(@distr@);
unur_arou_set_cpoints( par, 8, NULL );
unur_arou_set_max_sqhratio(par,0.5);

[validate - distributions:]

# Beta distributions
fpar[0] = 1.;
fpar[1] = 2.;
distr[0] = unur_distr_beta(fpar,2);

fpar[0] = 1.;
fpar[1] = 5.;
distr[1]= unur_distr_beta(fpar,2);

fpar[0] = 1.;
fpar[1] = 100.;
distr[2] = unur_distr_beta(fpar,2);

fpar[0] = 5.;
fpar[1] = 100.;
distr[3] = unur_distr_beta(fpar,2);

fpar[0] = 500.;
fpar[1] = 300.;
distr[4] = unur_distr_beta(fpar,2);

fpar[0] = 5.;
fpar[1] = 10.;
fpar[2] = -3.;
fpar[3] = 15.;
distr[5] = unur_distr_beta(fpar,4);

# Cauchy distributions
distr[6] = unur_distr_cauchy(NULL,0);

fpar[0] = 1.;
fpar[1] = 20.;
distr[7] = unur_distr_cauchy(fpar,2);

# Gamma distributions
fpar[0] = 1.;
distr[8] = unur_distr_gamma(fpar,1);

fpar[0] = 2.;
distr[9] = unur_distr_gamma(fpar,1);

fpar[0] = 3.;
distr[10] = unur_distr_gamma(fpar,1);

fpar[0] = 10.;
distr[11] = unur_distr_gamma(fpar,1);

fpar[0] = 1000.;
distr[12] = unur_distr_gamma(fpar,1);

fpar[0] = 5.;
fpar[1] = 1000.;
distr[13] = unur_distr_gamma(fpar,2);

fpar[0] = 5.;
fpar[1] = 1.e-5;
distr[14] = unur_distr_gamma(fpar,2);

fpar[0] = 5.;
fpar[1] = 10.;
fpar[2] = 1.e+5;
distr[15] = unur_distr_gamma(fpar,3);

# Normal distributions
distr[16] = unur_distr_normal(NULL,0);

fpar[0] = 1.;
fpar[1] = 1.e-5;
distr[17] = unur_distr_normal(fpar,2);

fpar[0] = 0.;
fpar[1] = 1.e+5;
distr[18] = unur_distr_normal(fpar,2);

# Uniform distributions
distr[19] = unur_distr_uniform(NULL,0);

fpar[0] = 1.;
fpar[1] = 20.;
distr[20] = unur_distr_uniform(fpar,2);

[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
#gen	[0]	[1]	# distribution
#---------------------------------------------
<0>	 +	 +	# beta
<1>	 +	 +	# beta
<2>	 +	 +	# beta
<3>	 +	 +	# beta
<4>	 +	 +	# beta
<5>	 +	 +	# beta
<6>	 +	 +	# cauchy
<7>	 +	 +	# cauchy
<8>	 +	 +	# gamma
<9>	 +	 +	# gamma
<10>	 +	 +	# gamma
<11>	 +	 +	# gamma
<12>	 +	 +	# gamma
<13>	 +	 +	# gamma
<14>	 +	 +	# gamma
<15>	 +	 +	# gamma
<16>	 +	 +	# normal
<17>	 +	 +	# normal
<18>	 +	 +	# normal
<19>	 +	 +	# uniform
<20>	 +	 +	# uniform


#############################################################################
#############################################################################

[verbatim]

/* pdf of bimodal density */
double pdf_bimodal( double x, UNUR_DISTR *distr )
{ 
	return ( exp(-(x-1.)*(x-1.)) + exp(-(x+1.)*(x+1.)) );
}
double dpdf_bimodal( double x, UNUR_DISTR *distr )
{ 
	return ( -2. * (x-1.) * exp(-(x-1.)*(x-1.)) -2. * (x+1.) * exp(-(x+1.)*(x+1.)) );
}

/* pdf with negative value */
double pdf_negative( double x, UNUR_DISTR *distr )  { return (-x*x); }
double dpdf_negative( double x, UNUR_DISTR *distr ) { return (-2.*x); }

/* pdf with partial negative value */
double pdf_partnegative( double x, UNUR_DISTR *distr )  
{ 
	return ((x>-0.89 && x<0.89) ? -1.: exp(-x*x)); 
}
double dpdf_partnegative( double x, UNUR_DISTR *distr ) 
{
	return ((x>-0.89 && x<0.89) ?0.: -2.*x*exp(-x*x));
}

/* pdf of bimodal density */
double pdf( double x, UNUR_DISTR *distr )
{ 
	return exp(-x*x/2.);
} /* end of pdf */

#############################################################################
