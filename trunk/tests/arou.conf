# $Id$
#############################################################################

[main]

[main - data:]

# method
method: AROU

# type of generator (cont|discr)
type: cont

# which distributions should be used for testing
# T-concave distributions with c <= -0.5
distributions: type & T_Tconcave, c_max >= -0.5

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(2098)

[main - header:]

/* prototypes */
double pdf( double x, UNUR_DISTR *distr );

double pdf_bimodal( double x, UNUR_DISTR *distr );
double dpdf_bimodal( double x, UNUR_DISTR *distr );

double pdf_negative( double x, UNUR_DISTR *distr );
double dpdf_negative( double x, UNUR_DISTR *distr );

double pdf_partnegative( double x, UNUR_DISTR *distr );
double dpdf_partnegative( double x, UNUR_DISTR *distr );

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_new(UNUR_DISTR_DISCR); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_new(UNUR_DISTR_CONT); ]

/* pdf, dpdf */
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

/* dpdf */
unur_distr_cont_set_pdf(distr,pdf);
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_cpoints( par, 0, NULL );
	--> expected_setfailed --> UNUR_ERR_NULL

~_guidefactor( par, 1. );
	--> expected_setfailed --> UNUR_ERR_NULL

~_max_sqhratio( par, 0.95 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_max_segments( par, 100 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_center( par, 0. );
	--> expected_setfailed --> UNUR_ERR_NULL

~_usecenter( par, 1 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_NULL

#~_pedantic( par, 1 );
#	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_tdr_new(distr); ]

~_cpoints( par, 0, NULL );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_guidefactor( par, 1. );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_max_sqhratio( par, 0.95 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_max_segments( par, 100 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_center( par, 0. );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_usecenter( par, 1 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

#~_pedantic( par, 1 );
#	--> expected_setfailed --> UNUR_ERR_PAR_INVALID


[set - invalid parameters:
   double stp[] = {1.,0.,1.};
   int n_stp = 3;
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_cpoints( par, -1, NULL );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_cpoints( par, n_stp, stp );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_guidefactor( par, -1. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_max_sqhratio( par, -1. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_max_sqhratio( par, 2. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_max_segments( par, 0 );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

#############################################################################

[get]

[get - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_tdr_new(distr);
   gen = unur_init(par); <-- ! NULL ]

#~_sqhratio(gen);
#        --> expected_setfailed --> UNUR_ERR_GEN_INVALID


#############################################################################

[chg]

#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL

[init - stp out of domain:
   double stp[] = {-2.5,-1.,0.,1.,2.5};
   int n_stp = 5;
   distr = unur_distr_normal(NULL,0);
   unur_distr_cont_set_domain(distr,-2.,2.);
   par = unur_arou_new(distr);
   unur_arou_set_cpoints( par, n_stp, stp ); ]

unur_init( par );
	--> none --> UNUR_ERR_GEN_DATA

[init - bimodal: 
   distr = unur_distr_new(UNUR_DISTR_CONT); 
   unur_distr_cont_set_pdf(distr,pdf_bimodal);
   unur_distr_cont_set_dpdf(distr,dpdf_bimodal);
   par = unur_arou_new(distr);
   unur_arou_set_cpoints( par, 30, NULL ); ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_CONDITION

[init - wrong mode:
   distr = unur_distr_normal(NULL,0);
   par = NULL; ]

unur_distr_cont_set_mode(distr,-1.);
par = unur_arou_new(distr);
unur_arou_set_cpoints( par, 30, NULL );
unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_DATA

unur_distr_cont_set_mode(distr,1.);
par = unur_arou_new(distr);
unur_arou_set_cpoints( par, 30, NULL );
unur_init( par );
	--> none --> UNUR_ERR_GEN_DATA

[init - negative value of pdf:
   distr = unur_distr_new(UNUR_DISTR_CONT); 
   unur_distr_cont_set_pdf(distr,pdf_negative);
   unur_distr_cont_set_dpdf(distr,dpdf_negative);
   par = NULL; ]

par = unur_arou_new(distr);
unur_arou_set_cpoints( par, 30, NULL );
unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_DATA

unur_distr_cont_set_domain(distr,-2.,2.);
par = unur_arou_new(distr);
unur_arou_set_cpoints( par, 30, NULL );
unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_DATA

#############################################################################

[reinit]

[reinit - exist:
   distr = unur_distr_normal(NULL,0);
   par = unur_arou_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

unur_reinit( gen );
	--> expected_no_reinit

#############################################################################

[sample]

[sample - partial negative value of pdf:
   int i;
   double x;
   double stp[] = {-0.9,0.9};
   int n_stp = 2;
   distr = unur_distr_new(UNUR_DISTR_CONT); 
   unur_distr_cont_set_pdf(distr,pdf_partnegative);
   unur_distr_cont_set_dpdf(distr,dpdf_partnegative);
   par = unur_arou_new(distr);
   unur_arou_set_cpoints( par, n_stp, stp );
   gen = unur_init( par ); <-- ! NULL ]

for (i=0; i<100; i++) { x = unur_sample_cont(gen); }
x;
	--> expected_INFINITY --> UNUR_ERR_GEN_CONDITION


#############################################################################

[validate]


#############################################################################
#############################################################################

[verbatim]

/* pdf of bimodal density */
double pdf_bimodal( double x, UNUR_DISTR *distr )
{ 
	return ( exp(-(x-1.)*(x-1.)) + exp(-(x+1.)*(x+1.)) );
}
double dpdf_bimodal( double x, UNUR_DISTR *distr )
{ 
	return ( -2. * (x-1.) * exp(-(x-1.)*(x-1.)) -2. * (x+1.) * exp(-(x+1.)*(x+1.)) );
}

/* pdf with negative value */
double pdf_negative( double x, UNUR_DISTR *distr )  { return (-x*x); }
double dpdf_negative( double x, UNUR_DISTR *distr ) { return (-2.*x); }

/* pdf with partial negative value */
double pdf_partnegative( double x, UNUR_DISTR *distr )  
{ 
	return ((x>-0.89 && x<0.89) ? -1.: exp(-x*x)); 
}
double dpdf_partnegative( double x, UNUR_DISTR *distr ) 
{
	return ((x>-0.89 && x<0.89) ?0.: -2.*x*exp(-x*x));
}

/* pdf of bimodal density */
double pdf( double x, UNUR_DISTR *distr )
{ 
	return exp(-x*x/2.);
} /* end of pdf */

#############################################################################
