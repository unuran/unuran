# $Id$
#############################################################################

[main]

[main - data:]

# method
method: CORDER

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(2995)

[main - header:]

/* prototypes */

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

unur_distr_corder_new( distr, 5, 2 );
	 --> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

unur_distr_corder_new( distr, 5, 2 );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - invalid order statistics:
   UNUR_DISTR *os;
   distr = unur_distr_normal(NULL,0);
   os = unur_distr_corder_new( distr, 5, 2 ); ]

unur_distr_corder_new( os, 5, 2 );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - invalid parameter:
   UNUR_DISTR *os;
   distr = unur_distr_normal(NULL,0);
   os = unur_distr_corder_new( distr, 5, 2 ); ]

unur_distr_corder_new( os, 5, 10 );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

unur_distr_corder_new( os, 1, 0 );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID


#############################################################################

[set]

[set - invalid NULL ptr: 
   distr = NULL; ]

unur_distr_corder_set_rank( distr, 5, 2 );
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid distribution object:
   distr = unur_distr_normal(NULL,0); ]

unur_distr_corder_set_rank( distr, 5, 2 );
	--> expected_setfailed --> UNUR_ERR_DISTR_INVALID

[set - invalid parameters:
   UNUR_DISTR *os;
   distr = unur_distr_normal(NULL,0);
   os = unur_distr_corder_new( distr, 5, 2 ); ]

unur_distr_corder_set_rank( distr, 5, 20 );
	--> expected_setfailed --> UNUR_ERR_DISTR_INVALID

#############################################################################

[get]

[get - invalid distribution object:
   int n, k;
   distr = unur_distr_normal(NULL,0); ]

(int) unur_distr_corder_get_distribution( distr )
	--> expected_setfailed --> UNUR_ERR_DISTR_INVALID

unur_distr_corder_get_rank( distr, &n, &k )
	--> expected_setfailed --> UNUR_ERR_DISTR_INVALID


#############################################################################

[chg]

#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

#############################################################################

[validate]

[validate - generators:]

# TDR
par[0] = unur_tdr_new(@distr@);

# AROU
par[1] = unur_arou_new(@distr@);

# NINV
par[4] = unur_ninv_new(@distr@);

[validate - distributions:]

# Beta distributions
fpm[0] = 1.;
fpm[1] = 2.;
distr[0] = unur_distr_corder_new( unur_distr_beta(fpm,2), 10, 8);

fpm[0] = 3.;
fpm[1] = 4.;
distr[1] = unur_distr_corder_new( unur_distr_beta(fpm,2), 10, 8);

fpm[0] = 5.;
fpm[1] = 100.;
distr[2] = unur_distr_corder_new( unur_distr_beta(fpm,2), 10, 8);

# Cauchy distributions
distr[3] = unur_distr_corder_new( unur_distr_cauchy(NULL,0), 10, 8);

# Gamma distributions
fpm[0] = 1.;
distr[4] = unur_distr_corder_new( unur_distr_gamma(fpm,1), 10, 8);

fpm[0] = 2.;
distr[5] = unur_distr_corder_new( unur_distr_gamma(fpm,1), 10, 8);

fpm[0] = 3.;
distr[6] = unur_distr_corder_new( unur_distr_gamma(fpm,1), 10, 8);


fpm[0] = 10.;
distr[7] = unur_distr_corder_new( unur_distr_gamma(fpm,1), 10, 8);

fpm[0] = 100.;
distr[8] = unur_distr_corder_new( unur_distr_gamma(fpm,1), 10, 8);

# Normal distributions
distr[9] = unur_distr_corder_new( unur_distr_normal(NULL,0), 10, 8);

fpm[0] = 1.;
fpm[1] = 0.01;
distr[10] = unur_distr_corder_new( unur_distr_normal(fpm,2), 10, 8);

fpm[0] = 0.;
fpm[1] = 100.;
distr[11] = unur_distr_corder_new( unur_distr_normal(fpm,2), 10, 8);

# Uniform distributions
distr[12] = unur_distr_corder_new( unur_distr_uniform(NULL,0), 10, 8);

# truncated distributions
distr[13] = unur_distr_corder_new( unur_distr_cauchy(NULL,0), 10, 8);
unur_distr_cont_set_domain(distr[13],0.1,1.);
unur_distr_cont_upd_pdfarea(distr[13]);

{UNUR_DISTR *d;
d = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(d,0.1,1.);
unur_distr_cont_upd_mode(d);
unur_distr_cont_upd_pdfarea(d);
distr[14] = unur_distr_corder_new( d, 10, 8);}

[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0] TDR
#   [1] AROU
#   [2] NINV
#
#	[0]  [1]  [2]	# distribution
#-----------------------------------------------------
<0>	 +    +    .	# beta (1, 2)
<1>	 +    +    .	# beta (3, 4)
<2>	 +    +    .	# beta (5, 100)
<3>	 +    +    .	# cauchy ()
<4>	 +    +    .	# gamma (1)
<5>	 +    +    .	# gamma (2)
<6>	 +    +    .	# gamma (3)
<7>	 +    +    .	# gamma (10)
<8>	 .    .    .	# gamma (100)
<9>	 +    +    .	# normal ()
<10>     .    .    .	# normal (1, 0.01)
<11>	 +    .    .	# normal (0, 100)
<12>	 +    +    .	# uniform ()

<13>	 +    +    .	# cauchy () - truncated
<14>	 +    +    .	# cauchy () - truncated

#############################################################################
#############################################################################

[verbatim]

#############################################################################



