# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: CSTD

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(2097)

[main - header:]

/* prototypes */

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - not a standard distribution:
   distr = unur_distr_cont_new(); ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_INVALID

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_variant(par,1);
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_variant(par,1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

[set - invalid parameters:
   distr = unur_distr_normal(NULL,0);
   par = unur_cstd_new(distr); ]

~_variant(par,9999);
	--> expected_setfailed --> UNUR_ERR_PAR_VARIANT

#############################################################################

[get]

#############################################################################

[chg]

[chg - invalid generator object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_pdfparams(gen, fpar, 2);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_truncated(gen, 0., 1.);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID


[chg - invalid parameters:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_cstd_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

~_pdfparams(gen,NULL,1);
	--> expected_setfailed --> UNUR_ERR_NULL

~_pdfparams(gen,fpar,UNUR_DISTR_MAXPARAMS+10);
	--> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS

~_pdfparams(gen,fpar,-1);
	--> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS


#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL


#############################################################################

[reinit]

#############################################################################

[sample]

#############################################################################

[validate]

[validate - generators:]

# inversion      
par[0] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,UNUR_STDGEN_INVERSION)) { par = NULL; }

par[1] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,1)) { par = NULL; }

par[2] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,2)) { par = NULL; }

par[3] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,3)) { par = NULL; }

par[4] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,4)) { par = NULL; }

par[5] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,5)) { par = NULL; }

par[6] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,6)) { par = NULL; }

par[7] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,7)) { par = NULL; }

par[8] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,8)) { par = NULL; }

par[9] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,9)) { par = NULL; }

# change domain
par[10] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,UNUR_STDGEN_INVERSION)) { par = NULL; }
unur_cstd_chg_truncated(gen,0.5,0.55);

[validate - distributions:]

# Beta distributions
fpm[0] = 1.;
fpm[1] = 2.;
distr[0] = unur_distr_beta(fpm,2);

fpm[0] = 1.;
fpm[1] = 5.;
distr[1] = unur_distr_beta(fpm,2);

fpm[0] = 1.;
fpm[1] = 100.;
distr[2] = unur_distr_beta(fpm,2);

fpm[0] = 3.;
fpm[1] = 4.;
distr[3] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 100.;
distr[4] = unur_distr_beta(fpm,2);

fpm[0] = 500.;
fpm[1] = 300.;
distr[5] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = -3.;
fpm[3] = 15.;
distr[6] = unur_distr_beta(fpm,4);

# Cauchy distributions
distr[7] = unur_distr_cauchy(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[8] = unur_distr_cauchy(fpm,2);

# Gamma distributions
fpm[0] = 1.;
distr[9] = unur_distr_gamma(fpm,1);

fpm[0] = 2.;
distr[10] = unur_distr_gamma(fpm,1);

fpm[0] = 3.;
distr[11] = unur_distr_gamma(fpm,1);

fpm[0] = 10.;
distr[12] = unur_distr_gamma(fpm,1);

fpm[0] = 1000.;
distr[13] = unur_distr_gamma(fpm,1);

fpm[0] = 5.;
fpm[1] = 1000.;
distr[14] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 1.e-5;
distr[15] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = 1000;
distr[16] = unur_distr_gamma(fpm,3);

# Normal distributions
distr[17] = unur_distr_normal(NULL,0);

fpm[0] = 1.;
fpm[1] = 1.e-5;
distr[18] = unur_distr_normal(fpm,2);

fpm[0] = 0.;
fpm[1] = 1.e+5;
distr[19] = unur_distr_normal(fpm,2);

# Uniform distributions
distr[20] = unur_distr_uniform(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[21] = unur_distr_uniform(fpm,2);

# truncated distributions
distr[22] = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(distr[22],0.1,1.);
unur_distr_cont_upd_mode(distr[22]);
unur_distr_cont_upd_pdfarea(distr[22]);


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator (given variant does not exist)
#  - ... fail test
#  / ... either init fails or test passes
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0]         ... Inversion
#   [1] -- [9]  ... Variants 1 to 9
#   [10]        ... inversion domain changed after initialization
#
#                                               1
#gen	0   1   2   3   4   5   6   7   8   9   0	# distribution
#-------------------------------------------------------------
<0>	/   .   .   .   .   .   .   .   .   .	/	# beta (1, 2)
<1>	/   .   .   .   .   .   .   .   .   .	/	# beta (1, 5)
<2>	/   .   .   .   .   .   .   .   .   .	.	# beta (1, 100)
<3>	/   .   .   .   .   .   .   .   .   .	/	# beta (3, 4)
<4>	/   .   .   .   .   .   .   .   .   .	.	# beta (5, 100)
<5>	/   .   .   .   .   .   .   .   .   .	/	# beta (500, 300)
<6>	/   .   .   .   .   .   .   .   .   .	/	# beta (5, 10, -3, 15)
<7>	+   0   0   0   0   0   0   0   0   0	+	# cauchy ()
<8>	+   0   0   0   0   0   0   0   0   0	+	# cauchy (1, 20)
<9>	/   +   +   0   0   0   0   0   0   0	/	# gamma (1)
<10>	/   +   +   0   0   0   0   0   0   0	/	# gamma (2)
<11>	/   +   +   0   0   0   0   0   0   0	/	# gamma (3)
<12>	/   +   +   0   0   0   0   0   0   0	/	# gamma (10)
<13>	/   +   +   0   0   0   0   0   0   0	.	# gamma (1000)
<14>	/   +   +   0   0   0   0   0   0   0	.	# gamma (5, 1000, 0)
<15>	/   +   +   0   0   0   0   0   0   0	.	# gamma (5, 1e-05, 0)
<16> 	/   +   +   0   0   0   0   0   0   0	.	# gamma (5, 10, 100000)
<17>	/   +   +   +   +   +   +   +   0   0	/	# normal ()
<18>	/   +   +   +   +   +   +   +   0   0	.	# normal (1, 1e-05)
<19>	/   +   +   +   +   +   +   +   0   0	/	# normal (1, 1e+05)
<20>	+   0   0   0   0   0   0   0   0   0	+	# uniform ()
<21>	+   0   0   0   0   0   0   0   0   0	.	# uniform (1, 20)
<22>	+   0   0   0   0   0   0   0   0   0	+	# cauchy () - truncated



[validate - timing:]

#  + ... pass test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0]         ... Inversion
#   [1] -- [9]  ... Variants 1 to 9
#   [10]        ... domain changed after initialization
#
#                                               1
#gen	0   1   2   3   4   5   6   7   8   9   0	# distribution
#-------------------------------------------------------------
<0>	2   .   .   .   .   .   .   .   .   .	.	# beta (1, 2)
<1>	2   .   .   .   .   .   .   .   .   .	.	# beta (1, 5)
<2>	2   .   .   .   .   .   .   .   .   .	.	# beta (1, 100)
<3>	2   .   .   .   .   .   .   .   .   .	.	# beta (3, 4)
<4>	2   .   .   .   .   .   .   .   .   .	.	# beta (5, 100)
<5>	2   .   .   .   .   .   .   .   .   .	.	# beta (500, 300)
<6>	2   .   .   .   .   .   .   .   .   .	.	# beta (5, 10, -3, 15)
<7>	+   .   .   .   .   .   .   .   .   .	.	# cauchy ()
<8>	+   .   .   .   .   .   .   .   .   .	.	# cauchy (1, 20)
<9>	3   +   +   .   .   .   .   .   .   .	.	# gamma (1)
<10>	3   +   +   .   .   .   .   .   .   .	.	# gamma (2)
<11>	3   +   +   .   .   .   .   .   .   .	.	# gamma (3)
<12>	3   +   +   .   .   .   .   .   .   .	.	# gamma (10)
<13>	3   +   +   .   .   .   .   .   .   .	.	# gamma (1000)
<14>	3   +   +   .   .   .   .   .   .   .	.	# gamma (5, 1000, 0)
<15>	3   +   +   .   .   .   .   .   .   .	.	# gamma (5, 1e-05, 0)
<16> 	3   +   +   .   .   .   .   .   .   .	.	# gamma (5, 10, 100000)
<17>	+   +   +   +   +   +   +   +   .   .	.	# normal ()
<18>	+   +   +   +   +   +   +   +   .   .	.	# normal (1, 1e-05)
<19>	+   +   +   +   +   +   +   +   .   .	.	# normal (1, 1e+05)
<20>	+   .   .   .   .   .   .   .   .   . 	.	# uniform ()
<21>	+   .   .   .   .   .   .   .   .   .	.	# uniform (1, 20)

<22>	.   .   .   .   .   .   .   .   .   .	.	# cauchy () - truncated


#############################################################################
#############################################################################

[verbatim]

#############################################################################
