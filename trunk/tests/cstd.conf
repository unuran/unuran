# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: CSTD

[main - header:]

/* prototypes */

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - not a standard distribution:
   distr = unur_distr_cont_new(); ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_INVALID

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_variant(par,1);
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_variant(par,1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

free(par);

[set - invalid parameters:
   distr = unur_distr_normal(NULL,0);
   par = unur_cstd_new(distr); ]

~_variant(par,9999);
	--> expected_setfailed --> UNUR_ERR_PAR_VARIANT

free(par);

#############################################################################

[get]

#############################################################################

[chg]

[chg - invalid generator object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_pdfparams(gen, fpar, 2);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_truncated(gen, 0., 1.);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID


[chg - invalid parameters:
   double fpar[2] = {4.,1.};
   distr = unur_distr_gamma(fpar,2);
   par = unur_cstd_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

~_pdfparams(gen,NULL,1);
	--> expected_setfailed --> UNUR_ERR_NULL

~_pdfparams(gen,fpar,UNUR_DISTR_MAXPARAMS+10);
	--> none --> UNUR_ERR_DISTR_NPARAMS

~_pdfparams(gen,fpar,-1);
	--> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS


#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL


#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare clone:
   UNUR_GEN *clone;
   distr = unur_distr_normal(NULL,0); 
   par = NULL;
   gen = NULL; ]

/* original generator object */
par = unur_cstd_new(distr);
gen = unur_init(par);
        -->compare_double_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_double_sequence_gen


#############################################################################

[validate]

[validate - generators:]

# inversion      
par[0] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,UNUR_STDGEN_INVERSION)) { if (par) free(par); par = NULL; }

par[1] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,1)) { if (par) free(par); par = NULL; }

par[2] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,2)) { if (par) free(par); par = NULL; }

par[3] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,3)) { if (par) free(par); par = NULL; }

par[4] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,4)) { if (par) free(par); par = NULL; }

par[5] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,5)) { if (par) free(par); par = NULL; }

par[6] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,6)) { if (par) free(par); par = NULL; }

par[7] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,7)) { if (par) free(par); par = NULL; }

par[8] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,8)) { if (par) free(par); par = NULL; }

par[9] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,9)) { if (par) free(par); par = NULL; }

# change domain
par[10] = unur_cstd_new(@distr@);
if (!unur_cstd_set_variant(par,UNUR_STDGEN_INVERSION)) { if (par) free(par); par = NULL; }
unur_cstd_chg_truncated(gen,0.5,0.55);

# change parameters (use default variant)
par[11] = unur_cstd_new(@distr@);
fpm[0] = 2.;
fpm[1] = 5.;
unur_cstd_chg_pdfparams(gen,fpm,2);


[validate - distributions:]

# Beta distributions
fpm[0] = 1.;
fpm[1] = 2.;
distr[0] = unur_distr_beta(fpm,2);

fpm[0] = 1.;
fpm[1] = 5.;
distr[1] = unur_distr_beta(fpm,2);

fpm[0] = 7.;
fpm[1] = 0.1;
distr[60] = unur_distr_beta(fpm,2);

fpm[0] = 0.7;
fpm[1] = 0.1;
distr[61] = unur_distr_beta(fpm,2);

fpm[0] = 7.;
fpm[1] = 0.1;
fpm[3] = -1.;
fpm[4] = 2.;
distr[62] = unur_distr_beta(fpm,4);

fpm[0] = 1.;
fpm[1] = 100.;
distr[2] = unur_distr_beta(fpm,2);

fpm[0] = 3.;
fpm[1] = 4.;
distr[3] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 100.;
distr[4] = unur_distr_beta(fpm,2);

fpm[0] = 500.;
fpm[1] = 300.;
distr[5] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = -3.;
fpm[3] = 15.;
distr[6] = unur_distr_beta(fpm,4);

# Cauchy distributions
distr[7] = unur_distr_cauchy(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[8] = unur_distr_cauchy(fpm,2);

# Chi distribution
fpm[0] = 0.5;
distr[23] = unur_distr_chi(fpm,1);

fpm[0] = 1.;
distr[24] = unur_distr_chi(fpm,1);

fpm[0] = 2.;
distr[25] = unur_distr_chi(fpm,1);

fpm[0] = 50.;
distr[26] = unur_distr_chi(fpm,1);

# Exponential distribution
distr[27] = unur_distr_exponential(NULL,0);

fpm[0] = 0.5;
distr[28] = unur_distr_exponential(fpm,1);

fpm[0] = 5.;
fpm[1] = -3.;
distr[29] = unur_distr_exponential(fpm,2);

# Extreme value type I
distr[30] = unur_distr_extremeI(NULL,0);

fpm[0] = -3.;
distr[31] = unur_distr_extremeI(fpm,1);

fpm[0] = -1.;
fpm[1] = 5.;
distr[32] = unur_distr_extremeI(fpm,2);

# Extreme value type II
fpm[0] = 3.;
distr[33] = unur_distr_extremeII(fpm,1);

fpm[0] = 0.5;
fpm[1] = -3.;
distr[34] = unur_distr_extremeII(fpm,2);

fpm[0] = 0.8;
fpm[1] = -1.;
fpm[2] = 5.;
distr[35] = unur_distr_extremeII(fpm,3);

# Gamma distributions
fpm[0] = 1.;
distr[9] = unur_distr_gamma(fpm,1);

fpm[0] = 2.;
distr[10] = unur_distr_gamma(fpm,1);

fpm[0] = 3.;
distr[11] = unur_distr_gamma(fpm,1);

fpm[0] = 10.;
distr[12] = unur_distr_gamma(fpm,1);

fpm[0] = 1000.;
distr[13] = unur_distr_gamma(fpm,1);

fpm[0] = 5.;
fpm[1] = 1000.;
distr[14] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 1.e-5;
distr[15] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = 1000;
distr[16] = unur_distr_gamma(fpm,3);

fpm[0] = 0.5;
distr[63] = unur_distr_gamma(fpm,1);

fpm[0] = 0.2;
distr[64] = unur_distr_gamma(fpm,1);

# Laplace distribution
distr[36] = unur_distr_laplace(NULL,0);

fpm[0] = -3.;
distr[37] = unur_distr_laplace(fpm,1);

fpm[0] = -1.;
fpm[1] = 5.;
distr[38] = unur_distr_laplace(fpm,2);

# Logistic distribution
distr[39] = unur_distr_logistic(NULL,0);

fpm[0] = -3.;
distr[40] = unur_distr_logistic(fpm,1);

fpm[0] = -1.;
fpm[1] = 5.;
distr[41] = unur_distr_logistic(fpm,2);

# Lomax
fpm[0] = 2.;
fpm[1] = 3.;
distr[56] = unur_distr_lomax(fpm,2);

fpm[0] = 20.;
fpm[1] = 0.4;
distr[57] = unur_distr_lomax(fpm,2);

fpm[0] = 0.2;
fpm[1] = 40.;
distr[58] = unur_distr_lomax(fpm,2);

fpm[0] = 0.2;
fpm[1] = 0.5;
distr[59] = unur_distr_lomax(fpm,2);

# Normal distributions
distr[17] = unur_distr_normal(NULL,0);

fpm[0] = 1.;
fpm[1] = 1.e-5;
distr[18] = unur_distr_normal(fpm,2);

fpm[0] = 0.;
fpm[1] = 1.e+5;
distr[19] = unur_distr_normal(fpm,2);

# Pareto
fpm[0] = 2.;
fpm[1] = 3.;
distr[52] = unur_distr_pareto(fpm,2);

fpm[0] = 20.;
fpm[1] = 0.4;
distr[53] = unur_distr_pareto(fpm,2);

fpm[0] = 0.2;
fpm[1] = 40.;
distr[54] = unur_distr_pareto(fpm,2);

fpm[0] = 0.2;
fpm[1] = 0.5;
distr[55] = unur_distr_pareto(fpm,2);

# Power exponential distribution
fpm[0] = 0.5;
distr[42] = unur_distr_powerexponential(fpm,1);

fpm[0] = 1.;
distr[43] = unur_distr_powerexponential(fpm,1);

fpm[0] = 2.;
distr[44] = unur_distr_powerexponential(fpm,1);

fpm[0] = 10.;
distr[45] = unur_distr_powerexponential(fpm,1);

# Triangular
fpm[0] = 0.7;
distr[46] = unur_distr_triangular(fpm,1);

fpm[0] = 0.;
distr[47] = unur_distr_triangular(fpm,1);

fpm[0] = 1.;
distr[48] = unur_distr_triangular(fpm,1);

# Uniform distributions
distr[20] = unur_distr_uniform(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[21] = unur_distr_uniform(fpm,2);

# Weibull
fpm[0] = 3.;
distr[49] = unur_distr_weibull(fpm,1);

fpm[0] = 0.5;
fpm[1] = 3.;
distr[50] = unur_distr_weibull(fpm,2);

fpm[0] = 1.5;
fpm[1] = 2.;
fpm[2] = -5.;
distr[51] = unur_distr_weibull(fpm,3);


# truncated distributions
distr[22] = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(distr[22],0.1,1.);
unur_distr_cont_upd_mode(distr[22]);
unur_distr_cont_upd_pdfarea(distr[22]);

# number of distributions: 65

[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator (given variant does not exist)
#  - ... fail test
#  / ... either init fails or test passes
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0]         ... Inversion
#   [1] -- [9]  ... Variants 1 to 9
#   [10]        ... inversion domain changed after initialization
#   [11]        ... change parameters to {2., 5.}  (use default variant)
#
#                                               1   1
#gen	0   1   2   3   4   5   6   7   8   9   0   1	# distribution
#-------------------------------------------------------------
#<0>	.   +   .   .   .   .   .   .   .   .	.   .	# beta (1, 2)
#<1>	.   +   .   .   .   .   .   .   .   .	.   .	# beta (1, 5)
#<2>	.   +   .   .   .   .   .   .   .   .	.   .	# beta (1, 100)
#<3>	.   +   .   .   .   .   .   .   .   .	.   .	# beta (3, 4)
#<60>	.   +   .   .   .   .   .   .   .   .	.   .	# beta (7, 0.1)
#<61>	.   +   +   .   .   .   .   .   .   .	.   .	# beta (0.7, 0.1)
#<62>	.   +   +   .   .   .   .   .   .   .	.   .	# beta (7, 0.1, -1, 2)
#<4>	.   +   .   .   .   .   .   .   .   .	.   .	# beta (5, 100)
#<5>	.   +   .   .   .   .   .   .   .   .	.   .	# beta (500, 300)
#<6>	.   +   .   .   .   .   .   .   .   .	.   .	# beta (5, 10, -3, 15)
<7>	+   .   .   .   .   .   .   .   .   .	+   +	# cauchy ()
<8>	+   .   .   .   .   .   .   .   .   .	+   +	# cauchy (1, 20)
<23>    .   -   .   .   .   .   .   .   .   .   .   .   # chi (0.5)
<24>    .   +   .   .   .   .   .   .   .   .   .   +   # chi (1)
<25>    .   +   .   .   .   .   .   .   .   .   .   .   # chi (2)
<26>    .   +   .   .   .   .   .   .   .   .   .   +   # chi (50)
<27>	+   .   .   .   .   .   .   .   .   .	+   +	# exponential ()
<28>	+   .   .   .   .   .   .   .   .   .	+   +	# exponential (0.5)
<29>	+   .   .   .   .   .   .   .   .   .	+   +	# exponential (5, -3)
<30>	+   .   .   .   .   .   .   .   .   .	+   +	# extremeI ()
<31>	+   .   .   .   .   .   .   .   .   .	+   +	# extremeI (-3)
<32>	+   .   .   .   .   .   .   .   .   .	+   +	# extremeI (-1, 5)
<33>	+   .   .   .   .   .   .   .   .   .	+   +	# extremeII (3)
<34>	+   .   .   .   .   .   .   .   .   .	+   +	# extremeII (0.5, -3)
<35>	+   .   .   .   .   .   .   .   .   .	+   +	# extremeII (0.8, -1, 5)
<9>	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (1)
<10>	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (2)
<11>	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (3)
<12>	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (10)
<13>	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (1000)
<14>	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (5, 1000, 0)
<15>	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (5, 1e-05, 0)
<16> 	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (5, 10, 100000)
<63>	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (0.5)
<64>	.   +   +   .   .   .   .   .   .   .	.   +	# gamma (0.2)
<36>	+   .   .   .   .   .   .   .   .   .	+   +	# laplace ()
<37>	+   .   .   .   .   .   .   .   .   .	+   +	# laplace (-3)
<38>	+   .   .   .   .   .   .   .   .   .	+   +	# laplace (-1, 5)
<39>	+   .   .   .   .   .   .   .   .   .	+   +	# logistic ()
<40>	+   .   .   .   .   .   .   .   .   .	+   +	# logistic (-3)
<41>	+   .   .   .   .   .   .   .   .   .	+   +	# logistic (-1, 5)
<56>    +   .   .   .   .   .   .   .   .   .   +   +   # lomax (2, 3)
<57>    +   .   .   .   .   .   .   .   .   .   +   +   # lomax (20, 0.4)
<58>    +   .   .   .   .   .   .   .   .   .   +   +   # lomax (0.2, 40)
<59>    +   .   .   .   .   .   .   .   .   .   +   +   # lomax (0.2, 0.5)
<17>	/   +   +   +   +   +   +   +   .   .	/   +	# normal ()
<18>	/   +   +   +   +   +   +   +   .   .	.   +	# normal (1, 1e-05)
<19>	/   +   +   +   +   +   +   +   .   .	/   +	# normal (1, 1e+05)
<52>    +   .   .   .   .   .   .   .   .   .   .   +   # pareto (2, 3)
<53>    +   .   .   .   .   .   .   .   .   .   .   +   # pareto (20, 0.4)
<54>    +   .   .   .   .   .   .   .   .   .   .   +   # pareto (0.2, 40)
<55>    +   .   .   .   .   .   .   .   .   .   +   +   # pareto (0.2, 0.5)
<42>    .   -   .   .   .   .   .   .   .   .   .   .   # powerexponential (0.5)
<43>    .   +   .   .   .   .   .   .   .   .   .   +   # powerexponential (1)
<44>    .   +   .   .   .   .   .   .   .   .   .   .   # powerexponential (2)
<45>    .   +   .   .   .   .   .   .   .   .   .   .   # powerexponential (10)
<46>    +   .   .   .   .   .   .   .   .   .   +   .   # triangular (0.7)
<47>    +   .   .   .   .   .   .   .   .   .   +   .   # triangular (0)
<48>    +   .   .   .   .   .   .   .   .   .   +   .   # triangular (1)
<49>    +   .   .   .   .   .   .   .   .   .   +   +   # weibull (3)
<50>    +   .   .   .   .   .   .   .   .   .   +   +   # weibull (0.5, 3)
<51>    +   .   .   .   .   .   .   .   .   .   +   +   # weibull (3)
<20>	+   .   .   .   .   .   .   .   .   .	+   +	# uniform (1.5, 2, -5)
<21>	+   .   .   .   .   .   .   .   .   .	.   +	# uniform (1, 20)
<22>	+   .   .   .   .   .   .   .   .   .	+   +	# cauchy () - truncated


[validate - timing:]

#  + ... pass test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0]         ... Inversion
#   [1] -- [9]  ... Variants 1 to 9
#   [10]        ... domain changed after initialization
#   [11]        ... change parameters to {2., 5.}  (use default variant)
#
#                                               1   1
#gen	0   1   2   3   4   5   6   7   8   9   0   1	# distribution
#-------------------------------------------------------------
<0>	2   .   .   .   .   .   .   .   .   .	.   .	# beta (1, 2)
<1>	2   .   .   .   .   .   .   .   .   .	.   .	# beta (1, 5)
<2>	2   .   .   .   .   .   .   .   .   .	.   .	# beta (1, 100)
<3>	2   .   .   .   .   .   .   .   .   .	.   .	# beta (3, 4)
<4>	2   .   .   .   .   .   .   .   .   .	.   .	# beta (5, 100)
<5>	2   .   .   .   .   .   .   .   .   .	.   .	# beta (500, 300)
<6>	2   .   .   .   .   .   .   .   .   .	.   .	# beta (5, 10, -3, 15)
<7>	+   .   .   .   .   .   .   .   .   .	.   .	# cauchy ()
<8>	+   .   .   .   .   .   .   .   .   .	.   .	# cauchy (1, 20)
<9>	3   +   +   .   .   .   .   .   .   .	.   .	# gamma (1)
<10>	3   +   +   .   .   .   .   .   .   .	.   .	# gamma (2)
<11>	3   +   +   .   .   .   .   .   .   .	.   .	# gamma (3)
<12>	3   +   +   .   .   .   .   .   .   .	.   .	# gamma (10)
<13>	3   +   +   .   .   .   .   .   .   .	.   .	# gamma (1000)
<14>	3   +   +   .   .   .   .   .   .   .	.   .	# gamma (5, 1000, 0)
<15>	3   +   +   .   .   .   .   .   .   .	.   .	# gamma (5, 1e-05, 0)
<16> 	3   +   +   .   .   .   .   .   .   .	.   .	# gamma (5, 10, 100000)
<17>	+   +   +   +   +   +   +   +   .   .	.   .	# normal ()
<18>	+   +   +   +   +   +   +   +   .   .	.   .	# normal (1, 1e-05)
<19>	+   +   +   +   +   +   +   +   .   .	.   .	# normal (1, 1e+05)
<20>	+   .   .   .   .   .   .   .   .   . 	.   .	# uniform ()
<21>	+   .   .   .   .   .   .   .   .   .	.   .	# uniform (1, 20)

<22>	.   .   .   .   .   .   .   .   .   .	.   .	# cauchy () - truncated


#############################################################################
#############################################################################

[verbatim]

#############################################################################
