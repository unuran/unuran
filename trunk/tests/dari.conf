# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: DARI

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(7331)

[main - header:]

/* prototypes */

int unur_dari_set_pedantic( struct unur_par *par, int pedantic );

static int COMPARE_SAMPLE_SIZE = 10000;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

#[new - invalid NULL ptr: 
#   distr = NULL; ]
#
#~( distr );
#	--> expected_NULL --> UNUR_ERR_NULL
#
#[new - invalid distribution type:
#   distr = unur_distr_cont_new(); ]
#
#~( distr );
#	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID
#
#[new - not a standard distribution:
#   distr = unur_distr_discr_new(); ]
#
#~( distr );
#	--> expected_NULL --> UNUR_ERR_DISTR_INVALID

##############################################################################

[set]

#[set - invalid NULL ptr: 
#   par = NULL; ]
#
#~_variant(par,1);
#	--> expected_setfailed --> UNUR_ERR_NULL
#
#[set - invalid parameter object:
#   double fpar[1] = {0.5};
#   distr = unur_distr_geometric(fpar,1);
#   par = unur_dgt_new(distr); ]
#
#~_variant(par,1);
#	--> expected_setfailed --> UNUR_ERR_PAR_INVALID
#
#[set - invalid parameters:
#   double fpar[1] = {0.5};
#   distr = unur_distr_geometric(fpar,1);
#   par = unur_dstd_new(distr); ]
#
#~_variant(par,9999);
#	--> expected_setfailed --> UNUR_ERR_PAR_VARIANT

##############################################################################

[get]

##############################################################################

[chg]

#[chg - invalid generator object:
#   double fpar[1] = {0.5};
#   distr = unur_distr_geometric(fpar,1);
#   par = unur_dgt_new(distr);
#   unur_set_debug(par,0);
#   gen = unur_init( par ); <-- ! NULL ]
#
#~_pdfparams(gen, fpar, 1);
#	--> expected_setfailed --> UNUR_ERR_GEN_INVALID
#
#
#[chg - invalid parameters:
#   double fpar[1] = {0.5};
#   distr = unur_distr_geometric(fpar,1);
#   par = unur_dstd_new(distr);
#   gen = unur_init( par ); <-- ! NULL ]
#
#~_pdfparams(gen,NULL,1);
#	--> expected_setfailed --> UNUR_ERR_NULL
#
#~_pdfparams(gen,fpar,UNUR_DISTR_MAXPARAMS+10);
#	--> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS
#
#~_pdfparams(gen,fpar,-1);
#	--> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS
#

#############################################################################

[init]

##############################################################################

[reinit]

##############################################################################

[sample]

[sample - compare:
   double fpar[] = {0.1};
   distr = unur_distr_geometric(fpar,1);
   par = NULL; ]

/* default algorithm */
par = unur_dari_new(distr);
        -->compare_int_sequence_par_start

/* default algorithm - verifying mode */
par = unur_dari_new(distr);
unur_dari_set_verify(par,1);
        -->compare_int_sequence_par


##############################################################################

[validate]

[validate - generators:]

# default
par[0] = unur_dari_new(@distr@);

# with squeeze
par[1] = unur_dari_new(@distr@);
unur_dari_set_squeeze(par, 1);

# without table and without squeeze
par[2] = unur_dari_new(@distr@);
unur_dari_set_size(par, 0);

# without table and with squeeze
par[3] = unur_dari_new(@distr@);
unur_dari_set_squeeze(par, 1);
unur_dari_set_size(par, 0);



[validate - distributions:]

# geometric disctribution
fpm[0] = 0.5;
distr[0] = unur_distr_geometric(fpm,1);

fpm[0] = 0.1;
distr[1] = unur_distr_geometric(fpm,1);

fpm[0] = 0.001;
distr[2] = unur_distr_geometric(fpm,1);

# logarithmic distribution
fpm[0] = 0.1;
distr[3] = unur_distr_logarithmic(fpm,1);

fpm[0] = 0.9;
distr[4] = unur_distr_logarithmic(fpm,1);

# negative binomial distribution
fpm[0] = 0.5;
fpm[1] = 10.;
distr[5] = unur_distr_negativebinomial(fpm,2);

fpm[0] = 0.7;
fpm[1] = 5.;
distr[6] = unur_distr_negativebinomial(fpm,2);

fpm[0] = 0.1;
fpm[1] = 20.;
distr[7] = unur_distr_negativebinomial(fpm,2);

# poisson distribution
fpm[0] = 3.;
distr[8] = unur_distr_poisson(fpm,1);

fpm[0] = 50.;
distr[9] = unur_distr_poisson(fpm,1);

# zipf distribution
fpm[0] = 2.;
fpm[1] = 1.;
distr[10] = unur_distr_zipf(fpm,2);
unur_distr_discr_set_domain(distr[9],1,1000);

# binomial distribution
fpm[0] = 20.;
fpm[1] = 0.8;
distr[11] = unur_distr_binomial(fpm,2);

# binomial distribution
fpm[0] = 2000.;
fpm[1] = 0.0013;
distr[12] = unur_distr_binomial(fpm,2);

# Hyper geometric distribution
fpm[0] = 2000.;
fpm[1] = 200.;
fpm[2] = 20;
distr[13] = unur_distr_hypergeometric(fpm,3);

# Hyper geometric distribution
fpm[0] = 2000.;
fpm[1] = 200.;
fpm[2] = 220;
distr[14] = unur_distr_hypergeometric(fpm,3);


# number of distributions: 15


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator (given variant does not exist)
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0] ... default
#   [1] ... with squeeze
#   [2] ... without table and without squeeze
#   [3] ... without table and with squeeze
#                                               1
#gen	0   1   2   3   4   5   6   7   8   9   0	# distribution
#-------------------------------------------------------------
<0>     +   +   +   +                           	# geometric (0.5)
<1>     +   +   +   +                           	# geometric (0.1)
<2>     +   +   +   +                           	# geometric (0.001)
<3>     +   +   +   +                           	# logarithmic (0.1)
<4>     +   +   +   +                           	# logarithmic (0.9  )
<5>     +   +   +   +                           	# negativebinomial (0.5, 10)
<6>     .   .   .   .                           	# negativebinomial (0.7, 5)
<7>     .   .   .   .                           	# negativebinomial (0.1, 20)
<8>     +   +   +   +                           	# poisson (3)
<9>     +   +   +   +                           	# poisson (50)
<10>    .   .   .   .                           	# zipf (2, 1)
<11>    +   +   +   +                           	# binomial (20, 0.8)
<12>    +   +   +   +                           	# binomial (2000, 0.0013)
<13>    +   +   +   +                           	# hypergeometric (2000, 200, 20)
<14>    +   +   +   +                           	# hypergeometric (2000, 200, 220)


[validate - verify hat:]

#  + ... pass test
#  ~ ... fail in at most 1% of samples
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#

# generators:
#   [0] ... default
#   [1] ... ????
#                                               1
#gen	0   1   2   3   4   5   6   7   8   9   0	# distribution
#-------------------------------------------------------------
<0>     +   .   .   .                              	# geometric (0.5)
<1>     +   .   .   .                              	# geometric (0.1)
<2>     +   .   .   .                              	# geometric (0.001)
<3>     +   .   .   .                              	# logarithmic (0.1)
<4>     ~   .   .   .                              	# logarithmic (0.9)
<5>     +   .   .   .                              	# negativebinomial (0.5, 10)
<6>     .   .   .   .                              	# negativebinomial (0.7, 5)
<7>     .   .   .   .                              	# negativebinomial (0.1, 20)
<8>     +   .   .   .                              	# poisson (3)
<9>     +   .   .   .                              	# poisson (50)
<10>    .   .   .   .                              	# zipf (2, 1)
<11>    .   .   .   .                           	# binomial (20, 0.8)
<12>    .   .   .   .                           	# binomial (2000, 0.0013)
<13>    .   .   .   .                           	# hypergeometric (2000, 200, 20)
<14>    .   .   .   .                           	# hypergeometric (2000, 200, 220)


##############################################################################
##############################################################################

[verbatim]

/* no such function */
int unur_dari_set_pedantic( struct unur_par *par, int pedantic )
{ return 1; }

##############################################################################
