# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: DAU

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(7823)

[main - header:]

/* prototypes */

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

double *make_geometric_vector(double q, int len);
double *make_random_vector(int len);
UNUR_DISTR *get_distr_with_invalid_pv( void );
UNUR_DISTR *get_distr_with_pv( void );

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_cont_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_demp_new();   /* no probability vector */ ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_urnfactor(par,1.);
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   distr = get_distr_with_pv();
   par = unur_dgt_new(distr); ]

~_urnfactor(par,1.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID


[set - invalid parameters:
   distr = get_distr_with_pv();
   par = unur_dau_new(distr); ]

~_urnfactor(par,0.8);
	--> expected_setfailed --> UNUR_ERR_PAR_SET


#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL


[init - invalid data:
   distr = get_distr_with_invalid_pv();
   par = unur_dau_new(distr); ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_DATA



#############################################################################

[reinit]

[reinit - exist:
   distr = get_distr_with_pv();
   par = unur_dau_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

unur_reinit( gen );
	--> expected_no_reinit

#############################################################################

[sample]

#############################################################################

[validate]

[validate - generators:]

# default program
par[0] = unur_dau_new(@distr@);
unur_set_debug(par, 1u);

# larger urn table size
par[1] = unur_dau_new(@distr@);
unur_dau_set_urnfactor(par[1],10);
unur_set_debug(par, 1u);

[validate - distributions:]

# random vector with random entries
distr[0] = unur_distr_demp_new();
darray = make_random_vector(10);
unur_distr_demp_set_prob(distr[0],darray,10);
free(darray);
unur_distr_set_name(distr[0],"pv(random)");

distr[1] = unur_distr_demp_new();
darray = make_random_vector(100);
unur_distr_demp_set_prob(distr[1],darray,100);
free(darray);
unur_distr_set_name(distr[1],"pv(random)");

distr[2] = unur_distr_demp_new();
darray = make_random_vector(1000);
unur_distr_demp_set_prob(distr[2],darray,1000);
free(darray);
unur_distr_set_name(distr[2],"pv(random)");

distr[3] = unur_distr_demp_new();
darray = make_random_vector(10000);
unur_distr_demp_set_prob(distr[3],darray,10000);
free(darray);
unur_distr_set_name(distr[3],"pv(random)");

# random vector with geometrically distributed entries
distr[4] = unur_distr_demp_new();
darray = make_geometric_vector(1.,1000);
unur_distr_demp_set_prob(distr[4],darray,1000);
free(darray);
unur_distr_set_name(distr[4],"pv(geometric)");

distr[5] = unur_distr_demp_new();
darray = make_geometric_vector(0.99,1000);
unur_distr_demp_set_prob(distr[5],darray,1000);
free(darray);
unur_distr_set_name(distr[5],"pv(geometric)");

distr[6] = unur_distr_demp_new();
darray = make_geometric_vector(0.9,1000);
unur_distr_demp_set_prob(distr[6],darray,1000);
free(darray);
unur_distr_set_name(distr[6],"pv(geometric)");

distr[7] = unur_distr_demp_new();
darray = make_geometric_vector(0.5,1000);
unur_distr_demp_set_prob(distr[7],darray,1000);
free(darray);
unur_distr_set_name(distr[7],"pv(geometric)");

distr[8] = unur_distr_demp_new();
darray = make_geometric_vector(0.1,1000);
unur_distr_demp_set_prob(distr[8],darray,1000);
free(darray);
unur_distr_set_name(distr[8],"pv(geometric)");

[validate - test chi2:]

#par	[0]	[1]    
#-------------------
<0>	 +	 +
<1>	 +	 +
<2>	 +	 +
<3>	 +	 +
<4>	 +	 +
<5>	 +	 +
<6>	 +	 +
<7>	 +	 +
<8>	 +	 +

#############################################################################
#############################################################################

[verbatim]

/*---------------------------------------------------------------------------*/

/* make a probability vector (need not sum to one)
   (use random entries)                                                      */
double *make_random_vector(int len)
{
  double *prob;
  int i;

  /* allocate memory */
  prob = malloc(len*sizeof(double));
  if (!prob) abort();
     
  /* main part of geometric distribution */
  for( i=0; i<len; i++ ) 
    prob[i] = prng_get_next(urng);

  return prob;

} /* end of make_random_vector() */

/*---------------------------------------------------------------------------*/

/* make a probability vector (need not sum to one)
   (use geometric distribution)                                              */
double *make_geometric_vector(double q, int len)
{
  double *prob;
  int i;

  /* allocate memory */
  prob = malloc(len * sizeof(double));
  if (!prob) abort();

  /* main part of geometric distribution */
  prob[0] = 1.;
  for( i=1; i<len; i++ ) 
    prob[i] = prob[i-1] * q;

  return prob;

} /* end of make_geometric_vector() */

/*---------------------------------------------------------------------------*/

UNUR_DISTR *get_distr_with_pv( void )
{
\#define PV_SIZE 200
  double prob[PV_SIZE];
  UNUR_DISTR *distr;
  int i;

  for (i=0; i<PV_SIZE; i++)
    prob[i] = prng_get_next(urng);

  distr = unur_distr_demp_new();
  unur_distr_demp_set_prob(distr,prob,PV_SIZE);

  return distr;

\#undef PV_SIZE
} /* end of get_distr_with_pv() */

/*---------------------------------------------------------------------------*/

UNUR_DISTR *get_distr_with_invalid_pv( void )
{
\#define PV_SIZE 10
  double prob[PV_SIZE];
  UNUR_DISTR *distr;
  int i;

  prob[0] = -1.;    /* invalid ! */

  for (i=1; i<PV_SIZE; i++)
    prob[i] = prng_get_next(urng);

  distr = unur_distr_demp_new();
  unur_distr_demp_set_prob(distr,prob,PV_SIZE);

  return distr;
  
\#undef PV_SIZE
} /* end of get_distr_with_invalid_pv() */

/*---------------------------------------------------------------------------*/

#############################################################################
