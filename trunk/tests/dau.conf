# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: DAU

# type of generator (cont|discr|demp)
type: demp

# which distributions should be used for testing
# finite probability vectors
distributions: type & T_fpv

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(7823)

[main - header:]

/* prototypes */

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

UNUR_DISTR *get_distr_with_invalid_pv( void );
UNUR_DISTR *get_distr_with_pv( void );

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_new(UNUR_DISTR_CONT); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_new(UNUR_DISTR_DEMP);   /* no probability vector */ ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_urnfactor(par,1.);
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   distr = get_distr_with_pv();
   par = unur_dgt_new(distr); ]

~_urnfactor(par,1.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID


[set - invalid parameters:
   distr = get_distr_with_pv();
   par = unur_dau_new(distr); ]

~_urnfactor(par,0.8);
	--> expected_setfailed --> UNUR_ERR_PAR_SET


#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

[init - invalid data:
   distr = get_distr_with_invalid_pv();
   par = unur_dau_new(distr); ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_DATA



#############################################################################

[reinit]

[reinit - exist:
   distr = get_distr_with_pv();
   par = unur_dau_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

unur_reinit( gen );
	--> expected_no_reinit

#############################################################################

[sample]

#############################################################################

[validate]

[validate - chi2 test:]

	--> run_validate_chi2 {
		/* default algorithm */
		par = unur_dau_new(distr); }

	--> run_validate_chi2 {
		/* larger urn table size */
		par = unur_dau_new(distr);
		unur_dau_set_urnfactor(par,10); }


#############################################################################
#############################################################################

[verbatim]

UNUR_DISTR *get_distr_with_pv( void )
{
\#define PV_SIZE 200
  double prob[PV_SIZE];
  UNUR_DISTR *distr;
  int i;

  for (i=0; i<PV_SIZE; i++)
    prob[i] = prng_get_next(urng);

  distr = unur_distr_new(UNUR_DISTR_DEMP);
  unur_distr_demp_set_prob(distr,prob,PV_SIZE);

  return distr;

\#undef PV_SIZE
} /* end of get_distr_with_pv() */

/*---------------------------------------------------------------------------*/

UNUR_DISTR *get_distr_with_invalid_pv( void )
{
\#define PV_SIZE 10
  double prob[PV_SIZE];
  UNUR_DISTR *distr;
  int i;

  prob[0] = -1.;    /* invalid ! */

  for (i=1; i<PV_SIZE; i++)
    prob[i] = prng_get_next(urng);

  distr = unur_distr_new(UNUR_DISTR_DEMP);
  unur_distr_demp_set_prob(distr,prob,PV_SIZE);

  return distr;
  
\#undef PV_SIZE
} /* end of get_distr_with_invalid_pv() */

/*---------------------------------------------------------------------------*/

#############################################################################
