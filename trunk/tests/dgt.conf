# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: DGT

[main - header:]

/* prototypes */

static int COMPARE_SAMPLE_SIZE = 15000;
static int VIOLATE_SAMPLE_SIZE = 20;

double *make_geometric_vector(double q, int len);
double *make_random_vector(int len);
UNUR_DISTR *get_distr_with_invalid_pv( void );
UNUR_DISTR *get_distr_with_pv( void );

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_cont_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
    distr = unur_distr_discr_new();   /* no probability vector */ ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_variant(par,1);
	--> expected_setfailed --> UNUR_ERR_NULL

~_guidefactor(par,-1.);
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   distr = get_distr_with_pv();
   par = unur_dau_new(distr); ]

~_variant(par,10);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_guidefactor(par,-1.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

free(par);

[set - invalid parameters:
   distr = get_distr_with_pv();
   par = unur_dgt_new(distr); ]

~_variant(par,10);
	--> expected_setfailed --> UNUR_ERR_PAR_VARIANT

~_guidefactor(par,-1.);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

free(par);

#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL


[init - invalid data:
   distr = get_distr_with_invalid_pv();
   par = unur_dgt_new(distr); ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_DATA

#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare:
   distr = get_distr_with_pv();
   par = NULL; ]

/* default algorithm */
par = unur_dgt_new(distr);
        -->compare_int_sequence_par_start

/* variant 1 */
par = unur_dgt_new(distr);
unur_dgt_set_variant(par,1);
        -->compare_int_sequence_par

/* variant 2 */
par = unur_dgt_new(distr);
unur_dgt_set_variant(par,2);
        -->compare_int_sequence_par

/* larger guide table size */
par = unur_dgt_new(distr);
unur_dgt_set_guidefactor(par,10);
        -->compare_int_sequence_par

/* smaller guide table size */
par = unur_dgt_new(distr);
unur_dgt_set_guidefactor(par,0.1);
        -->compare_int_sequence_par

/* sequential search */
par = unur_dgt_new(distr);
unur_dgt_set_guidefactor(par,0.);
        -->compare_int_sequence_par


#############################################################################

[validate]

[validate - generators:]

# default program
par[0] = unur_dgt_new(@distr@);
unur_set_debug(par, 1u);

# variant 1
par[1] = unur_dgt_new(@distr@);
unur_dgt_set_variant(par,1);
unur_set_debug(par, 1u);

# variant 2
par[2] = unur_dgt_new(@distr@);
unur_dgt_set_variant(par,2);
unur_set_debug(par, 1u);

# larger guide table size
par[3] = unur_dgt_new(@distr@);
unur_dgt_set_guidefactor(par,10);
unur_set_debug(par, 1u);

# smaller guide table size
par[4] = unur_dgt_new(@distr@);
unur_dgt_set_guidefactor(par,0.1);
unur_set_debug(par, 1u);


[validate - distributions:]

# probability vector with random entries
distr[0] = unur_distr_discr_new();
darray = make_random_vector(10);
unur_distr_discr_set_pv(distr[0],darray,10);
free(darray);
unur_distr_set_name(distr[0],"pv(random)");

distr[1] = unur_distr_discr_new();
darray = make_random_vector(100);
unur_distr_discr_set_pv(distr[1],darray,100);
free(darray);
unur_distr_set_name(distr[1],"pv(random)");

distr[2] = unur_distr_discr_new();
darray = make_random_vector(1000);
unur_distr_discr_set_pv(distr[2],darray,1000);
free(darray);
unur_distr_set_name(distr[2],"pv(random)");

distr[3] = unur_distr_discr_new();
darray = make_random_vector(10000);
unur_distr_discr_set_pv(distr[3],darray,10000);
free(darray);
unur_distr_set_name(distr[3],"pv(random)");

# probability vector with geometrically distributed entries
distr[4] = unur_distr_discr_new();
darray = make_geometric_vector(1.,1000);
unur_distr_discr_set_pv(distr[4],darray,1000);
free(darray);
unur_distr_set_name(distr[4],"pv(geometric)");

distr[5] = unur_distr_discr_new();
darray = make_geometric_vector(0.99,1000);
unur_distr_discr_set_pv(distr[5],darray,1000);
free(darray);
unur_distr_set_name(distr[5],"pv(geometric)");

distr[6] = unur_distr_discr_new();
darray = make_geometric_vector(0.9,1000);
unur_distr_discr_set_pv(distr[6],darray,1000);
free(darray);
unur_distr_set_name(distr[6],"pv(geometric)");

distr[7] = unur_distr_discr_new();
darray = make_geometric_vector(0.5,1000);
unur_distr_discr_set_pv(distr[7],darray,1000);
free(darray);
unur_distr_set_name(distr[7],"pv(geometric)");

distr[8] = unur_distr_discr_new();
darray = make_geometric_vector(0.1,1000);
unur_distr_discr_set_pv(distr[8],darray,1000);
free(darray);
unur_distr_set_name(distr[8],"pv(geometric)");

# probability vector with geometrically distributed entries and shifted domain
distr[9] = unur_distr_discr_new();
darray = make_geometric_vector(0.5,100);
unur_distr_discr_set_pv(distr[9],darray,100);
unur_distr_discr_set_domain(distr[9],10,209);
free(darray);
unur_distr_set_name(distr[9],"pv(geometric) - shifted domain");

distr[10] = unur_distr_discr_new();
darray = make_geometric_vector(0.9,100);
unur_distr_discr_set_pv(distr[10],darray,100);
unur_distr_discr_set_domain(distr[10],-10,209);
free(darray);
unur_distr_set_name(distr[10],"pv(geometric) - shifted domain");

# PMF instead of PV

# geometric disctribution
fpm[0] = 0.5;
distr[11] = unur_distr_geometric(fpm,1);

fpm[0] = 0.001;
distr[12] = unur_distr_geometric(fpm,1);

# logarithmic distribution
fpm[0] = 0.1;
distr[13] = unur_distr_logarithmic(fpm,1);

fpm[0] = 0.999;
distr[14] = unur_distr_logarithmic(fpm,1);

# negative binomial distribution
fpm[0] = 0.5;
fpm[1] = 10.;
distr[15] = unur_distr_negativebinomial(fpm,2);

fpm[0] = 0.8;
fpm[1] = 10.;
distr[21] = unur_distr_negativebinomial(fpm,2);

fpm[0] = 0.01;
fpm[1] = 20.;
distr[16] = unur_distr_negativebinomial(fpm,2);

# poisson distribution
fpm[0] = 0.1;
distr[17] = unur_distr_poisson(fpm,1);

fpm[0] = 0.999;
distr[18] = unur_distr_poisson(fpm,1);

# zipf distribution
fpm[0] = 2.;
fpm[1] = 1.;
distr[19] = unur_distr_zipf(fpm,2);
unur_distr_discr_set_domain(distr[19],1,1000);

fpm[0] = 0.001;
fpm[1] = 1.;
distr[20] = unur_distr_zipf(fpm,2);
unur_distr_discr_set_domain(distr[20],1,1000);


# number of distributions: 22


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
#gen	[0]	[1]	[2]	[3]	[4]	# distribution
#-------------------------------------------------------------
<0>	 +	 +	 +	 +	 +	# PV with random entries
<1>	 +	 +	 +	 +	 +
<2>	 +	 +	 +	 +	 +
<3>	 +	 +	 +	 +	 +

<4>	 +	 +	 +	 +	 +	# PV with geometrically distributed entries
<5>	 +	 +	 +	 +	 +
<6>	 +	 +	 +	 +	 +
<7>	 +	 +	 +	 +	 +
<8>	 +	 +	 +	 +	 +

<9>	 +	 +	 +	 +	 +	# PV with geom. distr. entries and shifted domain
<10>	 +	 +	 +	 +	 +

# PMF instead of PV

<11>     +	 +	 +	 +	 +	# geometric (0.5)
<12>     +	 +	 +	 +	 +	# geometric (0.001)
<13>     +	 +	 +	 +	 +	# logarithmic (0.1)
<14>     +	 +	 +	 +	 +	# logarithmic (0.999)
<15>     +	 +	 +	 +	 +	# negativebinomial (0.5, 10)
<21>     +	 +	 +	 +	 +	# negativebinomial (0.8, 10)
<16>     +	 +	 +	 +	 +	# negativebinomial (0.01, 20)
<17>     +	 +	 +	 +	 +	# poisson (0.1)
<18>     +	 +	 +	 +	 +	# poisson (0.999)
<19>     +	 +	 +	 +	 +	# zipf (2, 1)
<20>     +	 +	 +	 +	 +	# zipf (0.001, 1)


#############################################################################
#############################################################################

[verbatim]

/*---------------------------------------------------------------------------*/

/* make a probability vector (need not sum to one)
   (use random entries)                                                      */
double *make_random_vector(int len)
{
  double *pv;
  int i;

  /* allocate memory */
  pv = malloc(len*sizeof(double));
  if (!pv) abort();
     
  /* main part of geometric distribution */
  for( i=0; i<len; i++ ) 
    pv[i] = _unur_call_urng(urng);

  return pv;

} /* end of make_random_vector() */

/*---------------------------------------------------------------------------*/

/* make a probability vector (need not sum to one)
   (use geometric distribution)                                              */
double *make_geometric_vector(double q, int len)
{
  double *pv;
  int i;

  /* allocate memory */
  pv = malloc(len * sizeof(double));
  if (!pv) abort();

  /* main part of geometric distribution */
  pv[0] = 1.;
  for( i=1; i<len; i++ ) 
    pv[i] = pv[i-1] * q;

  return pv;

} /* end of make_geometric_vector() */

/*---------------------------------------------------------------------------*/

UNUR_DISTR *get_distr_with_pv( void )
{
\#define PV_SIZE 200
  double pv[PV_SIZE];
  UNUR_DISTR *distr;
  int i;

  for (i=0; i<PV_SIZE; i++)
    pv[i] = _unur_call_urng(urng);

  distr = unur_distr_discr_new();
  unur_distr_discr_set_pv(distr,pv,PV_SIZE);

  return distr;

\#undef PV_SIZE
} /* end of get_distr_with_pv() */

/*---------------------------------------------------------------------------*/

UNUR_DISTR *get_distr_with_invalid_pv( void )
{
\#define PV_SIZE 10
  double pv[PV_SIZE];
  UNUR_DISTR *distr;
  int i;

  pv[0] = -1.;    /* invalid ! */

  for (i=1; i<PV_SIZE; i++)
    pv[i] = _unur_call_urng(urng);

  distr = unur_distr_discr_new();
  unur_distr_discr_set_pv(distr,pv,PV_SIZE);

  return distr;
  
\#undef PV_SIZE
} /* end of get_distr_with_invalid_pv() */

/*---------------------------------------------------------------------------*/

#############################################################################
