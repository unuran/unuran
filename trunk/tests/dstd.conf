# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: DSTD

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(2997)

[main - header:]

/* prototypes */

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_cont_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - not a standard distribution:
   distr = unur_distr_discr_new(); ]

~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_INVALID

##############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_variant(par,1);
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   double fpar[1] = {0.5};
   distr = unur_distr_geometric(fpar,1);
   par = unur_dgt_new(distr); ]

~_variant(par,1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

[set - invalid parameters:
   double fpar[1] = {0.5};
   distr = unur_distr_geometric(fpar,1);
   par = unur_dstd_new(distr); ]

~_variant(par,9999);
	--> expected_setfailed --> UNUR_ERR_PAR_VARIANT

##############################################################################

[get]

##############################################################################

[chg]

[chg - invalid generator object:
   double fpar[1] = {0.5};
   distr = unur_distr_geometric(fpar,1);
   par = unur_dgt_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_pdfparams(gen, fpar, 1);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID


[chg - invalid parameters:
   double fpar[1] = {0.5};
   distr = unur_distr_geometric(fpar,1);
   par = unur_dstd_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

~_pdfparams(gen,NULL,1);
	--> expected_setfailed --> UNUR_ERR_NULL

~_pdfparams(gen,fpar,UNUR_DISTR_MAXPARAMS+10);
	--> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS

~_pdfparams(gen,fpar,-1);
	--> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS


##############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL


##############################################################################

[reinit]

##############################################################################

[sample]

##############################################################################

[validate]

[validate - generators:]

# inversion      
par[0] = unur_dstd_new(@distr@);
if (!unur_dstd_set_variant(par,UNUR_STDGEN_INVERSION)) { par = NULL; }

par[1] = unur_dstd_new(@distr@);
if (!unur_dstd_set_variant(par,1)) { par = NULL; }



[validate - distributions:]

# geometric disctribution
fpm[0] = 0.5;
distr[0] = unur_distr_geometric(fpm,1);

#binomial distribution
fpm[0] = 100.;
fpm[1] = 0.4;
distr[1] = unur_distr_binomial(fpm,2);

fpm[0] = 100.;
fpm[1] = 0.87;
distr[2] = unur_distr_binomial(fpm,2);

fpm[0] = 100.;
fpm[1] = 0.01;
distr[3] = unur_distr_binomial(fpm,2);

fpm[0] = 10000.;
fpm[1] = 0.7 ;
distr[4] = unur_distr_binomial(fpm,2);

fpm[0] = 10000.;
fpm[1] = 100. ;
fpm[2] = 50. ;
distr[5] = unur_distr_hypergeometric(fpm,3);

fpm[0] = 10000.;
fpm[1] = 9000. ;
fpm[2] = 50. ;
distr[6] = unur_distr_hypergeometric(fpm,3);

fpm[0] = 10000.;
fpm[1] = 80. ;
fpm[2] = 90. ;
distr[7] = unur_distr_hypergeometric(fpm,3);

fpm[0] = 10000.;
fpm[1] = 1000. ;
fpm[2] = 150. ;
distr[8] = unur_distr_hypergeometric(fpm,3);

fpm[0] = 10000.;
fpm[1] = 9000. ;
fpm[2] = 500. ;
distr[9] = unur_distr_hypergeometric(fpm,3);

fpm[0] = 10000.;
fpm[1] = 9000. ;
fpm[2] = 250. ;
distr[10] = unur_distr_hypergeometric(fpm,3);



[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator (given variant does not exist)
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0]         ... Inversion
#   [1] -- [9]  ... Variants 1 to 9
#   [10]        ... domain changed after initialization
#
#                                               1
#gen	0   1   2   3   4   5   6   7   8   9   0	# distribution
#-------------------------------------------------------------
<0>     +   0                                   	# geometric (0.5)
<1>	.   +                                 		# binomial (100, 0.4)
<2>	.   +                                		# binomial (100, 0.87)
<3>	.   +                                		# binomial (100, 0.01)
<4>	.   +                                		# binomial (10000, 0.7)
<5>	.   +                                		# hypergeometric (10000, 100, 50)
<6>	.   +                                		# hypergeometric (10000, 9000, 50)
<7>	.   +                                		# hypergeometric (10000, 80, 90)
<8>	.   +                                		# hypergeometric (1
<9>	.   .                                		# hypergeometrric 
<10>	.   .                                		# hypergeometric (1

# number of distributions: 12

#
#
#[validate - timing:]
#
##  + ... pass test
##  . ... do not run test
##  # ... comment
##
## generators:
##   [0]         ... Inversion
##   [1] -- [9]  ... Variants 1 to 9
##   [10]        ... domain changed after initialization
##
##                                               1
##gen	0   1   2   3   4   5   6   7   8   9   0	# distribution
##-------------------------------------------------------------
#<0>	2   .   .   .   .   .   .   .   .   .	.	# beta (1, 2)
#<1>	2   .   .   .   .   .   .   .   .   .	.	# beta (1, 5)
#<2>	2   .   .   .   .   .   .   .   .   .	.	# beta (1, 100)
#<3>	2   .   .   .   .   .   .   .   .   .	.	# beta (3, 4)
#<4>	2   .   .   .   .   .   .   .   .   .	.	# beta (5, 100)
#<5>	2   .   .   .   .   .   .   .   .   .	.	# beta (500, 300)
#<6>	2   .   .   .   .   .   .   .   .   .	.	# beta (5, 10, -3, 15)
#<7>	+   .   .   .   .   .   .   .   .   .	.	# cauchy ()
#<8>	+   .   .   .   .   .   .   .   .   .	.	# cauchy (1, 20)
#<9>	3   +   +   .   .   .   .   .   .   .	.	# gamma (1)
#<10>	3   +   +   .   .   .   .   .   .   .	.	# gamma (2)
#<11>	3   +   +   .   .   .   .   .   .   .	.	# gamma (3)
#<12>	3   +   +   .   .   .   .   .   .   .	.	# gamma (10)
#<13>	3   +   +   .   .   .   .   .   .   .	.	# gamma (1000)
#<14>	3   +   +   .   .   .   .   .   .   .	.	# gamma (5, 1000, 0)
#<15>	3   +   +   .   .   .   .   .   .   .	.	# gamma (5, 1e-05, 0)
#<16> 	3   +   +   .   .   .   .   .   .   .	.	# gamma (5, 10, 100000)
#<17>	+   +   +   +   +   +   +   +   .   .	.	# normal ()
#<18>	+   +   +   +   +   +   +   +   .   .	.	# normal (1, 1e-05)
#<19>	+   +   +   +   +   +   +   +   .   .	.	# normal (1, 1e+05)
#<20>	+   .   .   .   .   .   .   .   .   . 	.	# uniform ()
#<21>	+   .   .   .   .   .   .   .   .   .	.	# uniform (1, 20)
#
#<22>	.   .   .   .   .   .   .   .   .   .	.	# cauchy () - truncated


# number of distributions: 11

##############################################################################
##############################################################################

[verbatim]

##############################################################################
