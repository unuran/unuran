#############################################################################

[main]

[main - data:]

# method
method: HINV

[main - header:]

/* prototypes */

\#define COMPARE_SAMPLE_SIZE   (500)
\#define VIOLATE_SAMPLE_SIZE   (20)

double sin_cdf( double x, const UNUR_DISTR *distr );
double sin_pdf( double x, const UNUR_DISTR *distr );
double sin_dpdf( double x, const UNUR_DISTR *distr );

double sin0_cdf( double x, const UNUR_DISTR *distr );
double sin0_pdf( double x, const UNUR_DISTR *distr );
double sin0_dpdf( double x, const UNUR_DISTR *distr );

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_cont_new(); ]

/* cdf */
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   double stp[] = {1.,2.,3.};
   par = NULL; ]

~_order( par, 3 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_u_resolution( par, 1.e-8 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_cpoints(par,stp,3);
	--> expected_setfailed --> UNUR_ERR_NULL

~_boundary(par,1.,3.);
	--> expected_setfailed --> UNUR_ERR_NULL

~_guidefactor( par, 2. );
	--> expected_setfailed --> UNUR_ERR_NULL

~_max_intervals(par,10000.);
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   double stp[] = {1.,2.,3.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_order( par, 3 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_u_resolution( par, 1.e-8 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_cpoints(par,stp,3);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_boundary(par,1.,3.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_guidefactor( par, 2. );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_max_intervals(par,10000);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

free(par);

[set - invalid parameters:
   double fpar[2] = {0.,1.};
   double stp[] = {1.,2.,-3.};
   distr = unur_distr_normal(fpar,2);
   par = unur_hinv_new(distr); ]

~_order( par, 30 );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_u_resolution( par, -1. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_cpoints(par,stp,3);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_boundary(par,1.,-3.);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_boundary(par,1.,UNUR_INFINITY);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_guidefactor( par, -2. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_max_intervals(par,0);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

free(par);

#############################################################################

[get]

[get - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_tdr_new(distr);
   gen = unur_init(par); <-- ! NULL ]

~_n_intervals(gen);
        --> expected_setfailed --> UNUR_ERR_GEN_INVALID


#############################################################################

[chg]

[chg - invalid generator object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   unur_distr_cont_set_domain(distr,-1.,2.);
   par = unur_hinv_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_truncated( gen, 1., 0. );
	--> expected_setfailed --> UNUR_ERR_DISTR_SET

~_truncated( gen, -2., 0. );
	--> none --> UNUR_ERR_DISTR_SET

~_truncated( gen, 0., 10. );
	--> none --> UNUR_ERR_DISTR_SET


#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare clone:
   UNUR_GEN *clone;
   distr = unur_distr_normal(NULL,0); 
   par = NULL;
   gen = NULL; ]

/* original generator object */
par = unur_hinv_new(distr);
gen = unur_init(par);
        -->compare_double_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_double_sequence_gen

#############################################################################

[validate]

[validate - generators:]

# linear with default precision
par[0] = unur_hinv_new(@distr@);
unur_hinv_set_order(par,1);
unur_hinv_set_u_resolution(par,1.e-8);
unur_set_debug(par,1u);

# cubic with precision 1.e-10
par[1] = unur_hinv_new(@distr@);
unur_hinv_set_order(par,3);
unur_hinv_set_u_resolution(par,1.e-10);
unur_set_debug(par,1u);

# quintic with precision 1.e-10
par[2] = unur_hinv_new(@distr@);
unur_hinv_set_order(par,5);
unur_hinv_set_u_resolution(par,1.e-10);
unur_set_debug(par,1u);

# cubic with truncated distribution
par[3] = unur_hinv_new(@distr@);
unur_hinv_set_order(par,3);
unur_hinv_set_u_resolution(par,1.e-10);
unur_set_debug(par,1u);
unur_hinv_chg_truncated(gen,0.5,0.9);

# quintic with precision 1.e-12
par[4] = unur_hinv_new(@distr@);
unur_hinv_set_order(par,5);
unur_hinv_set_u_resolution(par,1.e-12);
unur_set_debug(par,1u);

# cubic with starting construction points for distribution 33
par[5] = unur_hinv_new(@distr@);
unur_hinv_set_order(par,3);
unur_hinv_set_u_resolution(par,1.e-10);
unur_set_debug(par,1u);
fpm[0]= -0.75;
fpm[1]= -0.25;
fpm[2]=  0.25;
fpm[3]=  0.75;
unur_hinv_set_cpoints(par,fpm,4);

# cubic with starting construction points for distribution 34
par[6] = unur_hinv_new(@distr@);
unur_hinv_set_order(par,3);
unur_hinv_set_u_resolution(par,1.e-10);
unur_set_debug(par,1u);
fpm[0]= -0.75;
fpm[1]= -0.5;
fpm[2]=  0.;
fpm[3]=  0.25;
unur_hinv_set_cpoints(par,fpm,4);


[validate - distributions:]

# Beta distributions
fpm[0] = 1.;
fpm[1] = 2.;
distr[0] = unur_distr_beta(fpm,2);

fpm[0] = 1.;
fpm[1] = 5.;
distr[1] = unur_distr_beta(fpm,2);

fpm[0] = 1.;
fpm[1] = 100.;
distr[2] = unur_distr_beta(fpm,2);

fpm[0] = 3.;
fpm[1] = 4.;
distr[3] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 100.;
distr[4] = unur_distr_beta(fpm,2);

fpm[0] = 500.;
fpm[1] = 300.;
distr[5] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = -3.;
fpm[3] = 15.;
distr[6] = unur_distr_beta(fpm,4);

fpm[0] = 0.5;
fpm[1] = 3.;
distr[28] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 0.3;
distr[29] = unur_distr_beta(fpm,2);

fpm[0] = 0.5;
fpm[1] = 0.4;
distr[30] = unur_distr_beta(fpm,2);

# Cauchy distributions
distr[7] = unur_distr_cauchy(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[8] = unur_distr_cauchy(fpm,2);

# Exponential distributions
distr[24] = unur_distr_exponential(NULL,0);

fpm[0] = 30.;
fpm[1] = -5.;
distr[25] = unur_distr_exponential(fpm,2);

# Gamma distributions
fpm[0] = 1.;
distr[9] = unur_distr_gamma(fpm,1);

fpm[0] = 2.;
distr[10] = unur_distr_gamma(fpm,1);

fpm[0] = 3.;
distr[11] = unur_distr_gamma(fpm,1);

fpm[0] = 10.;
distr[12] = unur_distr_gamma(fpm,1);

fpm[0] = 1000.;
distr[13] = unur_distr_gamma(fpm,1);

fpm[0] = 5.;
fpm[1] = 1000.;
distr[14] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 1.e-5;
distr[15] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = 1000;
distr[16] = unur_distr_gamma(fpm,3);

fpm[0] = 0.5;
distr[31] = unur_distr_gamma(fpm,1);

fpm[0] = 0.2;
distr[32] = unur_distr_gamma(fpm,1);

# Laplace distributions
distr[26] = unur_distr_laplace(NULL,0);

fpm[0] = -10.;
fpm[1] = 100.;
distr[27] = unur_distr_laplace(fpm,2);

# Normal distributions
distr[17] = unur_distr_normal(NULL,0);

fpm[0] = 1.;
fpm[1] = 1.e-5;
distr[18] = unur_distr_normal(fpm,2);

fpm[0] = 0.;
fpm[1] = 1.e+5;
distr[19] = unur_distr_normal(fpm,2);

# Uniform distributions
distr[20] = unur_distr_uniform(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[21] = unur_distr_uniform(fpm,2);

# truncated distributions
distr[22] = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(distr[22],0.1,1.);
unur_distr_cont_upd_mode(distr[22]);
unur_distr_cont_upd_pdfarea(distr[22]);

# domain exceeds support of pdf
fpm[0] = 3.;
fpm[1] = 4.;
distr[23] = unur_distr_beta(fpm,2);
unur_distr_cont_set_domain(distr[23],-2.,5.);

# distribution with vanishing density
distr[33] = unur_distr_cont_new();
unur_distr_cont_set_cdf( distr[33], sin_cdf );
unur_distr_cont_set_pdf( distr[33], sin_pdf );
unur_distr_cont_set_dpdf( distr[33], sin_dpdf );
unur_distr_cont_set_domain( distr[33], -1., 1. );

# distribution with vanishing density
distr[34] = unur_distr_cont_new();
unur_distr_cont_set_cdf( distr[34], sin0_cdf );
unur_distr_cont_set_pdf( distr[34], sin0_pdf );
unur_distr_cont_set_dpdf( distr[34], sin0_dpdf );
unur_distr_cont_set_domain( distr[34], -1., 1. );

# number of distributions: 35


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0]  ... linear with default precision
#  [1]  ... cubic with precision 1.e-10
#  [2]  ... quintic with precision 1.e-10
#  [3]  ... cubic with truncated distribution on [0.5,0.9]
#  [4]  ... quintic with precision 1.e-12
#  [5]  ... cubic with starting construction points for distribution 34
#  [6]  ... cubic with starting construction points for distribution 34
#
#	0  1  2	 3  4  5  6	# distribution
#-------------------------------------
<0>	+  +  +	 +  +  +  +	# beta (1, 2)
<1>	+  +  +	 +  +  +  +	# beta (1, 5)
<2>	+  +  +  .  +  +  +	# beta (1, 100)
<3>	+  +  +  +  +  +  +	# beta (3, 4)
<4>	+  +  +  .  +  +  +	# beta (5, 100)
<5>	+  +  +  +  +  +  +	# beta (500, 300)
<6>	+  +  +  +  +  +  +	# beta (5, 10, -3, 15)
<28>	+  +  +  +  +  +  +	# beta (0.5, 3)
<29>	+  +  +  +  +  +  +	# beta (5, 0.3)
<30>	+  +  +  +  +  +  +	# beta (0.5, 0.4)
<7>	+  +  +  +  +  +  +	# cauchy ()
<8> 	+  +  +  +  +  +  +	# cauchy (1, 20)
<24>	+  +  +  +  +  +  +	# exponential ()
<25>	+  +  +  +  +  +  +	# exponential (30, -5)
<9>	+  +  +  +  +  +  +	# gamma (1)
<10>	+  +  +  +  +  +  +	# gamma (2)
<11>	+  +  +  +  +  +  +	# gamma (3)
<12>	+  +  +  +  +  +  +	# gamma (10)
<13>	+  +  +  .  +  +  +	# gamma (1000)
<14>	+  +  +  .  +  +  +	# gamma (5, 1000, 0)
<15>	+  +  +  .  +  +  +	# gamma (5, 1e-05, 0)
<16>	+  +  +  .  +  +  +	# gamma (5, 10, 100000)
<31>	+  +  +  +  +  +  +	# gamma (0.5)
<32>	+  +  +  +  +  +  +	# gamma (0.2)
<26>	+  +  +  +  +  +  +	# laplace ()
<27>	+  +  +  +  +  +  +	# laplace (-10, 100)
<17>	+  +  +  +  +  +  +	# normal ()
<18>	+  +  +  .  +  +  +	# normal (1, 1e-05)
<19>	+  +  +  +  +  +  +	# normal (1, 1e+05)
<20>	+  +  +  +  +  +  +	# uniform ()
<21>	+  +  +  .  +  +  +	# uniform (1, 20)

<22>	+  +  +  +  +  +  +	# cauchy () - truncated
<23>	+  +  +  +  +  +  +	# beta () - domain superset of support

<33>	+  +  +  +  +  +  .	# distribution with vanishing PDF
<34>	+  +  +  +  +  .  +	# distribution with vanishing PDF

# Remark:
#  No tests with truncated distribution where the call
#  unur_hinv_chg_truncated() fails since the CDF values at the
#  boundaries are too close.
#  generator 6 has the cpoints for the special distribution 33
#  generator 6 has the cpoints for the special distribution 34

#############################################################################
#############################################################################

[verbatim]

/* Example of  a distribution with f(x)=0 at x=-0.25 and x=0.75  */
/*                                                               */
/*          /  (1 +sin(2 Pi x))/2  if |x| <= 1                   */
/*  f(x) = <                                                     */
/*          \  0        otherwise                                */
/*                                                               */
double sin_pdf( double x, const UNUR_DISTR *distr )
{
  if (fabs(x) > 1.)
    return 0.;
  else
    return (0.5*(1.+sin((2.*M_PI)*x)));
} /* end of sinpdf() */

/* The derivative of the PDF of our distribution:                */
double sin_dpdf( double x, const UNUR_DISTR *distr )
{
  if (fabs(x) > 1.)
    return 0.;
  else
    return (M_PI*cos((2.*M_PI)*x));
} /* end of sin_dpdf() */

/* The CDF of our distribution:                                  */
double sin_cdf( double x, const UNUR_DISTR *distr )
{
  if (x < -1.)
    return 0.;
  else if(x<=1.)
    return (1.+2.*M_PI*(1+x)-cos((2.*M_PI)*x))/(4.*M_PI);
  else return 1.;
} /* end of sin_cdf() */

/****************************************************************/
/* Example of  a distribution with f(x)=0 in (-0.5,0)            */
/*                                                               */
/*          /  Max(sin(2 Pi x)),0)Pi/2  if -1 < x <0.5           */
/*  f(x) = <                                                     */
/*          \  0        otherwise                                */
/*                                                               */
double sin0_pdf( double x, const UNUR_DISTR *distr )
{
  if (x < -1.) return 0.;
  if (x <= -0.5) return sin((2.*M_PI)*x)*0.5*M_PI;
  if (x < 0.) return 0.;
  if (x <= 0.5) return sin((2.*M_PI)*x)*0.5*M_PI;
  return 0.;
} /* end of sin0_pdf() */

/* The derivative of the PDF of our distribution:                */
double sin0_dpdf( double x, const UNUR_DISTR *distr )
{
  if (x < -1.) return 0.;
  if (x <= -0.5) return cos((2.*M_PI)*x)*M_PI*M_PI;
  if (x < 0.) return 0.;
  if (x <= 0.5) return cos((2.*M_PI)*x)*M_PI*M_PI;
  return 0.;
} /* end of sin0_dpdf() */

/* The CDF of our distribution:                                  */
double sin0_cdf( double x, const UNUR_DISTR *distr )
{
  if (x < -1.) return 0.;
  if(x<= -0.5) return 0.25*(1-cos((2.*M_PI)*x));
  if (x < 0.) return 0.5;
  if (x <= 0.5) return 0.75-0.25*cos((2.*M_PI)*x);
  return 1.;
} /* end of sin0_cdf() */

#############################################################################

