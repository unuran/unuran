# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: SROU

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(5678)

[main - header:]

/* prototypes */
double pdf( double x, UNUR_DISTR *distr );

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_cont_new(); ]

/* pdf, mode, pdfarea */
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

/* mode, pdfarea */
unur_distr_cont_set_pdf(distr,pdf);
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

/* pdfarea */
unur_distr_cont_set_mode(distr,1.);
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_cdfatmode(par,0.);
	--> expected_setfailed --> UNUR_ERR_NULL

~_pdfatmode(par,1.);
	--> expected_setfailed --> UNUR_ERR_NULL

~_verify(par,1);
	--> expected_setfailed --> UNUR_ERR_NULL

~_usesqueeze(par,1);
	--> expected_setfailed --> UNUR_ERR_NULL

~_usemirror(par,1);
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_cdfatmode(par,0.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_pdfatmode(par,1.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_verify(par,1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_usesqueeze(par,1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_usemirror(par,1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

[set - invalid parameters:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_srou_new(distr); ]

~_cdfatmode(par,-1.);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_pdfatmode(par,-1.);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

#############################################################################

[get]

#############################################################################

[chg]

[chg - invalid generator object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_pdfparams(gen,fpar,2);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_domain(gen,0.,1.);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_mode(gen,0.);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_cdfatmode(gen,1.);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_pdfatmode(gen,1.);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_pdfarea(gen,1.);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

[chg - invalid parameters:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_srou_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

~_pdfparams(gen,NULL,1);
	--> expected_setfailed --> UNUR_ERR_NULL

~_pdfparams(gen,fpar,UNUR_DISTR_MAXPARAMS+10);
	--> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS

~_pdfparams(gen,fpar,-1);
	--> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS

~_cdfatmode(gen,-1.);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_pdfatmode(gen,-1.);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_domain(gen,1.,-1.);
	--> expected_setfailed --> UNUR_ERR_DISTR_SET

~_pdfarea(gen,-1.);
	--> expected_setfailed --> UNUR_ERR_DISTR_SET

#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL


[init - invalid data:
   distr = unur_distr_cont_new();
   unur_distr_cont_set_pdf(distr,pdf);
   unur_distr_cont_set_mode(distr,0.);
   unur_distr_cont_set_pdfarea(distr,1.);
   par = unur_srou_new(distr); ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_GEN_DATA

#############################################################################

[reinit]

[reinit - exist:
   distr = unur_distr_normal(NULL,0);
   par = unur_srou_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

unur_reinit( gen );
	--> expected_reinit

#############################################################################

[sample]

[sample - compare:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,0); 
   par = NULL; ]

/* default algorithm */
par = unur_srou_new(distr);
        -->compare_double_sequence_par_start

/* default algorithm - verifying mode */
par = unur_srou_new(distr);
unur_srou_set_verify(par,1);
        -->compare_double_sequence_par

[sample - compare:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = NULL; ]

/* use cdf at mode */
par = unur_srou_new(distr);
unur_srou_set_cdfatmode(par,0.5);
        -->compare_double_sequence_par_start

/* use cdf at mode and squeeze */
par = unur_srou_new(distr);
unur_srou_set_cdfatmode(par,0.5);
unur_srou_set_usesqueeze(par,1);
        -->compare_double_sequence_par

/* use cdf at mode - verifying mode */
par = unur_srou_new(distr);
unur_srou_set_cdfatmode(par,0.5);
unur_srou_set_verify(par,1);
        --> compare_double_sequence_par

/* use cdf at mode and squeeze - verifying mode */
par = unur_srou_new(distr);
unur_srou_set_cdfatmode(par,0.5);
unur_srou_set_usesqueeze(par,1);
unur_srou_set_verify(par,1);
        --> compare_double_sequence_par

[sample - compare:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = NULL; ]

/* use mirror principle */
par = unur_srou_new(distr);
unur_srou_set_usemirror(par,1);
        -->compare_double_sequence_par_start

/* use mirror principle - verifying mode */
par = unur_srou_new(distr);
unur_srou_set_usemirror(par,1);
unur_srou_set_verify(par,1);
        --> compare_double_sequence_par

[sample - violate condition:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = NULL; ]

/* pdf at mode is too small: hat < pdf near mode */

/* default algorithm */
par = unur_srou_new(distr);
unur_srou_set_pdfatmode(par,0.1);
        --> run_verify_generator --> UNUR_ERR_GEN_CONDITION
  
/* use cdf at mode and squeeze */
par = unur_srou_new(distr);
unur_srou_set_pdfatmode(par,0.1);
unur_srou_set_cdfatmode(par,0.5);
unur_srou_set_usesqueeze(par,1);
        --> run_verify_generator --> UNUR_ERR_GEN_CONDITION

/* pdf at mode is too large: squeeze > pdf near mode */

/* use cdf at mode and squeeze */
unur_distr_cont_set_pdfarea(distr,10.);
par = unur_srou_new(distr);
unur_srou_set_cdfatmode(par,0.5);
unur_srou_set_pdfatmode(par,10.);
unur_srou_set_usesqueeze(par,1);
        --> run_verify_generator --> UNUR_ERR_GEN_CONDITION


#############################################################################

[validate]

[validate - generators:]

# default program
par[0] = unur_srou_new(@distr@);

# use mirror principle
par[1] = unur_srou_new(@distr@);
unur_srou_set_usemirror(par,1);

# use cdf at mode and squeeze
{ double cdfatmode = unur_distr_cont_eval_cdf( unur_distr_cont_get_mode(@distr@), @distr@ );
par[2] = unur_srou_new(@distr@);
unur_srou_set_cdfatmode(par,cdfatmode);
unur_srou_set_usesqueeze(par,1); }

[validate - distributions:]

# Beta distributions
fpar[0] = 1.;
fpar[1] = 2.;
distr[0] = unur_distr_beta(fpar,2);

fpar[0] = 1.;
fpar[1] = 5.;
distr[1]= unur_distr_beta(fpar,2);

fpar[0] = 1.;
fpar[1] = 100.;
distr[2] = unur_distr_beta(fpar,2);

fpar[0] = 5.;
fpar[1] = 100.;
distr[3] = unur_distr_beta(fpar,2);

fpar[0] = 500.;
fpar[1] = 300.;
distr[4] = unur_distr_beta(fpar,2);

fpar[0] = 5.;
fpar[1] = 10.;
fpar[2] = -3.;
fpar[3] = 15.;
distr[5] = unur_distr_beta(fpar,4);

# Cauchy distributions
distr[6] = unur_distr_cauchy(NULL,0);

fpar[0] = 1.;
fpar[1] = 20.;
distr[7] = unur_distr_cauchy(fpar,2);

# Gamma distributions
fpar[0] = 1.;
distr[8] = unur_distr_gamma(fpar,1);

fpar[0] = 2.;
distr[9] = unur_distr_gamma(fpar,1);

fpar[0] = 3.;
distr[10] = unur_distr_gamma(fpar,1);

fpar[0] = 10.;
distr[11] = unur_distr_gamma(fpar,1);

fpar[0] = 1000.;
distr[12] = unur_distr_gamma(fpar,1);

fpar[0] = 5.;
fpar[1] = 1000.;
distr[13] = unur_distr_gamma(fpar,2);

fpar[0] = 5.;
fpar[1] = 1.e-5;
distr[14] = unur_distr_gamma(fpar,2);

fpar[0] = 5.;
fpar[1] = 10.;
fpar[2] = 1.e+5;
distr[15] = unur_distr_gamma(fpar,3);

# Normal distributions
distr[16] = unur_distr_normal(NULL,0);

fpar[0] = 1.;
fpar[1] = 1.e-5;
distr[17] = unur_distr_normal(fpar,2);

fpar[0] = 0.;
fpar[1] = 1.e+5;
distr[18] = unur_distr_normal(fpar,2);

# Uniform distributions
distr[19] = unur_distr_uniform(NULL,0);

fpar[0] = 1.;
fpar[1] = 20.;
distr[20] = unur_distr_uniform(fpar,2);

[validate - test chi2:]

#par	[0]	[1]	[2]	# distribution
#---------------------------------------------
<0>	 +	 +	 +	# beta
<1>	 +	 +	 +	# beta
<2>	 +	 +	 +	# beta
<3>	 +	 +	 +	# beta
<4>	 +	 +	 +	# beta
<5>	 +	 +	 +	# beta
<6>	 +	 +	 +	# cauchy
<7>	 +	 +	 +	# cauchy
<8>	 +	 +	 +	# gamma
<9>	 +	 +	 +	# gamma
<10>	 +	 +	 +	# gamma
<11>	 +	 +	 +	# gamma
<12>	 +	 +	 +	# gamma
<13>	 +	 +	 +	# gamma
<14>	 +	 +	 +	# gamma
<15>	 +	 +	 +	# gamma
<16>	 +	 +	 +	# normal
<17>	 +	 +	 +	# normal
<18>	 +	 +	 +	# normal
<19>	 +	 +	 +	# uniform
<20>	 +	 +	 +	# uniform


#############################################################################
#############################################################################

[verbatim]

/* pdf that does not work */
double pdf( double x, UNUR_DISTR *distr )
{ 
  return ((x==0.) ? 0. : exp(-x*x/2.));
} /* end of pdf */

#############################################################################
