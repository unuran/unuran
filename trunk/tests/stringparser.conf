# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: STRINGPARSER

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(5678)

[main - header:]

/* prototypes */
int unur_ssr_set_pedantic( struct unur_par *par, int pedantic );

static int COMPARE_SAMPLE_SIZE = 10000;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

#############################################################################

[set]

#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

[init - invalid NULL ptr:]

unur_str2gen( NULL );
	--> expected_NULL --> UNUR_ERR_NULL


[init - invalid distribution block:]

unur_str2gen( "xxxx" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN

unur_str2gen( "method = xxxx" );
	--> expected_NULL --> UNUR_ERR_STR_SYNTAX

unur_str2gen( "normal; xxxx=1" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "normal; pv=(1,2,3)" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "normal,(1,2)" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN

unur_str2gen( "beta" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "beta()" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "beta(1)" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "beta(1,2,3)" );
	--> expected_NULL --> UNUR_ERR_STR

unur_str2gen( "beta(1,2,3,4,5)" );
	--> expected_NULL --> UNUR_ERR_STR

unur_str2gen( "gamma(-0.5)" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID


[init - invalid other block:]

unur_str2gen( "normal : xxxx = arou" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN


[init - invalid method block:
	UNUR_GEN *gen = NULL; ]

gen = unur_str2gen( "normal : method = arou; c = 0" );
	--> none --> UNUR_ERR_STR_UNKNOWN

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal : method = xxx" );
	--> expected_NULL --> UNUR_ERR_STR


[init - invalid urng block:
	UNUR_GEN *gen = NULL; ]

gen = unur_str2gen( "normal : urng = xxx" );
	--> none --> UNUR_ERR_STR

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal : urng = mt19937(123); xxx = 1" );
	--> none --> UNUR_ERR_STR_UNKNOWN

# clear last generator
# prng_free( unur_get_urng (gen) );
unur_free(gen); gen = NULL;
	--> none --> 0x0u

[init - invalid data:]

unur_str2gen( "gamma(0.5): method = tdr" );
	--> expected_NULL --> UNUR_ERR_GEN_CONDITION


#############################################################################

[reinit]

#############################################################################

[sample]

#---------------------------------------------------------------------

[sample - compare arou:
   double fpar[10];
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_normal(NULL,0); 
par = unur_arou_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal: method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal(): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal(0.,1.): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal(0,1): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "distr = normal(0,1): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
fpar[0] = 1.;
fpar[1] = 2.;
distr = unur_distr_normal(fpar,2); 
par = unur_arou_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal(1,2): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
fpar[0] = 1.;
fpar[1] = 2.;
distr = unur_distr_normal(fpar,2);
unur_distr_cont_set_domain(distr,0,2.); 
par = unur_arou_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal(1,2); domain = 0, 2: method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal(1,2); domain = (0,2): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
distr = unur_distr_normal(NULL,0); 
par = unur_arou_new(distr);
fpar[0] = -2;
fpar[1] = -1.5;
fpar[2] = -1;
fpar[3] = -0.5;
fpar[4] = 0;
fpar[5] = 0.5;
fpar[6] = 1;
fpar[7] = 1.5;
fpar[8] = 2;
unur_arou_set_cpoints(par,9,fpar);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal(): \
  method = arou; cpoints = (-2,-1.5,-1,-0.5,0,0.5,1,1.5,2)" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
distr = unur_distr_normal(NULL,0); 
par = unur_arou_new(distr);
unur_arou_set_center(par,0);
unur_arou_set_cpoints(par,20,NULL);
unur_arou_set_guidefactor(par,1.);
unur_arou_set_max_segments(par,40);
unur_arou_set_max_sqhratio(par,0.5);
unur_arou_set_pedantic(par,FALSE);
unur_arou_set_usecenter(par,TRUE);
unur_arou_set_verify(par,TRUE);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal(): \
  method = arou; \
  center = 0; cpoints = 20; guidefactor = 1.; max_segments = 40; \
  max_sqhratio = 0.5; pedantic = off; usecenter = true; verify = on" );
	-->compare_double_sequence_gen

# clear last generator
unur_free(gen); gen = NULL;
	--> none --> 0x0u

#---------------------------------------------------------------------

[sample - compare cstd:
   double fpar[] = {3., 4.};
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_gamma(fpar,2);
par = unur_cstd_new(distr);
unur_cstd_set_variant(par,2);
gen = unur_init(par);
	-->compare_double_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "gamma(3.,4.): method = cstd; variant = 2" );
	-->compare_double_sequence_gen


# clear last generator
unur_free(gen); gen = NULL;
	--> none --> 0x0u

#---------------------------------------------------------------------

[sample - compare dari:
   double fpar[] = {20, 0.8};
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_binomial(fpar,2);
par = unur_dari_new(distr);
unur_dari_set_cpfactor(par,0.7);
unur_dari_set_squeeze(par,TRUE);
unur_dari_set_tablesize(par,30);
unur_dari_set_verify(par,FALSE);
gen = unur_init(par);
	-->compare_int_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "binomial(20,0.8): \
  method = dari; cpfactor = 0.7; squeeze; tablesize = 30; verify = off" );
	-->compare_int_sequence_gen


# clear last generator
unur_free(gen); gen = NULL;
	--> none --> 0x0u

#---------------------------------------------------------------------

[sample - compare dau:
   double pv[] = {.1, .2, .3, .4, .5, .6, .7, .8, .9, 1.};
   double fpar[] = {0.8};
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_discr_new();
unur_distr_discr_set_pv(distr,pv,10);
par = unur_dau_new(distr);
unur_dau_set_urnfactor(par,3.);
gen = unur_init(par);
	-->compare_int_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "discr; pv = (.1, .2, .3, .4, .5, .6, .7, .8, .9, 1.): \
  method = dau; urnfactor = 3." );
	-->compare_int_sequence_gen


unur_free(gen); gen = NULL;
distr = unur_distr_geometric(fpar,1);
par = unur_dau_new(distr);
unur_dau_set_urnfactor(par,3.);
gen = unur_init(par);
	-->compare_int_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "geometric(0.8): method = dau; urnfactor = 3." );
	-->compare_int_sequence_gen

# clear last generator
unur_free(gen); gen = NULL;
	--> none --> 0x0u

#---------------------------------------------------------------------

[sample - compare dgt:
   double pv[] = {.1, .2, .3, .4, .5, .6, .7, .8, .9, 1.};
   double fpar[] = {0.8};
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_discr_new();
unur_distr_discr_set_pv(distr,pv,10);
par = unur_dgt_new(distr);
unur_dgt_set_guidefactor(par,3.);
gen = unur_init(par);
	-->compare_int_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "discr; pv = (.1, .2, .3, .4, .5, .6, .7, .8, .9, 1.): \
  method = dgt; guidefactor = 3." );
	-->compare_int_sequence_gen


unur_free(gen); gen = NULL;
distr = unur_distr_discr_new();
unur_distr_discr_set_pv(distr,pv,10);
par = unur_dgt_new(distr);
unur_dgt_set_variant(par,1);
unur_dgt_set_guidefactor(par,3.);
gen = unur_init(par);
	-->compare_int_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "discr; pv = (.1, .2, .3, .4, .5, .6, .7, .8, .9, 1.): \
  method = dgt; guidefactor = 3.; variant = 1" );
	-->compare_int_sequence_gen


unur_free(gen); gen = NULL;
unur_free(gen); gen = NULL;
distr = unur_distr_discr_new();
unur_distr_discr_set_pv(distr,pv,10);
par = unur_dgt_new(distr);
unur_dgt_set_variant(par,2);
unur_dgt_set_guidefactor(par,3.);
gen = unur_init(par);
	-->compare_int_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "discr; pv = (.1, .2, .3, .4, .5, .6, .7, .8, .9, 1.): \
  method = dgt; guidefactor = 3.; variant = 2" );
	-->compare_int_sequence_gen


unur_free(gen); gen = NULL;
distr = unur_distr_geometric(fpar,1);
par = unur_dgt_new(distr);
unur_dgt_set_guidefactor(par,3.);
gen = unur_init(par);
	-->compare_int_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "geometric(0.8): method = dgt; guidfactor = 3." );
	-->compare_int_sequence_gen

# clear last generator
unur_free(gen); gen = NULL;
	--> none --> 0x0u

#---------------------------------------------------------------------

[sample - compare dstd:
   double fpar[] = {3.};
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_poisson(fpar,1);
par = unur_dstd_new(distr);
unur_dstd_set_variant(par,2);
gen = unur_init(par);
	-->compare_int_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "poisson(3.): method = dstd; variant = 2" );
	-->compare_int_sequence_gen


# clear last generator
unur_free(gen); gen = NULL;
	--> none --> 0x0u

#---------------------------------------------------------------------
#
#[sample - compare empk:
#   double fpar[10];
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
# unur_empk_set_beta
# unur_empk_set_kernel
# unur_empk_set_positive
# unur_empk_set_smoothing
# unur_empk_set_varcor
#
#---------------------------------------------------------------------
#
#[sample - compare ninv:
#   double fpar[10];
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
# unur_ninv_set_max_iter
# unur_ninv_set_start
# unur_ninv_set_table
# unur_ninv_set_usenewton
# unur_ninv_set_useregula
# unur_ninv_set_x_resolution
#
#---------------------------------------------------------------------
#
#[sample - compare srou:
#   double fpar[10];
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
# unur_srou_set_cdfatmode
# unur_srou_set_pdfatmode
# unur_srou_set_usemirror
# unur_srou_set_usesqueeze
# unur_srou_set_verify
#
#---------------------------------------------------------------------
#
#[sample - compare ssr:
#   double fpar[10];
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
# unur_ssr_set_cdfatmode
# unur_ssr_set_pdfatmode
# unur_ssr_set_usesqueeze
# unur_ssr_set_verify
#
#---------------------------------------------------------------------
#
#[sample - compare table:
#   double fpar[10];
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
# unur_tabl_set_areafraction
# unur_tabl_set_boundary
# unur_tabl_set_guidefactor
# unur_tabl_set_max_intervals
# unur_tabl_set_max_sqhratio
# unur_tabl_set_nstp
# unur_tabl_set_slopes,mlist
# unur_tabl_set_variant_setup
# unur_tabl_set_variant_splitmode
# unur_tabl_set_verify
#
#---------------------------------------------------------------------
#
#[sample - compare tdr:
#   double fpar[10];
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
# unur_tdr_set_c
# unur_tdr_set_center
# unur_tdr_set_cpoints,mlist
# unur_tdr_set_guidefactor
# unur_tdr_set_max_intervals
# unur_tdr_set_max_sqhratio
# unur_tdr_set_pedantic
# unur_tdr_set_usecenter
# unur_tdr_set_usemode
# unur_tdr_set_variant_gw
# unur_tdr_set_variant_ia
# unur_tdr_set_variant_ps
# unur_tdr_set_verify
#
#---------------------------------------------------------------------

[sample - compare unif:
   par = NULL;
   gen = NULL; ]

par = unur_unif_new(NULL);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
gen = unur_str2gen( "uniform: method = unif" );
	-->compare_double_sequence_gen

# clear last generator
unur_free(gen); gen = NULL;
	--> none --> 0x0u

#---------------------------------------------------------------------
#
#[sample - compare utdr:
#   double fpar[10];
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
# unur_utdr_set_cpfactor
# unur_utdr_set_deltafactor
# unur_utdr_set_pdfatmode
# unur_utdr_set_verify
#
#---------------------------------------------------------------------
#
#[sample - compare vempk:
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
# Not implemented yet!
#
#---------------------------------------------------------------------
#
#[sample - compare vmt:
#   double fpar[10];
#   distr = NULL;
#   par = NULL;
#   gen = NULL; ]
#
# Not implemented yet!
#
#---------------------------------------------------------------------

#############################################################################

[validate]

#############################################################################
#############################################################################

[verbatim]

#############################################################################


# UNUR_DISTR_CEMP:
# unur_distr_cemp_set_data);

# UNUR_DISTR_CONT:
# unur_distr_cont_set_domain);
# unur_distr_cont_set_mode);
# unur_distr_cont_set_pdfarea);
# unur_distr_cont_set_pdfparams);

# UNUR_DISTR_DISCR:
# unur_distr_discr_set_mode);
# unur_distr_discr_set_pmfparams);
# unur_distr_discr_set_pmfsum);
# unur_distr_discr_set_pv);
