# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: STRINGPARSER

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(5678)

[main - header:]

/* prototypes */
int unur_ssr_set_pedantic( struct unur_par *par, int pedantic );

static int COMPARE_SAMPLE_SIZE = 10000;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

#############################################################################

[set]

#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

[init - invalid NULL ptr:]

unur_str2gen( NULL );
	--> expected_NULL --> UNUR_ERR_NULL


[init - invalid distribution block:]

unur_str2gen( "xxxx" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN

unur_str2gen( "method = xxxx" );
	--> expected_NULL --> UNUR_ERR_STR_SYNTAX

unur_str2gen( "normal; xxxx=1" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "normal; pv=(1,2,3)" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "normal,(1,2)" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN

unur_str2gen( "beta" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "beta()" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "beta(1)" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_str2gen( "beta(1,2,3)" );
	--> expected_NULL --> UNUR_ERR_STR

unur_str2gen( "beta(1,2,3,4,5)" );
	--> expected_NULL --> UNUR_ERR_STR

unur_str2gen( "gamma(-0.5)" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID


[init - invalid other block:]

unur_str2gen( "normal : xxxx = arou" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN


[init - invalid method block:
	UNUR_GEN *gen = NULL; ]

gen = unur_str2gen( "normal : method = arou; c = 0" );
	--> none --> UNUR_ERR_STR_UNKNOWN

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal : method = xxx" );
	--> expected_NULL --> UNUR_ERR_STR


[init - invalid urng block:
	UNUR_GEN *gen = NULL; ]

gen = unur_str2gen( "normal : urng = xxx" );
	--> none --> UNUR_ERR_STR

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal : urng = mt19937(123); xxx = 1" );
	--> none --> UNUR_ERR_STR_UNKNOWN

# clear last generator
# prng_free( unur_get_urng (gen) );
unur_free(gen); gen = NULL;
	--> none --> 0x0u

[init - invalid data:]

unur_str2gen( "gamma(0.5): method = tdr" );
	--> expected_NULL --> UNUR_ERR_GEN_CONDITION


#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare arou:
   double fpar[10];
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_normal(NULL,0); 
par = unur_arou_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal: method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal(): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal(0.,1.): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal(0,1): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "distr = normal(0,1): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
fpar[0] = 1.;
fpar[1] = 2.;
distr = unur_distr_normal(fpar,2); 
par = unur_arou_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal(1,2): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
fpar[0] = 1.;
fpar[1] = 2.;
distr = unur_distr_normal(fpar,2);
unur_distr_cont_set_domain(distr,0,2.); 
par = unur_arou_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal(1,2); domain = 0, 2: method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal(1,2); domain = (0,2): method = arou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
distr = unur_distr_normal(NULL,0); 
par = unur_arou_new(distr);
fpar[0] = -2;
fpar[1] = -1.5;
fpar[2] = -1;
fpar[3] = -0.5;
fpar[4] = 0;
fpar[5] = 0.5;
fpar[6] = 1;
fpar[7] = 1.5;
fpar[8] = 2;
unur_arou_set_cpoints(par,9,fpar);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal(): \
  method = arou; cpoints = (-2,-1.5,-1,-0.5,0,0.5,1,1.5,2)" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
distr = unur_distr_normal(NULL,0); 
par = unur_arou_new(distr);
unur_arou_set_center(par,0);
unur_arou_set_cpoints(par,20,NULL);
unur_arou_set_guidefactor(par,1.);
unur_arou_set_max_segments(par,40);
unur_arou_set_max_sqhratio(par,0.5);
unur_arou_set_pedantic(par,FALSE);
unur_arou_set_usecenter(par,TRUE);
unur_arou_set_verify(par,TRUE);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal(): \
  method = arou; \
  center = 0; cpoints = 20; guidefactor = 1.; max_segments = 40; \
  max_sqhratio = 0.5; pedantic = off; usecenter = true; verify = on" );
	-->compare_double_sequence_gen


#############################################################################

[validate]

#############################################################################
#############################################################################

[verbatim]

#############################################################################


