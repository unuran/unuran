# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: DISTR_CONDI

[main - header:]

/* prototypes */

\#define COMPARE_SAMPLE_SIZE  (500)
\#define VIOLATE_SAMPLE_SIZE   (20)

## work-around for missing functions
int unur_distr_condi_set_pedantic(UNUR_PAR *par, int pedantic);
int unur_distr_condi_chg_verify(UNUR_GEN *gen, int verify);


#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

unur_distr_condi_new( distr, NULL, NULL, 0 );
	--> expected_NULL --> UNUR_ERR_NULL


[new - invalid NULL ptr: 
   distr = unur_distr_multinormal(3,NULL,NULL); ]

unur_distr_condi_new( distr, NULL, NULL, 0 );
	 --> expected_NULL --> UNUR_ERR_NULL


[new - invalid distribution type:
   double p[] = { 1., 2., 3., 4.}; 
   distr = unur_distr_discr_new(); ]

unur_distr_condi_new( distr, p, NULL, 4 );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID


[new - invalid data:
   double p[] = { 1., 2., 3., 4.};
   distr = unur_distr_multinormal(3,NULL,NULL); ]

unur_distr_condi_new( distr, p, NULL, -1 );
	--> expected_NULL --> UNUR_ERR_DISTR_INVALID

unur_distr_condi_new( distr, p, NULL, 3 );
	--> expected_NULL --> UNUR_ERR_DISTR_INVALID


#############################################################################

[set]

[set - invalid NULL ptr:
   distr = NULL; ]

unur_distr_condi_set_condition( distr, NULL, NULL, 0 );
	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid distribution type:
	distr = unur_distr_discr_new(); ]

unur_distr_condi_set_condition( distr, NULL, NULL, 0 );
	--> expected_setfailed --> UNUR_ERR_DISTR_INVALID


[set - invalid data:
   double p[] = { 1., 2., 3., 4.};
   UNUR_DISTR *condi;
   distr = unur_distr_multinormal(3,NULL,NULL); 
   condi = unur_distr_condi_new( distr, p, NULL, 0 ); ]

unur_distr_condi_set_condition( condi, p, NULL, -1 );
	--> expected_setfailed --> UNUR_ERR_DISTR_INVALID

unur_distr_condi_set_condition( condi, p, NULL, 3 );
	--> expected_setfailed --> UNUR_ERR_DISTR_INVALID

unur_distr_free(condi);


#############################################################################

[get]

[get - invalid NULL ptr: 
   const double *pos, *dir;
   int k;
   distr = NULL; ]

unur_distr_condi_get_distribution( distr );
	--> expected_NULL --> UNUR_ERR_NULL

unur_distr_condi_get_condition( distr, &pos, &dir, &k );
	--> expected_setfailed --> UNUR_ERR_NULL


[get - invalid distribution type:
   const double *pos, *dir;
   int k;
   distr = unur_distr_cont_new(); ]

unur_distr_condi_get_distribution( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_INVALID

unur_distr_condi_get_condition( distr, &pos, &dir, &k );
	--> expected_setfailed --> UNUR_ERR_DISTR_INVALID


#############################################################################

[chg]

##############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

[sample - check for memory leaks:
   double p[] = { 1., 2., 3., 4.};
   double dir[] = { 1., -1., 2., -2.};
   UNUR_DISTR *condi;
   distr = unur_distr_multinormal(3,NULL,NULL); 
   condi = unur_distr_condi_new( distr, p, NULL, 0 ); ]

unur_distr_condi_set_condition( condi, p, NULL, 1 );
	--> none --> UNUR_SUCCESS

unur_distr_condi_set_condition( condi, p, dir, 1 );
	--> none --> UNUR_SUCCESS

unur_distr_free(condi);


[sample - check for memory leaks:
   double p[] = { 1., 2., 3., 4.};
   double dir[] = { 1., -1., 2., -2.};
   UNUR_DISTR *condi;
   distr = unur_distr_multinormal(4,NULL,NULL); 
   condi = unur_distr_condi_new( distr, p, dir, 0 ); ]

unur_distr_condi_set_condition( condi, p, dir, 1 );
	--> none --> UNUR_SUCCESS

unur_distr_condi_set_condition( condi, p, NULL, 1 );
	--> none --> UNUR_SUCCESS

unur_distr_condi_set_condition( condi, p, dir, 3 );
	--> none --> UNUR_SUCCESS

unur_distr_free(condi);


[sample - check for memory leaks:
   double p[] = { 1., 2., 3., 4.};
   double dir[] = { 1., -1., 2., -2.};
   UNUR_DISTR *condi;
   distr = unur_distr_multinormal(4,NULL,NULL); 
   condi = unur_distr_condi_new( distr, p, NULL, 0 ); ]

unur_distr_condi_set_condition( condi, p, NULL, 1 );
	--> none --> UNUR_SUCCESS

unur_distr_condi_set_condition( condi, p, dir, 1 );
	--> none --> UNUR_SUCCESS

unur_distr_condi_set_condition( condi, p, NULL, 3 );
	--> none --> UNUR_SUCCESS

unur_distr_free(condi);


#############################################################################

[validate]

[validate - generators:]

# AROU (default)
par[0] = unur_arou_new(@distr@);

# TDR (default)
par[1] = unur_tdr_new(@distr@);

# TDR (default)
par[2] = unur_tdr_new(@distr@);
unur_tdr_set_c(par,0.);

# TABL (default)
par[3] = unur_tabl_new(@distr@);


[validate - distributions:]

# conditional: standard multinormal distribution
\#define dim (3)
UNUR_DISTR *normal = unur_distr_multinormal(dim,NULL,NULL);
int i;
double p[dim]; for(i=0;i<dim;i++) p[i]=3.*unur_urng_sample(NULL);  
distr[0] = unur_distr_condi_new( normal, p, NULL, 0 );
unur_distr_set_name(distr[0],"condi_standardmultinormal_3");
unur_distr_cont_get_mode(distr[0]);
unur_distr_free(normal);
\#undef dim

# conditional: standard multinormal distribution
\#define dim (3)
UNUR_DISTR *normal = unur_distr_multinormal(dim,NULL,NULL);
int i;
double p[dim]; for(i=0;i<dim;i++) p[i]=3.*unur_urng_sample(NULL);  
distr[1] = unur_distr_condi_new( normal, p, NULL, 2 );
unur_distr_set_name(distr[1],"condi_standardmultinormal_3");
unur_distr_cont_get_mode(distr[1]);
unur_distr_free(normal);
\#undef dim

# conditional: standard multinormal distribution
\#define dim (4)
UNUR_DISTR *normal = unur_distr_multinormal(dim,NULL,NULL);
int i; 
double p[dim]; for(i=0;i<dim;i++) p[i]=3.*unur_urng_sample(NULL);  
double dir[dim]; for(i=0;i<dim;i++) dir[i]=0.5+unur_urng_sample(NULL);  
distr[2] = unur_distr_condi_new( normal, p, dir, 0 );
unur_distr_set_name(distr[2],"condi_standardmultinormal_4");
unur_distr_cont_get_mode(distr[2]);
unur_distr_free(normal);
\#undef dim

# conditional: multinormal distribution
\#define dim (5)
UNUR_DISTR *normal = unur_distr_multinormal(dim,NULL,NULL);
int i; 
double p[dim]; for(i=0;i<dim;i++) p[i]=3.*unur_urng_sample(NULL);  
double dir[dim]; for(i=0;i<dim;i++) dir[i]=0.5+unur_urng_sample(NULL);  
distr[3] = unur_distr_condi_new( normal, p, dir, 0 );
unur_distr_set_name(distr[3],"condi_multinormal_5");
unur_distr_cont_get_mode(distr[3]);
unur_distr_free(normal);
\#undef dim


# random multinormal distribution
#\#define dim (3)
#int i;
#double mean[dim], covar[dim*dim];
#UNUR_DISTR *covar_distr;
#UNUR_GEN *covar_gen;
#UNUR_GEN *mean_gen;
#covar_distr = unur_distr_correlation(dim);
#covar_gen = unur_init(unur_mcorr_new(covar_distr));
#mean_gen = unur_str2gen("normal(5,1)");
#for (i=0; i<dim; i++) 
#   mean[i] = unur_sample_cont(mean_gen);
#do { 
#   unur_sample_matr(covar_gen,covar);
#   distr[3] = unur_distr_multinormal(dim,mean,covar); 
#} while (distr[3]==NULL);
#unur_distr_free(covar_distr);
#unur_free(covar_gen);
#unur_free(mean_gen); 
#\#undef dim


# number of distributions: 4


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0]  ... AROU (default)
#  [1]  ... TDR  (default)
#  [2]  ... TDR  (c=0)
#  [3]  ... TABL (default)
#
#	0   1   2   3   # distribution
#-------------------------------------
# cannot run chi2 test because we have no CDF

[validate - verify hat:]
#  + ... pass test
#  ~ ... fail in at most 1% of samples
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0]  ... AROU (default)
#  [1]  ... TDR  (default)
#  [2]  ... TDR  (c=0)
#  [3]  ... TABL (default)
#
#	0   1   2   3   # distribution
#-------------------------------------
<0>	+   +   +   +   # standard multinormal (dim=3, coord=0)
<1>	+   +   +   +   # standard multinormal (dim=3, coord=2)
<2>	+   +   +   +   # standard multinormal (dim=4, random dir)
<3>	+   +   +   +   # multinormal (dim=5, random dir)


#############################################################################
#############################################################################

[verbatim]

## work-around for missing functions
int unur_distr_condi_set_pedantic(UNUR_PAR *par, int pedantic)  { return UNUR_FAILURE; }

int unur_distr_condi_chg_verify(UNUR_GEN *gen, int verify)
{
  if (unur_arou_chg_verify(gen,verify)==UNUR_SUCCESS) return UNUR_SUCCESS;
  if (unur_srou_chg_verify(gen,verify)==UNUR_SUCCESS) return UNUR_SUCCESS;
  if (unur_tdr_chg_verify(gen,verify)==UNUR_SUCCESS) return UNUR_SUCCESS;
  if (unur_tabl_chg_verify(gen,verify)==UNUR_SUCCESS) return UNUR_SUCCESS;
  return UNUR_FAILURE;
}	

#############################################################################
