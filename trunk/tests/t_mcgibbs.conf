# 
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: MCGIBBS

[main - header:]

/* prototypes */

\#include <experimental/mcgibbs.h>

int unur_mcgibbs_set_pedantic( UNUR_PAR *par, int pedantic );

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
        --> expected_NULL --> UNUR_ERR_NULL


[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
         --> expected_NULL --> UNUR_ERR_DISTR_INVALID


#############################################################################

[set]

[set - invalid NULL ptr: 
   double x0[] = {1., 2., 3.};
   par = NULL; ]

~_variant_coordinate( par );
	--> expected_setfailed --> UNUR_ERR_NULL

~_variant_random_direction( par );
	--> expected_setfailed --> UNUR_ERR_NULL

~_startingpoint( par, x0);
	--> expected_setfailed --> UNUR_ERR_NULL

~_thinning( par, 3 );
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   double x0[] = {1., 2., 3.};
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_variant_coordinate( par );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_variant_random_direction( par );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_startingpoint( par, x0);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_thinning( par, 3 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

[set - invalid parameters:
   distr = unur_distr_multinormal( 3, NULL, NULL );
   par = unur_mcgibbs_new(distr); ]

~_thinning( par, 0 );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

free(par);


#############################################################################

[get]

#############################################################################

[chg]

#[chg - invalid generator object:
#   distr = unur_distr_normal(NULL,0);
#   par = unur_arou_new(distr);
#   unur_set_debug(par,0);
#   gen = unur_init( par ); <-- ! NULL ]
#

#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

#############################################################################

[validate]

[validate - generators:]

# coordinate sampling, thinning = dim
par[0] = unur_mcgibbs_new(@distr@);
unur_mcgibbs_set_thinning(par,unur_distr_get_dim(@distr@));

# random direction sampling, thinning = dim
par[1] = unur_mcgibbs_new(@distr@);
unur_mcgibbs_set_variant_random_direction(par);
unur_mcgibbs_set_thinning(par,unur_distr_get_dim(@distr@));

# coordinate sampling, thinning = 10*dim
par[2] = unur_mcgibbs_new(@distr@);
unur_mcgibbs_set_thinning(par,10*unur_distr_get_dim(@distr@));

# random direction sampling, thinning = 10*dim
par[3] = unur_mcgibbs_new(@distr@);
unur_mcgibbs_set_variant_random_direction(par);
unur_mcgibbs_set_thinning(par,10*unur_distr_get_dim(@distr@));


[validate - distributions:]

# standard multinormal distribution
distr[0] = unur_distr_multinormal(2,NULL,NULL);

distr[1] = unur_distr_multinormal(3,NULL,NULL);


# multinormal distribution, dim = 3 
double mean[]  = { 1., 2., 3. };
double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
distr[2] = unur_distr_multinormal(3,mean,covar);


# random multinormal distribution
\#define dim (2)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   distr[3] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[3]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# random multinormal distribution
\#define dim (3)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   distr[4] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[4]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# random multinormal distribution
\#define dim (4)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   distr[5] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[5]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# random multinormal distribution
\#define dim (5)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   distr[6] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[6]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# random multinormal distribution
\#define dim (10)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   distr[7] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[7]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim

# standard "multinormal" distribution with dimension 1
distr[8] = unur_distr_multinormal(1,NULL,NULL);


# multinormal distribution, dim = 1, shifted center 
double mean[]  = { -1. };
double covar[] = { 2. };
distr[9] = unur_distr_multinormal(1,mean,covar);
unur_distr_cvec_set_center(distr[9],NULL);


# multinormal distribution, dim = 3, shifted center 
double mean[]  = { -1., -2., -3. };
double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
distr[10] = unur_distr_multinormal(3,mean,covar);
unur_distr_cvec_set_center(distr[10],NULL);


## random multicauchy distribution
#\#define dim (2)
#int i;
#double mean[dim], covar[dim*dim];
#UNUR_DISTR *covar_distr;
#UNUR_GEN *covar_gen;
#UNUR_GEN *mean_gen;
#covar_distr = unur_distr_correlation(dim);
#covar_gen = unur_init(unur_mcorr_new(covar_distr));
#mean_gen = unur_str2gen("normal(5,1)");
#for (i=0; i<dim; i++) 
#   mean[i] = unur_sample_cont(mean_gen);
#do { 
#   unur_sample_matr(covar_gen,covar);
#   distr[11] = unur_distr_multicauchy(dim,mean,covar); 
#} while (distr[11]==NULL);
#unur_distr_free(covar_distr);
#unur_free(covar_gen);
#unur_free(mean_gen); 
#\#undef dim
#
#
## random multicauchy distribution
#\#define dim (3)
#int i;
#double mean[dim], covar[dim*dim];
#UNUR_DISTR *covar_distr;
#UNUR_GEN *covar_gen;
#UNUR_GEN *mean_gen;
#covar_distr = unur_distr_correlation(dim);
#covar_gen = unur_init(unur_mcorr_new(covar_distr));
#mean_gen = unur_str2gen("normal(5,1)");
#for (i=0; i<dim; i++) 
#   mean[i] = unur_sample_cont(mean_gen);
#do { 
#   unur_sample_matr(covar_gen,covar);
#   distr[12] = unur_distr_multicauchy(dim,mean,covar); 
#} while (distr[12]==NULL);
#unur_distr_free(covar_distr);
#unur_free(covar_gen);
#unur_free(mean_gen); 
#\#undef dim
#
## random multicauchy distribution
#\#define dim (4)
#int i;
#double mean[dim], covar[dim*dim];
#UNUR_DISTR *covar_distr;
#UNUR_GEN *covar_gen;
#UNUR_GEN *mean_gen;
#covar_distr = unur_distr_correlation(dim);
#covar_gen = unur_init(unur_mcorr_new(covar_distr));
#mean_gen = unur_str2gen("normal(5,1)");
#for (i=0; i<dim; i++) 
#   mean[i] = unur_sample_cont(mean_gen);
#do { 
#   unur_sample_matr(covar_gen,covar);
#   distr[13] = unur_distr_multicauchy(dim,mean,covar); 
#} while (distr[13]==NULL);
#unur_distr_free(covar_distr);
#unur_free(covar_gen);
#unur_free(mean_gen); 
#\#undef dim
#
#
#
## random multistudent distribution
#\#define dim (2)
#\#define nu (3)
#int i;
#double mean[dim], covar[dim*dim];
#UNUR_DISTR *covar_distr;
#UNUR_GEN *covar_gen;
#UNUR_GEN *mean_gen;
#covar_distr = unur_distr_correlation(dim);
#covar_gen = unur_init(unur_mcorr_new(covar_distr));
#mean_gen = unur_str2gen("normal(5,1)");
#for (i=0; i<dim; i++) 
#   mean[i] = unur_sample_cont(mean_gen);
#do { 
#   unur_sample_matr(covar_gen,covar);
#   distr[14] = unur_distr_multistudent(dim,nu,mean,covar); 
#} while (distr[14]==NULL);
#unur_distr_free(covar_distr);
#unur_free(covar_gen);
#unur_free(mean_gen); 
#\#undef dim
#\#undef nu
#
#
## random multistudent distribution
#\#define dim (2)
#\#define nu (5)
#int i;
#double mean[dim], covar[dim*dim];
#UNUR_DISTR *covar_distr;
#UNUR_GEN *covar_gen;
#UNUR_GEN *mean_gen;
#covar_distr = unur_distr_correlation(dim);
#covar_gen = unur_init(unur_mcorr_new(covar_distr));
#mean_gen = unur_str2gen("normal(5,1)");
#for (i=0; i<dim; i++) 
#   mean[i] = unur_sample_cont(mean_gen);
#do { 
#   unur_sample_matr(covar_gen,covar);
#   distr[15] = unur_distr_multistudent(dim,nu,mean,covar); 
#} while (distr[15]==NULL);
#unur_distr_free(covar_distr);
#unur_free(covar_gen);
#unur_free(mean_gen); 
#\#undef dim
#\#undef nu
#
#
## random multistudent distribution
#\#define dim (2)
#\#define nu (.5)
#int i;
#double mean[dim], covar[dim*dim];
#UNUR_DISTR *covar_distr;
#UNUR_GEN *covar_gen;
#UNUR_GEN *mean_gen;
#covar_distr = unur_distr_correlation(dim);
#covar_gen = unur_init(unur_mcorr_new(covar_distr));
#mean_gen = unur_str2gen("normal(5,1)");
#for (i=0; i<dim; i++) 
#   mean[i] = unur_sample_cont(mean_gen);
#do { 
#   unur_sample_matr(covar_gen,covar);
#   distr[16] = unur_distr_multistudent(dim,nu,mean,covar); 
#} while (distr[16]==NULL);
#unur_distr_free(covar_distr);
#unur_free(covar_gen);
#unur_free(mean_gen); 
#\#undef dim
#\#undef nu
#
#
## random multistudent distribution
#\#define dim (2)
#\#define nu (1.5)
#int i;
#double mean[dim], covar[dim*dim];
#UNUR_DISTR *covar_distr;
#UNUR_GEN *covar_gen;
#UNUR_GEN *mean_gen;
#covar_distr = unur_distr_correlation(dim);
#covar_gen = unur_init(unur_mcorr_new(covar_distr));
#mean_gen = unur_str2gen("normal(5,1)");
#for (i=0; i<dim; i++) 
#   mean[i] = unur_sample_cont(mean_gen);
#do { 
#   unur_sample_matr(covar_gen,covar);
#   distr[17] = unur_distr_multistudent(dim,nu,mean,covar); 
#} while (distr[17]==NULL);
#unur_distr_free(covar_distr);
#unur_free(covar_gen);
#unur_free(mean_gen); 
#\#undef dim
#\#undef nu
#
#
## random multistudent distribution
#\#define dim (2)
#\#define nu (2.5)
#int i;
#double mean[dim], covar[dim*dim];
#UNUR_DISTR *covar_distr;
#UNUR_GEN *covar_gen;
#UNUR_GEN *mean_gen;
#covar_distr = unur_distr_correlation(dim);
#covar_gen = unur_init(unur_mcorr_new(covar_distr));
#mean_gen = unur_str2gen("normal(5,1)");
#for (i=0; i<dim; i++) 
#   mean[i] = unur_sample_cont(mean_gen);
#do { 
#   unur_sample_matr(covar_gen,covar);
#   distr[18] = unur_distr_multistudent(dim,nu,mean,covar); 
#} while (distr[18]==NULL);
#unur_distr_free(covar_distr);
#unur_free(covar_gen);
#unur_free(mean_gen); 
#\#undef dim
#\#undef nu


# number of distributions: 19


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0] ... coordinate sampling, thinning = dim
#  [1] ... random direction sampling, thinning = dim
#  [2] ... coordinate sampling, thinning = 10*dim
#  [3] ... random direction sampling, thinning = 10*dim
#
#gen    0  1  2  3	# distribution
#---------------------------------------------
<0>	+  +  .  . 	# standard multinormal (dim=2)
<1>	+  +  .  .	# standard multinormal (dim=3)
<2>	+  +  .  .	# multinormal (dim=3)
<3>	+  +  .  .	# random multinormal (dim=2)
<4>	.  +  +  .	# random multinormal (dim=3)
<5>	.  +  +  .	# random multinormal (dim=4)
<6>	.  +  +  .	# random multinormal (dim=5)
<7>	.  +  +  .	# random multinormal (dim=10)
<8>	+  +  .  .	# standard multinormal (dim=1)
<9>	+  +  .  .	# multinormal (dim=1), shifted center
<10>    +  +  .  .	# multinormal (dim=3), shifted center

#<11>	.  +  . # random multicauchy (dim=2)
#<12>	.  +  . # random multicauchy (dim=3)
#<13>	.  .  + # random multicauchy (dim=4)
#<14>	.  +  . # random multistudent (dim=2, nu=3)
#<15>	.  +  . # random multistudent (dim=2, nu=5)
#<16>	.  +  . # random multistudent (dim=2, nu=0.5)
#<17>	.  +  . # random multistudent (dim=2, nu=1.5)
#<18>	.  +  . # random multistudent (dim=2, nu=2.5)


#############################################################################
#############################################################################

[verbatim]

/* dummy function */
int unur_hitrou_set_pedantic( UNUR_PAR *par, int pedantic )
{ return 1; }

#############################################################################
