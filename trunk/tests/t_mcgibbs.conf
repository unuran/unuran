# 
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: MCGIBBS

[main - header:]

/* prototypes */

\#include <experimental/mcgibbs.h>

int unur_mcgibbs_set_pedantic( UNUR_PAR *par, int pedantic );

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)

/* MCGIBBS is a Markov Chain Monte Carlo method and thus it       */
/* is likely to fail the chi-square goodness-of-fit test with the */
/* used sample size.                                              */
/* Thus we accept one "hard" failure and many "soft" failures.    */
\#define CHI2_FAILURES_TOLERATED (1500)

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
        --> expected_NULL --> UNUR_ERR_NULL


[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
         --> expected_NULL --> UNUR_ERR_DISTR_INVALID


#############################################################################

[set]

[set - invalid NULL ptr: 
   double x0[] = {1., 2., 3.};
   par = NULL; ]

~_variant_coordinate( par );
	--> expected_setfailed --> UNUR_ERR_NULL

~_variant_random_direction( par );
	--> expected_setfailed --> UNUR_ERR_NULL

~_startingpoint( par, x0);
	--> expected_setfailed --> UNUR_ERR_NULL

~_thinning( par, 3 );
	--> expected_setfailed --> UNUR_ERR_NULL

[set - invalid parameter object:
   double x0[] = {1., 2., 3.};
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_variant_coordinate( par );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_variant_random_direction( par );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_startingpoint( par, x0);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_thinning( par, 3 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

unur_par_free(par);

[set - invalid parameters:
   distr = unur_distr_multinormal( 3, NULL, NULL );
   par = unur_mcgibbs_new(distr); ]

~_thinning( par, 0 );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

unur_par_free(par);


#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

#############################################################################

[validate]

[validate - generators:]

# T=log, coordinate sampling, thinning = dim
par[0] = unur_mcgibbs_new(@distr@);
unur_mcgibbs_set_thinning(par,unur_distr_get_dim(@distr@));

# T=log, random direction sampling, thinning = dim
par[1] = unur_mcgibbs_new(@distr@);
unur_mcgibbs_set_variant_random_direction(par);
unur_mcgibbs_set_thinning(par,unur_distr_get_dim(@distr@));


# T=sqrt, coordinate sampling, thinning = dim
par[2] = unur_mcgibbs_new(@distr@);
unur_mcgibbs_set_thinning(par,unur_distr_get_dim(@distr@));
unur_mcgibbs_set_c(par,-0.5);

# T=sqrt, random direction sampling, thinning = dim
par[3] = unur_mcgibbs_new(@distr@);
unur_mcgibbs_set_variant_random_direction(par);
unur_mcgibbs_set_thinning(par,unur_distr_get_dim(@distr@));
unur_mcgibbs_set_c(par,-0.5);


[validate - distributions:]

# standard multinormal distribution
distr[0] = unur_distr_multinormal(2,NULL,NULL);

distr[1] = unur_distr_multinormal(3,NULL,NULL);

# multinormal distribution, dim = 1, shifted center 
double mean[]  = { -1. };
double covar[] = { 2. };
distr[2] = unur_distr_multinormal(1,mean,covar);
unur_distr_cvec_set_center(distr[2],NULL);

# multinormal distribution, dim = 3 
double mean[]  = { 1., 2., 3. };
double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
distr[3] = unur_distr_multinormal(3,mean,covar);


# multinormal with AR(1) 
distr[4] = unur_distr_multinormal_ar1(3,NULL,0.9);

distr[5] = unur_distr_multinormal_ar1(4,NULL,0.8);

distr[6] = unur_distr_multinormal_ar1(5,NULL,0.7);

distr[7] = unur_distr_multinormal_ar1(10,NULL,0.6);


# multinormal with AR(1) (rho=0.9, dim=3), shifted center
double mean[]  = { -1., -2., -3., 4., 5., 6., 7., 8., 9., 10. };
distr[8] = unur_distr_multinormal_ar1(3,mean,0.9);

double mean[]  = { -1., -2., -3., 4., 5., 6., 7., 8., 9., 10. };
distr[9] = unur_distr_multinormal_ar1(4,mean,0.8);

double mean[]  = { -1., -2., -3., 4., 5., 6., 7., 8., 9., 10. };
distr[10] = unur_distr_multinormal_ar1(5,mean,0.7);

double mean[]  = { -1., -2., -3., 4., 5., 6., 7., 8., 9., 10. };
distr[11] = unur_distr_multinormal_ar1(10,mean,0.6);


# multinormal with constant rho
distr[12] = unur_distr_multinormal_constantrho(3,NULL,0.9);

distr[13] = unur_distr_multinormal_constantrho(4,NULL,0.8);

distr[14] = unur_distr_multinormal_constantrho(5,NULL,0.7);

distr[15] = unur_distr_multinormal_constantrho(10,NULL,0.6);


# standard multicauchy distribution
distr[16] = unur_distr_multicauchy(2,NULL,NULL);

distr[17] = unur_distr_multicauchy(3,NULL,NULL);


# multicauchy distribution, dim = 3 
double mean[]  = { 1., 2., 3. };
double covar[] = { 1., 0.5, 0.25,  0.5, 1., 0.5,   0.25, 0.5, 1. };
distr[18] = unur_distr_multicauchy(3,mean,covar);

# multicauchy with AR(1) covariance matrix 
distr[19] = unur_distr_multicauchy_ar1(3,NULL,0.7);

distr[20] = unur_distr_multicauchy_ar1(4,NULL,0.6);

distr[21] = unur_distr_multicauchy_ar1(5,NULL,0.5);

distr[22] = unur_distr_multicauchy_ar1(10,NULL,0.4);


# number of distributions: 23


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0] ... T=log, coordinate sampling, thinning = dim
#  [1] ... T=log, random direction sampling, thinning = dim
#  [2] ... T=sqrt, coordinate sampling, thinning = dim
#  [3] ... T=sqrt, random direction sampling, thinning = dim
#
#gen    0  1  2  3	# distribution
#---------------------------------------------
<0>	+  +  .  .	# standard multinormal (dim=2)
<1>	+  +  .  .	# standard multinormal (dim=3)
<2>	+  +  .  .	# multinormal (dim=1), shifted center
<3>	+  +  .  .	# multinormal (dim=3), shifted center
<4>	+  +  .  .	# multinormal with AR(1) (rho=0.9, dim=3) 
<5>	+  +  .  .	# multinormal with AR(1) (rho=0.8, dim=4) 
<6>	+  +  .  .	# multinormal with AR(1) (rho=0.7, dim=5) 
<7>	+  +  .  .	# multinormal with AR(1) (rho=0.6, dim=10) 
<8>	+  +  .  .	# multinormal with AR(1) (rho=0.9, dim=3), shifted center
<9>	+  +  .  .	# multinormal with AR(1) (rho=0.8, dim=4), shifted center
<10>	+  +  .  .	# multinormal with AR(1) (rho=0.7, dim=5), shifted center
<11>	+  +  .  .	# multinormal with AR(1) (rho=0.6, dim=10), shifted center
<12>	+  +  .  .	# multinormal with constant rho (rho=0.9, dim=3) 
<13>	+  +  .  .	# multinormal with constant rho (rho=0.8, dim=4) 
<14>	+  +  .  .	# multinormal with constant rho (rho=0.7, dim=5) 
<15>	+  +  .  .	# multinormal with constant rho (rho=0.6, dim=10) 

<16>	.  .  +  +	# standard multicauchy (dim=2)
<17>	.  .  +  +	# standard multicauchy (dim=3)
<18>	.  .  +  +	# multicauchy (dim=3), shifted center
<19>	.  .  +  +	# multicauchy with AR(1) covariance matrix (rho=0.7, dim=3)
<20>	.  .  +  +	# multicauchy with AR(1) covariance matrix (rho=0.6, dim=4)
<21>	.  .  +  +	# multicauchy with AR(1) covariance matrix (rho=0.5, dim=5)
<22>	.  .  +  +	# multicauchy with AR(1) covariance matrix (rho=0.4, dim=10)


#############################################################################
#############################################################################

[verbatim]

/* dummy function */
int unur_hitrou_set_pedantic( UNUR_PAR *par, int pedantic )
{ return 1; }

#############################################################################
