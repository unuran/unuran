# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: NROU

[main - header:]

/* prototypes */
double pdf( double x, const UNUR_DISTR *distr );

double pdf_sqrtlin( double x, const UNUR_DISTR *distr );
double dpdf_sqrtlin( double x, const UNUR_DISTR *distr );
double cdf_sqrtlin( double x, const UNUR_DISTR *distr );

double pdf_sqrtlinshft(double x, const UNUR_DISTR *distr );
double dpdf_sqrtlinshft( double x, const UNUR_DISTR *distr );
double cdf_sqrtlinshft( double x, const UNUR_DISTR *distr );


int unur_nrou_set_pedantic( struct unur_par *par, int pedantic );

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (50)

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_cont_new(); ]

/* pdf */
~( distr );
	--> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_u(par,-1,1);
	--> expected_setfailed --> UNUR_ERR_NULL

~_v(par,1);
	--> expected_setfailed --> UNUR_ERR_NULL

~_center(par,0.);
	--> expected_setfailed --> UNUR_ERR_NULL

~_verify(par,1);
	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_u(par,-1,1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_v(par,1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_center(par,0.);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_verify(par,1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

free(par);

[set - invalid parameters:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_nrou_new(distr); ]

~_u(par,-1,-2);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_v(par,0);
	--> expected_setfailed --> UNUR_ERR_PAR_SET

free(par);

#############################################################################

# [get]

#############################################################################

[chg]

[chg - invalid generator object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_verify(gen,1);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL


#############################################################################

# [reinit]

#############################################################################

[sample]

[sample - compare:
   distr = unur_distr_normal(NULL,0); 
   par = NULL; ]

/* default algorithm */
par = unur_nrou_new(distr);
unur_nrou_set_u(par,-0.56,0.56);
unur_nrou_set_v(par,0.64);
        -->compare_double_sequence_par_start

/* default algorithm - verifying mode */
par = unur_nrou_new(distr);
unur_nrou_set_u(par,-0.56,0.56);
unur_nrou_set_v(par,0.64);
unur_nrou_set_verify(par,1);
        -->compare_double_sequence_par

#.....................................................................

[sample - violate condition:
   distr = unur_distr_normal(NULL,0);
   par = NULL; ]

/* v-value is too small */
par = unur_nrou_new(distr);
unur_nrou_set_u(par,-0.56,0.56);
unur_nrou_set_v(par,0.1);
        --> run_verify_generator --> UNUR_ERR_GEN_CONDITION
  
/* u-value is too small */
par = unur_nrou_new(distr);
unur_nrou_set_u(par,-0.2,0.56);
unur_nrou_set_v(par,0.64);
        --> run_verify_generator --> UNUR_ERR_GEN_CONDITION
  
/* u-value is too small */
par = unur_nrou_new(distr);
unur_nrou_set_u(par,-0.56,0.26);
unur_nrou_set_v(par,0.64);
        --> run_verify_generator --> UNUR_ERR_GEN_CONDITION

#.....................................................................

[sample - compare clone:
   UNUR_GEN *clone;
   distr = unur_distr_normal(NULL,0); 
   par = NULL;
   gen = NULL; ]

/* original generator object */
par = unur_nrou_new(distr);
unur_nrou_set_u(par,-0.56,0.56);
unur_nrou_set_v(par,0.64);
gen = unur_init(par);
        -->compare_double_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
unur_free(gen);
gen = clone;
        -->compare_double_sequence_gen

#.....................................................................

[sample - compare stringparser:
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_normal(NULL,0);
par = unur_nrou_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start
	
unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal() & method = nrou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
distr = unur_distr_normal(NULL,0);
par = unur_nrou_new(distr);
unur_nrou_set_u(par,-0.6,0.6);
unur_nrou_set_v(par,1.);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "normal() & method = nrou; u=(-0.6,0.6); v=1" );
	-->compare_double_sequence_gen


#############################################################################

[validate]

[validate - generators:]

# default variant
par[0] = unur_nrou_new(@distr@);

# use bounding rectangle
par[1] = unur_nrou_new(@distr@);
unur_nrou_set_u(par,-0.6,0.6);
unur_nrou_set_v(par,1.);

# r-parameter = 0.5
par[2] = unur_nrou_new(@distr@);
unur_nrou_set_r(par, 0.5);

# r-parameter = 2.0
par[3] = unur_nrou_new(@distr@);
unur_nrou_set_r(par, 2.0 );

[validate - distributions:]

# Beta distributions
fpm[0] = 1.;
fpm[1] = 2.;
distr[0] = unur_distr_beta(fpm,2);

fpm[0] = 1.;
fpm[1] = 5.;
distr[1] = unur_distr_beta(fpm,2);

fpm[0] = 1.;
fpm[1] = 100.;
distr[2] = unur_distr_beta(fpm,2);

fpm[0] = 3.;
fpm[1] = 4.;
distr[3] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 100.;
distr[4] = unur_distr_beta(fpm,2);

fpm[0] = 500.;
fpm[1] = 300.;
distr[5] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = -3.;
fpm[3] = 15.;
distr[6] = unur_distr_beta(fpm,4);

# Cauchy distributions
distr[7] = unur_distr_cauchy(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[8] = unur_distr_cauchy(fpm,2);

# Exponential distributions
distr[23] = unur_distr_exponential(NULL,0);

fpm[0] = 30.;
fpm[1] = -5.;
distr[24] = unur_distr_exponential(fpm,2);

# Gamma distributions
fpm[0] = 1.;
distr[9] = unur_distr_gamma(fpm,1);

fpm[0] = 2.;
distr[10] = unur_distr_gamma(fpm,1);

fpm[0] = 3.;
distr[11] = unur_distr_gamma(fpm,1);

fpm[0] = 10.;
distr[12] = unur_distr_gamma(fpm,1);

fpm[0] = 1000.;
distr[13] = unur_distr_gamma(fpm,1);

fpm[0] = 5.;
fpm[1] = 1000.;
distr[14] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 1.e-5;
distr[15] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = 1000;
distr[16] = unur_distr_gamma(fpm,3);

fpm[0] = 1.;
fpm[1] = 4.;
distr[29] = unur_distr_gamma(fpm,2);

# Laplace distributions
distr[25] = unur_distr_laplace(NULL,0);

fpm[0] = -10.;
fpm[1] = 100.;
distr[26] = unur_distr_laplace(fpm,2);

# Normal distributions
distr[17] = unur_distr_normal(NULL,0);

fpm[0] = 1.;
fpm[1] = 1.e-5;
distr[18] = unur_distr_normal(fpm,2);

fpm[0] = 0.;
fpm[1] = 1.e+5;
distr[19] = unur_distr_normal(fpm,2);

# Uniform distributions
distr[20] = unur_distr_uniform(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[21] = unur_distr_uniform(fpm,2);

# pdf with piecewise linear function as transformed density with T = -1/sqrt
distr[27] = unur_distr_cont_new();
unur_distr_cont_set_pdf(distr[27],pdf_sqrtlin);
unur_distr_cont_set_dpdf(distr[27],dpdf_sqrtlin);
unur_distr_cont_set_cdf(distr[27],cdf_sqrtlin);
unur_distr_set_name(distr[27],"sqrtlin");
unur_distr_cont_set_mode(distr[27],0.);
unur_distr_cont_set_pdfarea(distr[27],2.);

# pdf with piecewise linear function as transformed density with T = -1/sqrt and shifted mode
distr[28] = unur_distr_cont_new();
unur_distr_cont_set_pdf(distr[28],pdf_sqrtlinshft);
unur_distr_cont_set_dpdf(distr[28],dpdf_sqrtlinshft);
unur_distr_cont_set_cdf(distr[28],cdf_sqrtlinshft);
unur_distr_set_name(distr[28],"sqrtlin");
unur_distr_cont_set_mode(distr[28],1000.);
unur_distr_cont_set_pdfarea(distr[28],2.);

# truncated distributions
distr[22] = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(distr[22],0.1,1.);
unur_distr_cont_upd_mode(distr[22]);
unur_distr_cont_upd_pdfarea(distr[22]);

# number of distributions: 29

[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0]  ... default variant
#  [1]  ... use rectangle
#  [2]  ... r=0.5
#  [3]  ... r=2.0

#
#	0  1  2  3 # distribution
#---------------------------------------------------------------------
<0>	+  .  +  + # beta (1, 2)
<1>	+  .  +  + # beta (1, 5)
<2>	+  .  +  + # beta (1, 100)
<3>	+  .  +  + # beta (3, 4)
<4>	+  .  +  + # beta (5, 100)
<5>	+  .  +  + # beta (500, 300)
<6>	+  .  +  + # beta (5, 10, -3, 15)
<23>	+  .  +  + # exponential ()
<24>	+  .  +  + # exponential (30, -5)
<7>	+  .  .  + # cauchy ()
<8>	+  .  .  + # cauchy (1, 20)
<9>	+  .  +  + # gamma (1)
<10>	+  .  +  + # gamma (2)
<11>	+  .  +  + # gamma (3)
<12>	+  .  +  + # gamma (10)
<13>	+  .  +  + # gamma (1000)
<29>	+  .  +  + # gamma (1, 4)
<14>	+  .  +  + # gamma (5, 1000, 0)
<15>	+  .  +  + # gamma (5, 1e-05, 0)
<16>	+  .  +  + # gamma (5, 10, 100000)
<25>	+  .  +  + # laplace ()
<26>	+  -  +  + # laplace (-10, 100)
<17>	+  +  +  + # normal ()
<18>	+  .  +  + # normal (1, 1e-05)
<19>	+  .  +  + # normal (1, 1e+05)
<20>	+  .  +  + # uniform ()
<21>	+  .  +  + # uniform (1, 20)
<22>	+  .  +  + # cauchy () - truncated
<27>	+  .  .  + # pdf with piecewise linear function as transformed density with T = -1/sqrt
<28>	+  .  .  + # [27] with shifted mode

# number of distributions: 29


[validate - verify hat:]

#  + ... pass test
#  ~ ... fail in at most 1% of samples
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0]  ... default variant
#  [1]  ... use rectangle
#  [2]  ... r=0.5
#  [3]  ... r=2.0

#
#	0  1  2  3 # distribution
#---------------------------------------------------------------------
<0>	+  .  +  + # beta (1, 2)
<1>	+  .  +  + # beta (1, 5)
<2>	+  .  +  + # beta (1, 100)
<3>	+  .  +  + # beta (3, 4)
<4>	+  .  +  + # beta (5, 100)
<5>	+  .  +  + # beta (500, 300)
<6>	+  .  +  + # beta (5, 10, -3, 15)
<23>	+  .  +  + # exponential ()
<24>	+  .  +  + # exponential (30, -5)
<7>	+  .  .  + # cauchy ()
<8>	+  .  .  + # cauchy (1, 20)
<9>	+  .  +  + # gamma (1)
<10>	+  .  +  + # gamma (2)
<11>	+  .  +  + # gamma (3)
<12>	+  .  +  + # gamma (10)
<13>	+  .  +  + # gamma (1000)
<29>	+  .  +  + # gamma (1, 4)
<14>	+  .  +  + # gamma (5, 1000, 0)
<15>	+  .  +  + # gamma (5, 1e-05, 0)
<16>	+  .  +  + # gamma (5, 10, 100000)
<25>	+  .  +  + # laplace ()
<26>	+  -  +  + # laplace (-10, 100)
<17>	+  +  +  + # normal ()
<18>	+  .  +  + # normal (1, 1e-05)
<19>	+  .  +  + # normal (1, 1e+05)
<20>	+  .  +  + # uniform ()
<21>	+  .  +  + # uniform (1, 20)
<22>	+  .  +  + # cauchy () - truncated
<27>	+  .  .  + # pdf with piecewise linear function as transformed density with T = -1/sqrt
<28>	+  .  .  + # [27] with shifted mode

# number of distributions: 29 

#############################################################################
#############################################################################

[verbatim]

/* pdf that does not work */
double pdf( double x, const UNUR_DISTR *distr )
{ 
  return ((x==0.) ? 0. : exp(-x*x/2.));
} /* end of pdf */

/* pdf with piecewise linear function as transformed density with T = -1/sqrt */
double pdf_sqrtlin( double x, const UNUR_DISTR *distr )
{ 
	double y = 1./(fabs(x)+1.);
	return y*y;
}
double dpdf_sqrtlin( double x, const UNUR_DISTR *distr )
{ 
	double y = 1./(fabs(x)+1.);
	y = 2.*y*y*y;
	return ((x<0.) ? y : - y);
}
double cdf_sqrtlin( double x, const UNUR_DISTR *distr )
{ 
	if (x<=0.)
		return 0.5/(1.-x);
	else
		return (1.-0.5/(1.+x));
}

/* pdf with piecewise linear function as transformed density with T = -1/sqrt and shifted mode */
double pdf_sqrtlinshft( double x, const UNUR_DISTR *distr )
{ 
	double y;
	x -= 1000.;
	y = 1./(fabs(x)+1.);
	return y*y;
}
double dpdf_sqrtlinshft( double x, const UNUR_DISTR *distr )
{ 
	double y;
	x -= 1000.;
	y = 1./(fabs(x)+1.);
	y = 2.*y*y*y;
	return ((x<0.) ? y : - y);
}
double cdf_sqrtlinshft( double x, const UNUR_DISTR *distr )
{ 
	x -= 1000.;
	if (x<=0.)
		return 0.5/(1.-x);
	else
		return (1.-0.5/(1.+x));
}

/* dummy function */
int unur_nrou_set_pedantic( struct unur_par *par, int pedantic )
{ return 1; }

#############################################################################
