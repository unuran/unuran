# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: STRINGPARSER

[main - header:]

/* prototypes */
int unur_ssr_set_pedantic( struct unur_par *par, int pedantic );

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)

#############################################################################

[new]

#############################################################################

[set]

#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

[init - invalid NULL ptr:
   gen = NULL; ]

gen = unur_str2gen( NULL );
	--> expected_NULL --> UNUR_ERR_NULL


[init - invalid distribution block:
   gen = NULL; ]

gen = unur_str2gen( "xxxx" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN

unur_free(gen); gen = NULL;
gen = unur_str2gen( "method = xxxx" );
	--> expected_NULL --> UNUR_ERR_STR_SYNTAX

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal; xxxx=1" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal; pv=(1,2,3)" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal,(1,2)" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN

unur_free(gen); gen = NULL;
gen = unur_str2gen( "beta" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_free(gen); gen = NULL;
gen = unur_str2gen( "beta()" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_free(gen); gen = NULL;
gen = unur_str2gen( "beta(1)" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID

unur_free(gen); gen = NULL;
gen = unur_str2gen( "beta(1,2,3)" );
	--> none --> UNUR_ERR_DISTR_NPARAMS

unur_free(gen); gen = NULL;
gen = unur_str2gen( "beta(1,2,3,4,5)" );
	--> none --> UNUR_ERR_DISTR_NPARAMS

unur_free(gen); gen = NULL;
gen = unur_str2gen( "gamma(-0.5)" );
	--> expected_NULL --> UNUR_ERR_STR_INVALID


[init - invalid other block:
   gen = NULL; ]

gen = unur_str2gen( "normal & xxxx = arou" );
	--> expected_NULL --> UNUR_ERR_STR_UNKNOWN


[init - invalid method block:
   gen = NULL; ]

gen = unur_str2gen( "normal & method = arou; c = 0" );
	--> none --> UNUR_ERR_STR_UNKNOWN

unur_free(gen); gen = NULL;
gen = unur_str2gen( "normal & method = xxx" );
	--> expected_NULL --> UNUR_ERR_NULL


[init - invalid urng block:
   gen = NULL; ]

gen = unur_str2gen( "normal & urng = xxx" );
	--> none --> UNUR_ERR_STR

unur_free(gen); gen = NULL;
\#if UNUR_URNG_TYPE == UNUR_URNG_PRNG
gen = unur_str2gen( "normal & urng = mt19937(123); xxx = 1" );
	--> none --> UNUR_ERR_STR_UNKNOWN

\#endif


[init - invalid data:
   gen = NULL; ]

gen = unur_str2gen( "gamma(0.5) & method = tdr" );
	--> expected_NULL --> UNUR_ERR_GEN_CONDITION


#############################################################################

[reinit]

#############################################################################

[sample]

#---------------------------------------------------------------------

[sample - compare function parser - cont:
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_normal(NULL,0); 
par = unur_srou_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "cont; pdf = \"(1/sqrt(2*pi)*exp(-x^2/2))\"; mode = 0; pdfarea = 1 & \
	             method = srou" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
distr = unur_distr_normal(NULL,0); 
par = unur_ssr_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "cont; pdf = \"(1/sqrt(2*pi)*exp(-x^2/2))\"; mode = 0; pdfarea = 1 & \
	             method = ssr" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
distr = unur_distr_normal(NULL,0); 
par = unur_utdr_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "cont; pdf = \"(1/sqrt(2*pi)*exp(-x^2/2))\"; mode = 0; pdfarea = 1 & \
	             method = utdr" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
distr = unur_distr_normal(NULL,0); 
par = unur_tdr_new(distr);
unur_tdr_set_cpoints(par,8,NULL);
unur_tdr_set_max_sqhratio(par,0.);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "cont; pdf = \"(1/sqrt(2*pi)*exp(-x^2/2))\"; mode = 0; pdfarea = 1 & \
	             method = tdr; cpoints = 8; max_sqhratio = 0." );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
distr = unur_distr_normal(NULL,0); 
par = unur_arou_new(distr);
unur_arou_set_cpoints(par,8,NULL);
unur_arou_set_max_sqhratio(par,0.);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "cont; pdf = \"(1/sqrt(2*pi)*exp(-x^2/2))\"; mode = 0; pdfarea = 1 & \
	             method = arou; cpoints = 8; max_sqhratio = 0." );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
distr = unur_distr_cont_new();
unur_distr_cont_set_cdfstr(distr,"1-exp(-x)");
par = unur_ninv_new(distr);
unur_ninv_set_usenewton(par);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "cont; cdf = \"1-exp(-x)\"; domain = (0,inf)& \
	             method = ninv; usenewton" );
	-->compare_double_sequence_gen

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
distr = unur_distr_cont_new();
unur_distr_cont_set_hrstr(distr,"1/(1+x)");
par = unur_hrb_new(distr);
gen = unur_init(par);
	-->compare_double_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "cont; hr = \"1/(1+x)\"; domain = (0,inf)& \
	             method = hrb" );
	-->compare_double_sequence_gen


## Not tested:
## 
## unur_distr_cont_set_pdfparams();

#---------------------------------------------------------------------

[sample - compare function parser - discr:
   double fpar[] = {0.4};
   distr = NULL;
   par = NULL;
   gen = NULL; ]

distr = unur_distr_geometric(fpar,1); 
par = unur_dsrou_new(distr);
gen = unur_init(par);
	-->compare_int_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "discr; pmf = \"0.4 * (1-0.4)^k\"; domain = (0,inf); mode = 0; pmfsum = 1 & \
	             method = dsrou" );
	-->compare_int_sequence_gen

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
distr = unur_distr_geometric(fpar,1); 
par = unur_dau_new(distr);
gen = unur_init(par);
	-->compare_int_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "discr; pmf = \"0.4 * (1-0.4)^k\"; domain = (0,inf); mode = 0; pmfsum = 1 & \
	             method = dau" );
	-->compare_int_sequence_gen

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
distr = unur_distr_geometric(fpar,1); 
par = unur_dgt_new(distr);
gen = unur_init(par);
	-->compare_int_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "discr; pmf = \"0.4 * (1-0.4)^k\"; domain = (0,inf); mode = 0; pmfsum = 1 & \
	             method = dgt" );
	-->compare_int_sequence_gen

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
distr = unur_distr_geometric(fpar,1); 
par = unur_dari_new(distr);
gen = unur_init(par);
	-->compare_int_sequence_gen_start

unur_free(gen); gen = NULL;
unur_distr_free(distr); distr = NULL;
gen = unur_str2gen( "discr; pmf = \"0.4 * (1-0.4)^k\"; domain = (0,inf); mode = 0; pmfsum = 1 & \
	             method = dari" );
	-->compare_int_sequence_gen

## Not tested:
## 
## unur_distr_discr_set_mode();
## unur_distr_discr_set_pmfparams();

#############################################################################

[validate]

#############################################################################
#############################################################################

[verbatim]

#############################################################################

