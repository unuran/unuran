# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: VMT

[main - header:]

/* prototypes */

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
        --> expected_NULL --> UNUR_ERR_NULL


[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
         --> expected_NULL --> UNUR_ERR_DISTR_INVALID


[new - data missing in distribution object:
   double mean[] = {1.,2.};
   distr = unur_distr_cvec_new(2); ]

/* mean */
~( distr );
        --> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

/* covariance matrix */
unur_distr_cvec_set_mean(distr,mean);
~( distr );
        --> expected_NULL --> UNUR_ERR_DISTR_REQUIRED


#############################################################################

[set]

#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare clone:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   UNUR_GEN *clone;
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_vmt_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

/* normal distribution */
	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
	-->compare_cvec_sequence_gen

unur_free(clone);

#.....................................................................

[sample - compare clone:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   double beta_params[] = {3.,5.};
   UNUR_GEN *clone;
   distr = unur_distr_cvec_new(dim);
   unur_distr_cvec_set_mean(distr,mean);
   unur_distr_cvec_set_covar(distr,covar);
   unur_distr_cvec_set_stdmarginal_list(distr,
	unur_distr_normal(NULL,0),
	unur_distr_cauchy(NULL,0),
	unur_distr_beta(beta_params,2) );
   par = unur_vmt_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

/* multivariate distribution with given marginals */
	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
	-->compare_cvec_sequence_gen

unur_free(clone);

#.....................................................................

[sample - compare clone:
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   double beta_params[] = {3.,5.};
   UNUR_DISTR *marginals[3];
   UNUR_GEN *clone;
   distr = unur_distr_cvec_new(3);
   unur_distr_cvec_set_mean(distr,mean);
   unur_distr_cvec_set_covar(distr,covar);
   marginals[0] = unur_distr_normal(NULL,0);
   marginals[1] = unur_distr_cauchy(NULL,0);
   marginals[2] = unur_distr_beta(beta_params,2);
   unur_distr_cvec_set_stdmarginal_array(distr,marginals);
   unur_distr_free(marginals[0]);
   unur_distr_free(marginals[1]);
   unur_distr_free(marginals[2]);
   par = unur_vmt_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

/* multivariate distribution with given marginals */
	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
	-->compare_cvec_sequence_gen

unur_free(clone);


#############################################################################

[validate]

[validate - generators:]

# default program
par[0] = unur_vmt_new(@distr@);

[validate - distributions:]

# standard multinormal distribution
distr[0] = unur_distr_multinormal(3,NULL,NULL);

# dim = 3 
double mean[]  = { 1., 2., 3. };
double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
distr[1] = unur_distr_multinormal(3,mean,covar);

# random, dim = 3
\#define dim (3)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr = unur_distr_correlation(dim);
UNUR_GEN *covar_gen = unur_init(unur_mcorr_new(covar_distr));
UNUR_GEN *mean_gen = unur_str2gen("normal(5,1)");
unur_sample_matr(covar_gen,covar);
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
distr[2] = unur_distr_multinormal(3,mean,covar);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim

# random, dim = 3
\#define dim (3)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr = unur_distr_correlation(dim);
UNUR_GEN *covar_gen = unur_init(unur_mcorr_new(covar_distr));
UNUR_GEN *mean_gen = unur_str2gen("normal(5,1)");
unur_sample_matr(covar_gen,covar);
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
distr[3] = unur_distr_multinormal(3,mean,covar);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim

# random, dim = 4
\#define dim (4)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr = unur_distr_correlation(dim);
UNUR_GEN *covar_gen = unur_init(unur_mcorr_new(covar_distr));
UNUR_GEN *mean_gen = unur_str2gen("normal(5,1)");
unur_sample_matr(covar_gen,covar);
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
distr[4] = unur_distr_multinormal(3,mean,covar);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim

# random, dim = 5
\#define dim (5)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr = unur_distr_correlation(dim);
UNUR_GEN *covar_gen = unur_init(unur_mcorr_new(covar_distr));
UNUR_GEN *mean_gen = unur_str2gen("normal(5,1)");
unur_sample_matr(covar_gen,covar);
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
distr[5] = unur_distr_multinormal(3,mean,covar);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim

# random, dim = 7
\#define dim (7)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr = unur_distr_correlation(dim);
UNUR_GEN *covar_gen = unur_init(unur_mcorr_new(covar_distr));
UNUR_GEN *mean_gen = unur_str2gen("normal(5,1)");
unur_sample_matr(covar_gen,covar);
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
distr[6] = unur_distr_multinormal(3,mean,covar);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim

# random, dim = 10
\#define dim (10)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr = unur_distr_correlation(dim);
UNUR_GEN *covar_gen = unur_init(unur_mcorr_new(covar_distr));
UNUR_GEN *mean_gen = unur_str2gen("normal(5,1)");
unur_sample_matr(covar_gen,covar);
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
distr[7] = unur_distr_multinormal(3,mean,covar);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim

# random, dim = 15
\#define dim (15)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr = unur_distr_correlation(dim);
UNUR_GEN *covar_gen = unur_init(unur_mcorr_new(covar_distr));
UNUR_GEN *mean_gen = unur_str2gen("normal(5,1)");
unur_sample_matr(covar_gen,covar);
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
distr[8] = unur_distr_multinormal(3,mean,covar);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim

# random, dim = 20
\#define dim (20)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr = unur_distr_correlation(dim);
UNUR_GEN *covar_gen = unur_init(unur_mcorr_new(covar_distr));
UNUR_GEN *mean_gen = unur_str2gen("normal(5,1)");
unur_sample_matr(covar_gen,covar);
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
distr[9] = unur_distr_multinormal(3,mean,covar);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# number of distributions: 10

[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0] ... default variant
#
#gen    0   # distribution
#---------------------------------------------
<0>     +   # standard multinormal (dim=3)
<1>     +   # multinormal (dim=3)
<2>     +   # random multinormal (dim=3)
<3>     +   # random multinormal (dim=3)
#<4>     +   # random multinormal (dim=4)
#<5>     +   # random multinormal (dim=5)
#<6>     +   # random multinormal (dim=7)
#<7>     +   # random multinormal (dim=10)
#<8>     +   # random multinormal (dim=15)
#<9>     +   # random multinormal (dim=20)


#############################################################################
#############################################################################

[verbatim]

#############################################################################
