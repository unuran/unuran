# $Id$
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: VMT

[main - header:]

/* prototypes */

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
        --> expected_NULL --> UNUR_ERR_NULL


[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
         --> expected_NULL --> UNUR_ERR_DISTR_INVALID


[new - data missing in distribution object:
   double mean[] = {1.,2.};
   distr = unur_distr_cvec_new(2); ]

/* mean */
~( distr );
        --> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

/* covariance matrix */
unur_distr_cvec_set_mean(distr,mean);
~( distr );
        --> expected_NULL --> UNUR_ERR_DISTR_REQUIRED


#############################################################################

[set]

#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare clone:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   UNUR_GEN *clone;
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_vmt_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

/* normal distribution */
	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
	-->compare_cvec_sequence_gen

unur_free(clone);

#.....................................................................

[sample - compare clone:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   double beta_params[] = {3.,5.};
   UNUR_GEN *clone;
   distr = unur_distr_cvec_new(dim);
   unur_distr_cvec_set_mean(distr,mean);
   unur_distr_cvec_set_covar(distr,covar);
   unur_distr_cvec_set_stdmarginal_list(distr,
	unur_distr_normal(NULL,0),
	unur_distr_cauchy(NULL,0),
	unur_distr_beta(beta_params,2) );
   par = unur_vmt_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

/* multivariate distribution with given marginals */
	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
	-->compare_cvec_sequence_gen

unur_free(clone);

#.....................................................................

[sample - compare clone:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   double beta_params[] = {3.,5.};
   UNUR_DISTR *marginals[dim];
   UNUR_GEN *clone;
   distr = unur_distr_cvec_new(dim);
   unur_distr_cvec_set_mean(distr,mean);
   unur_distr_cvec_set_covar(distr,covar);
   marginals[0] = unur_distr_normal(NULL,0);
   marginals[1] = unur_distr_cauchy(NULL,0);
   marginals[2] = unur_distr_beta(beta_params,2);
   unur_distr_cvec_set_stdmarginal_array(distr,marginals);
   unur_distr_free(marginals[0]);
   unur_distr_free(marginals[1]);
   unur_distr_free(marginals[2]);
   par = unur_vmt_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

/* multivariate distribution with given marginals */
	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
	-->compare_cvec_sequence_gen

unur_free(clone);


#############################################################################

[validate]

#
# TODO (Still missing!)
#

#############################################################################
#############################################################################

[verbatim]

#############################################################################
