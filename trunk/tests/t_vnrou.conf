# 
#############################################################################

[main]

[main - data:]

# method (for information only: the program scans the file name)
method: VNROU

[main - header:]

/* prototypes */

int unur_vnrou_set_pedantic( UNUR_PAR *par, int pedantic );

\#define COMPARE_SAMPLE_SIZE   (10000)
\#define VIOLATE_SAMPLE_SIZE   (20)

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
        --> expected_NULL --> UNUR_ERR_NULL


[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
         --> expected_NULL --> UNUR_ERR_DISTR_INVALID


#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_u( par, NULL, NULL );
	--> expected_setfailed --> UNUR_ERR_NULL

~_v( par, 1. );
	--> expected_setfailed --> UNUR_ERR_NULL

~_r( par, 1. );
	--> expected_setfailed --> UNUR_ERR_NULL

~_verify( par, 1);
	--> expected_setfailed --> UNUR_ERR_NULL


[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_u( par, NULL, NULL );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_v( par, 1. );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_r( par, 1. );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_verify( par, 1);
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

unur_par_free(par);

[set - invalid parameters:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   double umin[] = {1.,1.,1.};
   double umax[] = {2.,1.,2.};
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_vnrou_new(distr); ]

~_u( par, NULL, NULL );
	--> expected_setfailed --> UNUR_ERR_NULL

~_u( par, umin, umax );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_v( par, -1. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_v( par, 0. );
	--> expected_setfailed --> UNUR_ERR_PAR_SET

~_r( par, 0. );
	--> none --> UNUR_ERR_PAR_SET

unur_par_free(par);


#############################################################################

[get]

#############################################################################

[chg]

[chg - invalid generator object:
   distr = unur_distr_normal(NULL,0);
   par = unur_arou_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_verify(gen,1);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID


#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_vnrou_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

# default
	-->compare_cvec_sequence_gen_start

# default - verifying mode
unur_free(gen);
par = unur_vnrou_new(distr);
unur_vnrou_set_verify(par,1);
gen = unur_init( par );
	-->compare_cvec_sequence_gen


# r = 0.5
unur_free(gen);
par = unur_vnrou_new(distr);
unur_vnrou_set_r(par,0.5);
gen = unur_init( par );
	-->compare_cvec_sequence_gen_start

# r = 0.5 - verifying mode
unur_free(gen);
par = unur_vnrou_new(distr);
unur_vnrou_set_r(par,0.5);
unur_vnrou_set_verify(par,1);
gen = unur_init( par );
	-->compare_cvec_sequence_gen


[sample - compare 1dim:
   const int dim = 1;
   double mean[] = {1.};
   double covar[] = {2.};
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_vnrou_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

# default
	-->compare_cvec_sequence_gen_start

# default - verifying mode
unur_free(gen);
par = unur_vnrou_new(distr);
unur_vnrou_set_verify(par,1);
gen = unur_init( par );
	-->compare_cvec_sequence_gen


[sample - compare clone:
   const int dim = 3;
   double mean[] = {1.,2.,3.};
   double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
   UNUR_GEN *clone;
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_vnrou_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

/* normal distribution */
	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
	-->compare_cvec_sequence_gen

unur_free(clone);

[sample - compare clone 1dim:
   const int dim = 1;
   double mean[] = {1.};
   double covar[] = {2.};
   UNUR_GEN *clone;
   distr = unur_distr_multinormal( dim, mean, covar );
   par = unur_vnrou_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

/* normal distribution */
	-->compare_cvec_sequence_gen_start

/* clone */
clone = unur_gen_clone(gen);
	-->compare_cvec_sequence_gen

unur_free(clone);

#############################################################################

[validate]

[validate - generators:]

# default program
par[0] = unur_vnrou_new(@distr@);

# r = 0.5
par[1] = unur_vnrou_new(@distr@);
unur_vnrou_set_r(par,0.5);

# r = 2
par[2] = unur_vnrou_new(@distr@);
unur_vnrou_set_r(par,2);

# default with bounding rectangle
{ double umin[] = {-0.608928,-0.608928,-0.608928};
double umax[] = { 0.608928, 0.608928, 0.608928};
double vmax = 0.51;
par[3] = unur_vnrou_new(@distr@);
unur_vnrou_set_u(par,umin,umax);
unur_vnrou_set_v(par,vmax); }


# default with bounding rectangle
{ double umin[] = {-0.608928,-0.608928,-0.608928};
double umax[] = { 0.608928, 0.608928, 0.608928};
double vmax = 0.70;
par[4] = unur_vnrou_new(@distr@);
unur_vnrou_set_u(par,umin,umax);
unur_vnrou_set_v(par,vmax); }


[validate - distributions:]

# standard multinormal distribution
distr[0] = unur_distr_multinormal(3,NULL,NULL);


# multinormal distribution, dim = 3 
double mean[]  = { 1., 2., 3. };
double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
distr[1] = unur_distr_multinormal(3,mean,covar);


# random multinormal distribution
\#define dim (2)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   distr[2] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[2]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# random multinormal distribution
\#define dim (3)
int i;
double mean[dim], covar[dim*dim];
UNUR_DISTR *covar_distr;
UNUR_GEN *covar_gen;
UNUR_GEN *mean_gen;
covar_distr = unur_distr_correlation(dim);
covar_gen = unur_init(unur_mcorr_new(covar_distr));
mean_gen = unur_str2gen("normal(5,1)");
for (i=0; i<dim; i++) 
   mean[i] = unur_sample_cont(mean_gen);
do { 
   unur_sample_matr(covar_gen,covar);
   distr[3] = unur_distr_multinormal(dim,mean,covar); 
} while (distr[3]==NULL);
unur_distr_free(covar_distr);
unur_free(covar_gen);
unur_free(mean_gen); 
\#undef dim


# multinormal distribution, dim = 3, shifted center 
double mean[]  = { -1., -2., -3. };
double covar[] = { 2., 2., 1.,   2., 4., 3.,   1., 3., 3. };
distr[4] = unur_distr_multinormal(3,mean,covar);
unur_distr_cvec_set_center(distr[4],NULL);


# standard "multinormal" distribution with dimension 1
distr[5] = unur_distr_multinormal(1,NULL,NULL);


# multinormal distribution, dim = 1, shifted center 
double mean[]  = { -1. };
double covar[] = { 2. };
distr[6] = unur_distr_multinormal(1,mean,covar);
unur_distr_cvec_set_center(distr[6],NULL);

# multinormal with AR(1) (rho=0.5, dim=2) 
distr[7] = unur_distr_multinormal_ar1(2,NULL,0.5);

# multinormal with AR(1) (rho=0.5, dim=3) 
distr[8] = unur_distr_multinormal_ar1(3,NULL,0.5);

# multinormal with AR(1) (rho=0.5, dim=4) 
distr[9] = unur_distr_multinormal_ar1(4,NULL,0.5);

# multinormal with AR(1) (rho=0.5, dim=5) 
distr[10] = unur_distr_multinormal_ar1(5,NULL,0.5);

# multinormal with AR(1) (rho=0.8, dim=2) 
distr[11] = unur_distr_multinormal_ar1(2,NULL,0.8);

# multinormal with AR(1) (rho=0.8, dim=3) 
distr[12] = unur_distr_multinormal_ar1(3,NULL,0.8);

# multinormal with AR(1) (rho=0.8, dim=4) 
distr[13] = unur_distr_multinormal_ar1(4,NULL,0.8);

# multinormal with AR(1) (rho=0.8, dim=5) 
distr[14] = unur_distr_multinormal_ar1(5,NULL,0.8);

# number of distributions: 15 

[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0] ... default variant
#  [1] ... r = 0.5
#  [2] ... r = 2
#  [3] ... r = default, given rectangle
#  [4] ... r = default, given rectangle
#
#gen    0  1  2  3  4	# distribution
#---------------------------------------------
<0>	+  +  +	 +  .	# standard multinormal (dim=3)
<1>	+  +  +	 -  .	# multinormal (dim=3)
<2>	+  +  +	 .  .	# random multinormal (dim=2)
<3>	+  +  +	 .  .	# random multinormal (dim=3)
<4>	+  +  +	 .  .	# multinormal (dim=3), shifted center
<5>	+  +  +	 .  +	# standard multinormal (dim=1)
<6>	+  +  +	 .  .	# multinormal (dim=1), shifted center
<7>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.5, dim=2)
<8>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.5, dim=3)
<9>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.5, dim=4)
<10>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.5, dim=5)
<11>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.8, dim=2)
<12>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.8, dim=3)
<13>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.8, dim=4)
<14>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.8, dim=5)

[validate - verify hat:]

#  + ... pass test
#  ~ ... fail in at most 1% of samples
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#  [0] ... default variant
#  [1] ... r = 0.5
#  [2] ... r = 2
#  [3] ... r = default, given rectangle
#  [4] ... r = default, given rectangle
#
#gen    0  1  2	 3  4	# distribution
#---------------------------------------------
<0>	+  +  +	 +  .	# standard multinormal (dim=3)
<1>	+  +  +	 -  .	# multinormal (dim=3)
<2>	+  +  +	 .  .	# random multinormal (dim=2)
<3>	+  +  +	 .  .	# random multinormal (dim=3)
<4>	+  +  +	 .  .	# multinormal (dim=3), shifted center
<5>	+  +  +	 .  +	# standard multinormal (dim=1)
<6>	+  +  +	 .  .	# multinormal (dim=1), shifted center
<7>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.5, dim=2)
<8>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.5, dim=3)
<9>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.5, dim=4)
<10>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.5, dim=5)
<11>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.8, dim=2)
<12>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.8, dim=3)
<13>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.8, dim=4)
<14>	+  +  +	 .  .	# multinormal with AR(1) (rho=0.8, dim=5)


#############################################################################
#############################################################################

[verbatim]

/* dummy function */
int unur_vnrou_set_pedantic( UNUR_PAR *par, int pedantic )
{ return 1; }

#############################################################################
