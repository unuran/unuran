# $Id$
#############################################################################

[main]

[main - data:]

# method
method: TDR

# type of generator (cont|discr)
type: cont

# which distributions should be used for testing
# T-concave distributions with c <= 0.
distributions: type & T_Tconcave, c_max >= 0.

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(9234)

[main - header:]

/* prototypes */
double pdf( double x, UNUR_DISTR *distr );

double pdf_bimodal( double x, UNUR_DISTR *distr );
double dpdf_bimodal( double x, UNUR_DISTR *distr );

double pdf_negative( double x, UNUR_DISTR *distr );
double dpdf_negative( double x, UNUR_DISTR *distr );

double pdf_partnegative( double x, UNUR_DISTR *distr );
double dpdf_partnegative( double x, UNUR_DISTR *distr );

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

#############################################################################

[set]

#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

[sample - compare:
   distr = unur_distr_normal(NULL,0); 
   par = NULL; ]

/* c = 0 */
par = unur_tdr_new(distr);
unur_tdr_set_c(par,0);
        -->compare_double_sequence_par_start

/* c = 0, verifying mode */
par = unur_tdr_new(distr);
unur_tdr_set_c(par,0);
unur_tdr_set_verify(par,1);
        -->compare_double_sequence_par

#
#/* pdf at mode is too small: hat < pdf near mode */
#
#/* default algorithm */
#par = unur_ssr_new(distr);
#unur_ssr_set_pdfatmode(par,0.1);
#        --> run_verify_generator --> UNUR_ERR_GEN_CONDITION
#  
#/* use cdf at mode and squeeze */
#par = unur_ssr_new(distr);
#unur_ssr_set_pdfatmode(par,0.1);
#unur_ssr_set_cdfatmode(par,0.5);
#unur_ssr_set_usesqueeze(par,1);
#        --> run_verify_generator --> UNUR_ERR_GEN_CONDITION
#
#/* pdf at mode is too large: squeeze > pdf near mode */
#
#/* use cdf at mode and squeeze */
#unur_distr_cont_set_pdfarea(distr,10.);
#par = unur_ssr_new(distr);
#unur_ssr_set_cdfatmode(par,0.5);
#unur_ssr_set_pdfatmode(par,10.);
#unur_ssr_set_usesqueeze(par,1);
#        --> run_verify_generator --> UNUR_ERR_GEN_CONDITION


#############################################################################

[validate]

[validate - chi2 test:]

	--> run_validate_chi2 {
		/* c = 0 */
		par = unur_tdr_new(distr);
		unur_tdr_set_c(par,0.);
		unur_tdr_set_max_intervals(par,100); }

	--> run_validate_chi2 {
		/* c = 0 */
		par = unur_tdr_new(distr);
		unur_tdr_set_variant_ps(par);
		unur_tdr_set_c(par,0.);
		unur_tdr_set_max_intervals(par,100); }

	--> run_validate_chi2 {
		/* c = 0 */
		par = unur_tdr_new(distr);
		unur_tdr_set_variant_ia(par);
		unur_tdr_set_c(par,0.);
		unur_tdr_set_max_intervals(par,100); }

#############################################################################
#############################################################################

[verbatim]

/* pdf of bimodal density */
double pdf_bimodal( double x, UNUR_DISTR *distr )
{ 
	return ( exp(-(x-1.)*(x-1.)) + exp(-(x+1.)*(x+1.)) );
}
double dpdf_bimodal( double x, UNUR_DISTR *distr )
{ 
	return ( -2. * (x-1.) * exp(-(x-1.)*(x-1.)) -2. * (x+1.) * exp(-(x+1.)*(x+1.)) );
}

/* pdf with negative value */
double pdf_negative( double x, UNUR_DISTR *distr )  { return (-x*x); }
double dpdf_negative( double x, UNUR_DISTR *distr ) { return (-2.*x); }

/* pdf with partial negative value */
double pdf_partnegative( double x, UNUR_DISTR *distr )  
{ 
	return ((x>-0.89 && x<0.89) ? -1.: exp(-x*x)); 
}
double dpdf_partnegative( double x, UNUR_DISTR *distr ) 
{
	return ((x>-0.89 && x<0.89) ?0.: -2.*x*exp(-x*x));
}

/* pdf of bimodal density */
double pdf( double x, UNUR_DISTR *distr )
{ 
	return exp(-x*x/2.);
} /* end of pdf */

#############################################################################
