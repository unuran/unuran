# $Id$
#############################################################################

[main]

[main - data:]

# method - timings for various methods
method: TIMING

[main - header:]

\#define COMPARE_SAMPLE_SIZE   (500)
\#define VIOLATE_SAMPLE_SIZE   (20)

/* prototypes */

#############################################################################

[new]

#############################################################################

[set]

#############################################################################

[get]

#############################################################################

[chg]

#############################################################################

[init]

#############################################################################

[reinit]

#############################################################################

[sample]

#############################################################################

[validate]

[validate - generators:]

# default variant
par[0] = unur_dsrou_new(@distr@);

# use cdf at mode-1
{ double Fmode = unur_distr_discr_eval_cdf( unur_distr_discr_get_mode(@distr@), @distr@ );
par[1] = unur_dsrou_new(@distr@);
unur_dsrou_set_cdfatmode(par,Fmode); }


[validate - distributions:]

# geometric disctribution
fpm[0] = 0.5;
distr[0] = unur_distr_geometric(fpm,1);

fpm[0] = 0.1;
distr[1] = unur_distr_geometric(fpm,1);

fpm[0] = 0.001;
distr[2] = unur_distr_geometric(fpm,1);

# logarithmic distribution
fpm[0] = 0.1;
distr[3] = unur_distr_logarithmic(fpm,1);

fpm[0] = 0.9;
distr[4] = unur_distr_logarithmic(fpm,1);

# negative binomial distribution
fpm[0] = 0.5;
fpm[1] = 10.;
distr[5] = unur_distr_negativebinomial(fpm,2);

fpm[0] = 0.7;
fpm[1] = 5.;
distr[6] = unur_distr_negativebinomial(fpm,2);

fpm[0] = 0.1;
fpm[1] = 20.;
distr[7] = unur_distr_negativebinomial(fpm,2);

# poisson distribution
fpm[0] = 3.;
distr[8] = unur_distr_poisson(fpm,1);

fpm[0] = 50.;
distr[9] = unur_distr_poisson(fpm,1);

# binomial distribution
fpm[0] = 10.;
fpm[1] = 0.63;
distr[10] = unur_distr_binomial(fpm,2);

fpm[0] = 20.;
fpm[1] = 0.8;
distr[11] = unur_distr_binomial(fpm,2);

# binomial distribution
fpm[0] = 2000.;
fpm[1] = 0.0013;
distr[12] = unur_distr_binomial(fpm,2);

# Hyper geometric distribution
fpm[0] = 2000.;
fpm[1] = 200.;
fpm[2] = 20;
distr[13] = unur_distr_hypergeometric(fpm,3);

# Hyper geometric distribution
fpm[0] = 2000.;
fpm[1] = 200.;
fpm[2] = 220;
distr[14] = unur_distr_hypergeometric(fpm,3);


# number of distributions: 15

[validate - timing:]

#  + ... pass test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0] ... default
#   [1] ... use cdf at mode-1
#
#gen	0   1   # distribution
#----------------------------------------------------
<0>     +   +   # geometric (0.5)
<0>     +   +   # geometric (0.5)
<1>     +   +   # geometric (0.1)
<2>     +   +   # geometric (0.001)
<3>     +   +   # logarithmic (0.1)
<4>     +   +   # logarithmic (0.9)
<5>     +   +   # negativebinomial (0.5, 10)
<6>     +   +   # negativebinomial (0.7, 5)
<7>     +   +   # negativebinomial (0.1, 20)
<8>     +   +   # poisson (3)
<9>     +   +   # poisson (20)
<10>    +   +   # binomial (10, 0.63)
<11>    +   +   # binomial (20, 0.8)
<12>    +   +   # binomial (2000, 0.0013)
<13>    +   +   # hypergeometric (2000, 200, 20)
<14>    +   +   # hypergeometric (2000, 200, 220)

# number of distributions: 15

#############################################################################
#############################################################################

[verbatim]

#############################################################################
