# $Id$
#############################################################################

[main]

[main - data:]

# method
method: UTDR

# which uniform random number generator should be used for testing
# Mersenne Twister as URNG
urng: mt19937(1037)

[main - header:]

/* prototypes */
double pdf( double x, UNUR_DISTR *distr );

double pdf_bimodal( double x, UNUR_DISTR *distr );
double dpdf_bimodal( double x, UNUR_DISTR *distr );

double pdf_negative( double x, UNUR_DISTR *distr );
double dpdf_negative( double x, UNUR_DISTR *distr );

double pdf_partnegative( double x, UNUR_DISTR *distr );
double dpdf_partnegative( double x, UNUR_DISTR *distr );

double pdf_sqrtlin( double x, UNUR_DISTR *distr );
double dpdf_sqrtlin( double x, UNUR_DISTR *distr );
double cdf_sqrtlin( double x, UNUR_DISTR *distr );

double pdf_sqrtlinshft(double x, UNUR_DISTR *distr );
double dpdf_sqrtlinshft( double x, UNUR_DISTR *distr );
double cdf_sqrtlinshft( double x, UNUR_DISTR *distr );

static int COMPARE_SAMPLE_SIZE = 500;
static int VIOLATE_SAMPLE_SIZE = 20;

#############################################################################

[new]

[new - invalid NULL ptr: 
   distr = NULL; ]

~( distr );
	--> expected_NULL --> UNUR_ERR_NULL

[new - invalid distribution type:
   distr = unur_distr_discr_new(); ]

~( distr );
	 --> expected_NULL --> UNUR_ERR_DISTR_INVALID

[new - data missing in distribution object:
   distr = unur_distr_cont_new(); ]

/* pdf, mode, pdfarea */
~( distr );
        --> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

/* mode, pdfarea */
unur_distr_cont_set_pdf(distr,pdf);
~( distr );
        --> expected_NULL --> UNUR_ERR_DISTR_REQUIRED

/* pdfarea */
unur_distr_cont_set_mode(distr,1.);
~( distr );
        --> expected_NULL --> UNUR_ERR_DISTR_REQUIRED


#############################################################################

[set]

[set - invalid NULL ptr: 
   par = NULL; ]

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_NULL

~_pdfatmode(par,1.);
        --> expected_setfailed --> UNUR_ERR_NULL

~_cfactor(par, 1.);
        --> expected_setfailed --> UNUR_ERR_NULL

~_deltafactor(par, 1.);
        --> expected_setfailed --> UNUR_ERR_NULL



[set - invalid parameter object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr); ]

~_verify( par, 1 );
	--> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_pdfatmode(par,1.);
        --> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_cfactor(par, 1.);
        --> expected_setfailed --> UNUR_ERR_PAR_INVALID

~_deltafactor(par, 1.);
        --> expected_setfailed --> UNUR_ERR_PAR_INVALID


[set - invalid parameters:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_utdr_new(distr); ]

~_pdfatmode(par,-1.);
        --> expected_setfailed --> UNUR_ERR_PAR_SET

~_cfactor(par, -1.);
        --> expected_setfailed --> UNUR_ERR_PAR_SET

~_deltafactor(par, -1.);
        --> expected_setfailed --> UNUR_ERR_PAR_SET

~_deltafactor(par, 1.);
        --> expected_setfailed --> UNUR_ERR_PAR_SET

#############################################################################

[get]

#############################################################################

[chg]

[chg - invalid generator object:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_arou_new(distr);
   unur_set_debug(par,0);
   gen = unur_init( par ); <-- ! NULL ]

~_verify(gen,1);
	--> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_pdfparams(gen,fpar,2);
        --> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_domain(gen,0.,1.);
        --> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_mode(gen,0.);
        --> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_pdfatmode(gen,1.);
        --> expected_setfailed --> UNUR_ERR_GEN_INVALID

~_pdfarea(gen,1.);
        --> expected_setfailed --> UNUR_ERR_GEN_INVALID

[chg - invalid parameters:
   double fpar[2] = {0.,1.};
   distr = unur_distr_normal(fpar,2);
   par = unur_utdr_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

~_pdfparams(gen,NULL,1);
        --> expected_setfailed --> UNUR_ERR_NULL

~_pdfparams(gen,fpar,UNUR_DISTR_MAXPARAMS+10);
        --> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS

~_pdfparams(gen,fpar,-1);
        --> expected_setfailed --> UNUR_ERR_DISTR_NPARAMS

~_pdfatmode(gen,-1.);
        --> expected_setfailed --> UNUR_ERR_PAR_SET

~_domain(gen,1.,-1.);
        --> expected_setfailed --> UNUR_ERR_DISTR_SET

~_pdfarea(gen,-1.);
        --> expected_setfailed --> UNUR_ERR_DISTR_SET


#############################################################################

[init]

[init - invalid NULL ptr: 
   par = NULL; ]

unur_init( par );
	--> expected_NULL --> UNUR_ERR_NULL


#############################################################################

[reinit]

[reinit - exist:
   distr = unur_distr_normal(NULL,0);
   par = unur_utdr_new(distr);
   gen = unur_init( par ); <-- ! NULL ]

~( gen );
	--> expected_reinit

#############################################################################

[sample]

[sample - compare:
   distr = unur_distr_normal(NULL,0); 
   par = NULL; ]

/* default algorithm */
par = unur_utdr_new(distr);
        -->compare_double_sequence_par_start

/* default algorithm - verifying mode */
par = unur_utdr_new(distr);
unur_utdr_set_verify(par,1);
        -->compare_double_sequence_par


#############################################################################

[validate]

[validate - generators:]

# default program
par[0] = unur_utdr_new(@distr@);

# default variant but reinitialized with changed domain
par[1] = unur_utdr_new(@distr@);
unur_utdr_chg_domain(gen,0.9,0.92);
unur_utdr_upd_pdfarea(gen);
unur_utdr_upd_mode(gen);
unur_utdr_reinit(gen);	

# default variant but reinitialized with changed pdf parameters
par[2] = unur_utdr_new(@distr@);
fpm[0] = 1.;
fpm[1] = 4.;
unur_utdr_chg_pdfparams(gen,fpm,2);
unur_utdr_upd_pdfarea(gen);
unur_utdr_upd_mode(gen);
unur_utdr_reinit(gen);	

[validate - distributions:]

# Beta distributions
fpm[0] = 1.;
fpm[1] = 2.;
distr[0] = unur_distr_beta(fpm,2);

fpm[0] = 1.;
fpm[1] = 5.;
distr[1] = unur_distr_beta(fpm,2);

fpm[0] = 1.;
fpm[1] = 100.;
distr[2] = unur_distr_beta(fpm,2);

fpm[0] = 3.;
fpm[1] = 4.;
distr[3] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 100.;
distr[4] = unur_distr_beta(fpm,2);

fpm[0] = 500.;
fpm[1] = 300.;
distr[5] = unur_distr_beta(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = -3.;
fpm[3] = 15.;
distr[6] = unur_distr_beta(fpm,4);

# Cauchy distributions
distr[7] = unur_distr_cauchy(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[8] = unur_distr_cauchy(fpm,2);

# Exponential distributions
distr[23] = unur_distr_exponential(NULL,0);

fpm[0] = 30.;
fpm[1] = -5.;
distr[24] = unur_distr_exponential(fpm,2);

# Gamma distributions
fpm[0] = 1.;
distr[9] = unur_distr_gamma(fpm,1);

fpm[0] = 2.;
distr[10] = unur_distr_gamma(fpm,1);

fpm[0] = 3.;
distr[11] = unur_distr_gamma(fpm,1);

fpm[0] = 10.;
distr[12] = unur_distr_gamma(fpm,1);

fpm[0] = 1000.;
distr[13] = unur_distr_gamma(fpm,1);

fpm[0] = 5.;
fpm[1] = 1000.;
distr[14] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 1.e-5;
distr[15] = unur_distr_gamma(fpm,2);

fpm[0] = 5.;
fpm[1] = 10.;
fpm[2] = 1000;
distr[16] = unur_distr_gamma(fpm,3);

# Laplace distributions
distr[25] = unur_distr_laplace(NULL,0);

fpm[0] = -10.;
fpm[1] = 100.;
distr[26] = unur_distr_laplace(fpm,2);

# Normal distributions
distr[17] = unur_distr_normal(NULL,0);

fpm[0] = 1.;
fpm[1] = 1.e-5;
distr[18] = unur_distr_normal(fpm,2);

fpm[0] = 0.;
fpm[1] = 1.e+5;
distr[19] = unur_distr_normal(fpm,2);

# Uniform distributions
distr[20] = unur_distr_uniform(NULL,0);

fpm[0] = 1.;
fpm[1] = 20.;
distr[21] = unur_distr_uniform(fpm,2);

# pdf with piecewise linear function as transformed density with T = -1/sqrt
distr[27] = unur_distr_cont_new();
unur_distr_cont_set_pdf(distr[27],pdf_sqrtlin);
unur_distr_cont_set_dpdf(distr[27],dpdf_sqrtlin);
unur_distr_cont_set_cdf(distr[27],cdf_sqrtlin);
unur_distr_set_name(distr[27],"sqrtlin");
unur_distr_cont_set_mode(distr[27],0.);
unur_distr_cont_set_pdfarea(distr[27],2.);

# pdf with piecewise linear function as transformed density with T = -1/sqrt and shifted mode
distr[28] = unur_distr_cont_new();
unur_distr_cont_set_pdf(distr[28],pdf_sqrtlinshft);
unur_distr_cont_set_dpdf(distr[28],dpdf_sqrtlinshft);
unur_distr_cont_set_cdf(distr[28],cdf_sqrtlinshft);
unur_distr_set_name(distr[28],"sqrtlin");
unur_distr_cont_set_mode(distr[28],1000.);
unur_distr_cont_set_pdfarea(distr[28],2.);

# truncated distributions
distr[22] = unur_distr_cauchy(NULL,0);
unur_distr_cont_set_domain(distr[22],0.1,1.);
unur_distr_cont_upd_mode(distr[22]);
unur_distr_cont_upd_pdfarea(distr[22]);


[validate - test chi2:]

#  + ... pass test
#  0 ... fail to initialize generator
#  - ... fail test
#  . ... do not run test
#  # ... comment
#
# generators:
#   [0] default
#   [1] default, but reinitialized with changed domain
#   [2] default, but reinitialized with changed PDF parameters
# 
#gen	0   1   2	# distribution
#---------------------------------------------
<0>	+   +   +	# beta (1, 2)
<1>	+   +   +	# beta (1, 5)
<2>	+   .   .	# beta (1, 100)
<3>	+   +   +	# beta (3, 4)
<4>	+   .   .	# beta (5, 100)
<5>	+   .   .	# beta (500, 300)
<6>	+   +   .	# beta (5, 10, -3, 15)
<23>	+   +   +	# exponential ()
<24>	+   +   +	# exponential (30, -5)
<7>	+   +   +	# cauchy ()
<8>	+   +   +	# cauchy (1, 20)
<9>	+   +   +	# gamma (1)
<10>	+   +   +	# gamma (2)
<11>	+   +   .	# gamma (3)
<12>	+   +   .	# gamma (10)
<13>	+   .   .	# gamma (1000)
<14>	+   +   .	# gamma (5, 1000, 0)
<15>	+   .   .	# gamma (5, 1e-05, 0)
<16>	+   -   .	# gamma (5, 10, 100000)
<25>	+   +   +	# laplace ()
<26>	+   +   +	# laplace (-10, 100)
<17>	+   +   +	# normal ()
<18>	+   .   +	# normal (1, 1e-05)
<19>	+   .   .	# normal (1, 1e+05)
<20>	+   +   -	# uniform ()
<21>	+   -   +	# uniform (1, 20)

<22>	+   +   +	# cauchy () - truncated

<27>	+   .   .	# pdf with piecewise linear function as transformed density with T = -1/sqrt
<28>	+   .   .	# [27] with shifted mode

# number of distributions: 29

#############################################################################
#############################################################################

[verbatim]

/* pdf of bimodal density */
double pdf_bimodal( double x, UNUR_DISTR *distr )
{ 
	return ( exp(-(x-1.)*(x-1.)) + exp(-(x+1.)*(x+1.)) );
}
double dpdf_bimodal( double x, UNUR_DISTR *distr )
{ 
	return ( -2. * (x-1.) * exp(-(x-1.)*(x-1.)) -2. * (x+1.) * exp(-(x+1.)*(x+1.)) );
}

/* pdf with negative value */
double pdf_negative( double x, UNUR_DISTR *distr )  { return (-x*x); }
double dpdf_negative( double x, UNUR_DISTR *distr ) { return (-2.*x); }

/* pdf with partial negative value */
double pdf_partnegative( double x, UNUR_DISTR *distr )  
{ 
	return ((x>-0.89 && x<0.89) ? -1.: exp(-x*x)); 
}
double dpdf_partnegative( double x, UNUR_DISTR *distr ) 
{
	return ((x>-0.89 && x<0.89) ?0.: -2.*x*exp(-x*x));
}

/* pdf of normal density */
double pdf( double x, UNUR_DISTR *distr )
{ 
	return exp(-x*x/2.);
} /* end of pdf */

/* pdf with piecewise linear function as transformed density with T = -1/sqrt */
double pdf_sqrtlin( double x, UNUR_DISTR *distr )
{ 
	double y = 1./(fabs(x)+1.);
	return y*y;
}
double dpdf_sqrtlin( double x, UNUR_DISTR *distr )
{ 
	double y = 1./(fabs(x)+1.);
	y = 2.*y*y*y;
	return ((x<0.) ? y : - y);
}
double cdf_sqrtlin( double x, UNUR_DISTR *distr )
{ 
	if (x<=0.)
		return 0.5/(1.-x);
	else
		return (1.-0.5/(1.+x));
}

/* pdf with piecewise linear function as transformed density with T = -1/sqrt and shifted mode */
double pdf_sqrtlinshft( double x, UNUR_DISTR *distr )
{ 
	double y;
	x -= 1000.;
	y = 1./(fabs(x)+1.);
	return y*y;
}
double dpdf_sqrtlinshft( double x, UNUR_DISTR *distr )
{ 
	double y;
	x -= 1000.;
	y = 1./(fabs(x)+1.);
	y = 2.*y*y*y;
	return ((x<0.) ? y : - y);
}
double cdf_sqrtlinshft( double x, UNUR_DISTR *distr )
{ 
	x -= 1000.;
	if (x<=0.)
		return 0.5/(1.-x);
	else
		return (1.-0.5/(1.+x));
}

#############################################################################
